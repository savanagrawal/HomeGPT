{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment HomeGPT  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
v.1.0 \par
}}HomeGPT}
{\comment Generated by doxygen 1.9.6.}
{\creatim \yr2023\mo4\dy25\hr2\min12\sec28}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt HomeGPT}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version v.1.0\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Tue Apr 25 2023 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Main Page\par \pard\plain 
{\tc \v Main Page}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\bkmkstart AAAAAAABAI}
{\bkmkend AAAAAAABAI}
\par
\par
 \par
\\ {\b } \par
{\b  HomeGPT: Transforming Homes with a clap, smile and a wave!! } \par
{\b } \par
\\ This repository will follow the development of an Home Assistant project HomeGPT based on real-time embedded system. This is a post-graduate project for the {\f2 University of Glasgow}.\par
{\f2 } {\f2 } {\f2 } {\f2 }\par
{\bkmkstart AAAAAAABAJ}
{\bkmkend AAAAAAABAJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Contents
\par}
{\tc\tcl2 \v Contents}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Commercial\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
About\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Getting Started\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Docs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Libraries/Dependencies/Softwarers\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Hardware Description\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Data Sheets\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Team Members\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
License\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Code of Conduct\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Contributing\par}
\par
{\bkmkstart AAAAAAABAK}
{\bkmkend AAAAAAABAK}
 \par}
{\bkmkstart AAAAAAABAL}
{\bkmkend AAAAAAABAL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Commercial
\par}
{\tc\tcl2 \v Commercial}
Watch our demo on Youtube.\par
{\f2 }\par
{\bkmkstart AAAAAAABAM}
{\bkmkend AAAAAAABAM}
 \par}
{\bkmkstart AAAAAAABAN}
{\bkmkend AAAAAAABAN}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
About
\par}
{\tc\tcl2 \v About}
HomeGPT revolutionizes home automation with advanced features such as facial recognition for secure access, mood-responsive lighting, RFID-enabled garage entry, and clap-activated door closures. This system elevates the living experience by seamlessly blending security, convenience, and ambiance-enhancing\'A0technology.\par
{\bkmkstart AAAAAAABAO}
{\bkmkend AAAAAAABAO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Key Features
\par}
{\tc\tcl4 \v Key Features}
\par}
{\bkmkstart AAAAAAABAP}
{\bkmkend AAAAAAABAP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
1.  Facial Recognition based Home Entry
\par}
{\tc\tcl4 \v 1.  Facial Recognition based Home Entry}
This feature ensures {\b SAFETY}  of your home by recognizing entrants at the main door. A person can enter only if detected an ally for the people of the house. {\b Intruders}  are {\b Not Allowed}  as the doors won't open for you! Real Time feed of camera at the door compares an entrant's image using HOG Classifier to generate signal for welcoming the person by opening the door. You have new friend coming in, No problemo! we have feature to train the model and add new allies in real time as well!\par
\par}
{\bkmkstart AAAAAAABAQ}
{\bkmkend AAAAAAABAQ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
2. Mood based Lighting Control
\par}
{\tc\tcl4 \v 2. Mood based Lighting Control}
This state of art feature detects the mood of a person in room and {\b adjusts the lights}  accordingly. Researchers believe that lighting levels have effect on the intensity of emotions. So now we can {\b lighten up the moods}  and make the feel joyous in the house at all times! {\b Camera} feed detects facial gestures in real time and uses SVM Model that has been trained on {\b Kaggle}  {\f2 https://www.kaggle.com/datasets/jonathanoheix/face-expression-recognition-dataset} dataset suing OpenCV and HOG to compare your mood and distinguish it between 7 different moods Angry, Disgust, Fear, Happy, Neutral, Sad, Surprise in real time.\par
\par}
{\bkmkstart AAAAAAABAR}
{\bkmkend AAAAAAABAR}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Key Features
\par}
{\tc\tcl4 \v Key Features}
\par}
{\bkmkstart AAAAAAABAS}
{\bkmkend AAAAAAABAS}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
1.  Facial Recognition based Home Entry
\par}
{\tc\tcl4 \v 1.  Facial Recognition based Home Entry}
This feature ensures {\b SAFETY}  of your home by recognizing entrants at the main door. A person can enter only if detected an ally for the people of the house. {\b Intruders}  are {\b Not Allowed}  as the doors won't open for you! Real Time feed of camera at the door compares an entrant's image using HOG Classifier to generate signal for welcoming the person by opening the door. You have new friend coming in, No problemo! we have feature to train the model and add new allies in real time as well!\par
\par}
{\bkmkstart AAAAAAABAT}
{\bkmkend AAAAAAABAT}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
2. Mood based Lighting Control
\par}
{\tc\tcl4 \v 2. Mood based Lighting Control}
This state of art feature detects the mood of a person in room and {\b adjusts the lights}  accordingly. Researchers believe that lighting levels have effect on the intensity of emotions. So now we can {\b lighten up the moods}  and make the feel joyous in the house at all times! {\b Camera} feed detects facial gestures in real time and uses SVM Model that has been trained on {\b Kaggle}  {\f2 https://www.kaggle.com/datasets/jonathanoheix/face-expression-recognition-dataset} dataset suing OpenCV and HOG to compare your mood and distinguish it between 7 different moods Angry, Disgust, Fear, Happy, Neutral, Sad, Surprise in real time.\par}
{\bkmkstart AAAAAAABAU}
{\bkmkend AAAAAAABAU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
3. Key less Garage Entry for Vehicles
\par}
{\tc\tcl4 \v 3. Key less Garage Entry for Vehicles}
This feature lets you sit comfortably in the car when you reach your house and lets you park the car in garage comfortably by subtarcting the hustle of getting out of the car and {\b open the garage door*. ***RFID}  Sensor detects the unique identity of your car at arrival and opens the garage door for your ease of parking!\par
\par}
{\bkmkstart AAAAAAABAV}
{\bkmkend AAAAAAABAV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
4. Clap Detection for Door Shut using FFT (Fast Fourier Transform) & DFT (Discrete Fourier Transform)
\par}
{\tc\tcl4 \v 4. Clap Detection for Door Shut using FFT (Fast Fourier Transform) & DFT (Discrete Fourier Transform)}
One of the stand-out feature of this project is detecting your {\b Clap}  to {\b shut that door behind you} . So you can move freely in your house and ensure privacy. It's annoying if you forget to close a door behind you cause you were busy imagining your fantasy! And someone shouts from behind just to get you back into this cruel world holding accountable for manners! Real Time feed of sound is convoluted on sample sets and peaks are evaluated to judge the clap intensity. In case of match, the signal is sent to actuator to\'A0shut\'A0the\'A0door.\par
\par
\\ {\bkmkstart AAAAAAABAW}
{\bkmkend AAAAAAABAW}
\par}
\par}
{\bkmkstart AAAAAAABAX}
{\bkmkend AAAAAAABAX}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Getting Started
\par}
{\tc\tcl2 \v Getting Started}
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Clone the repository. {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid git clone https://github.com/savanagrawal/HomeGPT\par
git submodule init\par
git submodule update\par
}
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Create build directory. {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid mkdir build && cd build\par
}
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab Build the binaries. {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cmake ../\par
make\par
}
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab Run Program. {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid sudo ./HomeGPT --module\par
}
\par}
\par
All the modules are listed as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid "--create-intruder-dataset" -> Create Intruder dataset\par
"--cid" -> Create Intruder dataset\par
"--train-intruder-model" -> Train Intruder model\par
"--tim" -> Train Intruder model\par
"--detect-intruder" -> Detect Intruder\par
"--di" -> Detect Intruder\par
"--detect-clap" -> Detect Claps\par
"--dc" -> Detect Claps\par
"--rfid" -> Read RFID.\par
"--imd" -> Start Intruder and Mood detection together.\par
"--d" -> All modules together.\par
}
\par
\\ {\bkmkstart AAAAAAABAY}
{\bkmkend AAAAAAABAY}
\par}
{\bkmkstart AAAAAAABAZ}
{\bkmkend AAAAAAABAZ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Libraries / Dependencies / Softwares
\par}
{\tc\tcl2 \v Libraries / Dependencies / Softwares}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Raspbian (Debian 10 : Buster/Legacy)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C++\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
OpenCV\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
CMake\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Boost\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
PortAudio\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
twyleg/spidevpp - A ported version to work with C++11.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
twyleg/mfrc522-cpp\par}
\par
\\ {\bkmkstart AAAAAAABBA}
{\bkmkend AAAAAAABBA}
 \par}
{\bkmkstart AAAAAAABBB}
{\bkmkend AAAAAAABBB}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Hardware Description
\par}
{\tc\tcl2 \v Hardware Description}
{\b Raspberry pi 3:} \par
The Raspberry Pi 3 is a highly versatile and affordable single-board computer that offers impressive computing power in a compact form factor. Powered by a quad-core ARM Cortex-A53 processor running at 1.2 GHz, and equipped with 1 GB of RAM, it delivers smooth performance for a wide range of tasks.\par
With its various ports, including USB, HDMI, Ethernet, and GPIO, the Raspberry Pi 3 offers extensive connectivity options for peripherals and accessories, allowing for versatile integration into different projects. This makes it popular among hobbyists, educators, and DIY enthusiasts for a wide range of applications, from media centers and retro gaming consoles to robotics and smart home systems.\par
Overall, the Raspberry Pi 3 is a powerful and flexible single-board computer that offers a wide range of possibilities for hobbyists, students, educators, and DIY enthusiasts alike. Its compact size, affordable price, and impressive performance make it a popular choice for a wide range of computing projects and applications.\par
\\ {\b Raspberry pi {\b Camera} Module:} \par
The camera module is compact and lightweight, making it easy to integrate into various projects. It connects to the Raspberry Pi via a ribbon cable, and the camera is controlled through software using the Raspberry Pi's GPIO pins. The module features a fixed-focus lens and is capable of capturing still images with a resolution of up to 8 megapixels, as well as high-definition video with up to 1080p resolution.\par
The Raspberry Pi {\b Camera} Module is highly versatile and can be used for a wide range of applications, including time-lapse photography, motion detection, facial recognition, object tracking, and more. It can be used in combination with other Raspberry Pi accessories and sensors to create custom camera solutions for specific projects or applications.\par
\\ {\b RC522 {\b RFID} Module:} \par
The RC522 {\b RFID} sensor is a small, low-cost module that allows for easy integration of {\b RFID} (Radio-Frequency Identification) technology with microcontroller projects. It operates at 13.56 MHz frequency and uses SPI (Serial Peripheral Interface) for communication, making it compatible with popular microcontrollers like Arduino and Raspberry Pi.\par
The RC522 sensor is capable of reading {\b RFID} tags and cards, and it can communicate with various types of {\b RFID} cards, including MIFARE cards, which are widely used in access control, authentication, and identification applications. It offers a reading range of a few centimeters, making it suitable for short-range applications.\par
\\ {\b Tower Pro Servo Motor - SG90 Digital:} \par
The Tower Pro SG90 is a digital servo motor, a type of motor that is widely used in robotics, RC (remote control) vehicles, and other applications that require precise and controlled angular movements. The SG90 is compact and lightweight, making it suitable for small-scale projects. It offers a torque of up to 1.8 kg/cm, a rotation range of 180 degrees, and operates on a voltage range of 4.8V to 6V. The digital technology in the SG90 provides improved accuracy, responsiveness, and reliability compared to analog servo motors. It is compatible with popular microcontrollers like Arduino and Raspberry Pi, and can be easily controlled using PWM (Pulse Width Modulation) signals. The Tower Pro SG90 digital servo motor is a popular choice for hobbyists and DIY enthusiasts due to its affordability, ease of use, and reliable performance in various applications.\par
\\ {\bkmkstart AAAAAAABBC}
{\bkmkend AAAAAAABBC}
 \par}
{\bkmkstart AAAAAAABBD}
{\bkmkend AAAAAAABBD}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Data Sheets
\par}
{\tc\tcl2 \v Data Sheets}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Raspberry Pi 3 : Model B : V1.2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Raspberry Pi Camera Module 1080P 5MP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 BOB-12009: Bidirectional Logic Level Converter Board}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ADS1115 16-Bit ADC : 4 Channel with Programmable Gain Amplifier}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TowerPro Servo Motor - SG90 Digital}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 RC522 RFID Module 13.56MHz}\par}
\par
\\ {\bkmkstart AAAAAAABBE}
{\bkmkend AAAAAAABBE}
 \par}
{\bkmkstart AAAAAAABBF}
{\bkmkend AAAAAAABBF}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Team Members
\par}
{\tc\tcl2 \v Team Members}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx1749
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx3498
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5247
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx6996
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8745
\pard \widctlpar\intbl\adjustright
{Name   \cell }{Github   \cell }{GUID   \cell }{Course   \cell }{Role    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx1749
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx3498
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5247
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx6996
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8745
\pard \widctlpar\intbl\adjustright
{Savan Agrawal   \cell }{{\f2 @savanagrawal}   \cell }{2781593A   \cell }{MSc in Robotics and AI   \cell }{Intruder, Mood and Clap detection    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx1749
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx3498
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5247
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx6996
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8745
\pard \widctlpar\intbl\adjustright
{Chinmay Nagrale   \cell }{{\f2 @MiB3Avenger}   \cell }{2788044N   \cell }{MSc in Computer Systems Engineering   \cell }{{\b Threads}, Peripherals Integration and Circuit Making    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx1749
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx3498
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5247
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx6996
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8745
\pard \widctlpar\intbl\adjustright
{Hrushikesh Sanap   \cell }{{\f2 @hrushisanap}   \cell }{2819312S   \cell }{MSc in Robotics and AI   \cell }{Fabrication, Documentation and Circuit Making    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx1749
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx3498
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5247
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx6996
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8745
\pard \widctlpar\intbl\adjustright
{Mustafa Zariwala   \cell }{{\f2 @MustafaZari}   \cell }{2617991Z   \cell }{MSc in Robotics and AI   \cell }{Fabrication and Documentation   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\\ {\bkmkstart AAAAAAABBG}
{\bkmkend AAAAAAABBG}
 \par}
{\bkmkstart AAAAAAABBH}
{\bkmkend AAAAAAABBH}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
License
\par}
{\tc\tcl2 \v License}
View our {\f2 License} here.\par
\\ {\bkmkstart AAAAAAABBI}
{\bkmkend AAAAAAABBI}
 \par}
{\bkmkstart AAAAAAABBJ}
{\bkmkend AAAAAAABBJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Code of Conduct
\par}
{\tc\tcl2 \v Code of Conduct}
We follow our {\f2 Code of Conduct} strictly.\par
\\ {\bkmkstart AAAAAAABBK}
{\bkmkend AAAAAAABBK}
 \par}
{\bkmkstart AAAAAAABBL}
{\bkmkend AAAAAAABBL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Contribution Guidelines
\par}
{\tc\tcl2 \v Contribution Guidelines}
Want to contribute? Read our {\f2 Contribution} guidelines. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Contributor Covenant Code of Conduct{\tc \v Contributor Covenant Code of Conduct}\par \pard\plain 
{\bkmkstart AAAAAAABAE}
{\bkmkend AAAAAAABAE}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Our Pledge
\par}
{\tc\tcl2 \v Our Pledge}
We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\par
We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\par}
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Our Standards
\par}
{\tc\tcl2 \v Our Standards}
Examples of behavior that contributes to a positive environment for our community include:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Demonstrating empathy and kindness toward other people\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Being respectful of differing opinions, viewpoints, and experiences\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Giving and gracefully accepting constructive feedback\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Focusing on what is best not just for us as individuals, but for the overall community\par}
\par
Examples of unacceptable behavior include:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The use of sexualized language or imagery, and sexual attention or advances of any kind\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Trolling, insulting or derogatory comments, and personal or political attacks\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Public or private harassment\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Publishing others' private information, such as a physical or email address, without their explicit permission\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Other conduct which could reasonably be considered inappropriate in a professional setting\par}
\par
\par}
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Enforcement Responsibilities
\par}
{\tc\tcl2 \v Enforcement Responsibilities}
Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\par
Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\par}
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Scope
\par}
{\tc\tcl2 \v Scope}
This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\par}
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Enforcement
\par}
{\tc\tcl2 \v Enforcement}
Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at {\f2 sindresorhus@gmail.com}. All complaints will be reviewed and investigated promptly and fairly.\par
All community leaders are obligated to respect the privacy and security of the reporter of any incident.\par}
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Enforcement Guidelines
\par}
{\tc\tcl2 \v Enforcement Guidelines}
Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
1. Correction
\par}
{\tc\tcl3 \v 1. Correction}
{\b Community Impact} : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\par
{\b Consequence} : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\par}
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
2. Warning
\par}
{\tc\tcl3 \v 2. Warning}
{\b Community Impact} : A violation through a single incident or series of actions.\par
{\b Consequence} : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\par}
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
3. Temporary Ban
\par}
{\tc\tcl3 \v 3. Temporary Ban}
{\b Community Impact} : A serious violation of community standards, including sustained inappropriate behavior.\par
{\b Consequence} : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\par}
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
4. Permanent Ban
\par}
{\tc\tcl3 \v 4. Permanent Ban}
{\b Community Impact} : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\par
{\b Consequence} : A permanent ban from any sort of public interaction within the community.\par}
\par}
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Attribution
\par}
{\tc\tcl2 \v Attribution}
This Code of Conduct is adapted from the {\f2 Contributor Covenant}, version 2.0, available at {\f2 https://www.contributor-covenant.org/version/2/0/code_of_conduct.html}.\par
Community Impact Guidelines were inspired by {\f2 Mozilla's code of conduct enforcement ladder}.\par
For answers to common questions about this code of conduct, see the FAQ at {\f2 https://www.contributor-covenant.org/faq}. Translations are available at {\f2 https://www.contributor-covenant.org/translations}. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hardware Requirements{\tc \v Hardware Requirements}\par \pard\plain 
{\bkmkstart AAAAAAABAF}
{\bkmkend AAAAAAABAF}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Raspberry Pi 3 : Model B : V1.2}  A single-board computer that provides an accessible and affordable platform for hobbyists, educators, and professionals to learn, develop, and innovate. It features a quad-core ARM Cortex-A53 processor, 1GB of RAM, built-in Wi-Fi and Bluetooth, HDMI and Ethernet ports, and GPIO pins for interfacing with other components.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Raspberry Pi {\b Camera} Module 1080P 5MP:}  A camera module specifically designed to be used with the Raspberry Pi. It features a 5-megapixel sensor and is capable of recording 1080p video at 30 frames per second. The camera can be used for various applications such as security systems, drones, and timelapse photography.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b BOB-12009: Bidirectional Logic Level Converter Board:}  A level shifter that allows bidirectional voltage translation between different logic levels. It can convert signals from 1.8V to 5V or from 5V to 1.8V, making it useful for interfacing components with different voltage requirements.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ADS1115 16-Bit ADC : 4 Channel with Programmable Gain Amplifier:}  4 Channel with Programmable Gain Amplifier: An analog-to-digital converter that provides 16-bit resolution for accurate and precise measurements. It has four input channels and a programmable gain amplifier, making it suitable for a variety of applications such as temperature sensing, current sensing, and strain gauges.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TowerPro Servo Motor - SG90 Digital:}  A small and lightweight servo motor that can rotate up to 180 degrees. It is commonly used in RC models, robotics, and automation projects where precise control of position or movement is required.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MQ-2 : Butane Hydrogen LPG Gas Smoke Detector:}  A gas sensor module that can detect various flammable gases such as butane, propane, and methane. It is commonly used in gas leak detection systems, fire alarms, and gas monitoring systems.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b RC522 {\b RFID} Module 13.56MHz:}  A radio frequency identification ({\b RFID}) module that can read and write data to {\b RFID} tags or cards at a frequency of 13.56MHz. It is commonly used in access control systems, inventory management, and payment systems.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Microphone:}  It is used in audio recording so that clap detection can be acheived \par}
\par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
spidevpp - C++ wrapper for spidev{\tc \v spidevpp - C++ wrapper for spidev}\par \pard\plain 
{\bkmkstart AAAAAAABAG}
{\bkmkend AAAAAAABAG}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
spidevpp provides a simple wrapper to easily use spidev from C++ applications. Many Raspberry Pi projects use the {\f2 bcm2835 library} to access the SPI interface. The downside is that it requires root privileges to access /dev/mem and is therefire not suitable for many applications. Using spidev to access the SPI interface is a promising alternative that allows access to non-root users based on udev rules.\par
The library provides the spidev interface and a GPIO interface (without any dependencies like wiringPi etc.) to drive additional CS lines, reset lines or any other output that needs to be set for an SPI slave device to work properly.\par
The project can be pulled in as a submodule and integrates with cmake (Check {\f2 mfrc522-cpp} for an example). It was successfully tested on a Raspberry Pi 3B+ with Raspbian GNU/Linux 10 (buster) but should be compatible with every linux that provides spidev kernel support.\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Prerequisites
\par}
{\tc\tcl2 \v Prerequisites}
To make SPI and GPIO accessible to non-root users, make sure that you have udev rules like the following in place: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid SUBSYSTEM=="spidev", GROUP="spi", MODE="0660"\par
SUBSYSTEM=="bcm2835-gpiomem", GROUP="gpio", MODE="0660"\par
}
 On Raspbian/Raspberry Pi OS this should already be included in **/dev/udev/rules.d/99-com.rules** and will cause the spidev and GPIO devices to be assigned to the spi/gpio groups with read/write access.\par
Make sure that your user is a member of the groups {\b spi}  and {\b gpio}  or create the groups and add the user witht he following commands: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid sudo groupadd spi\par
sudo groupadd gpio\par
sudo adduser opendashboard spi\par
sudo adduser opendashboard gpio\par
}
 \par}
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Building
\par}
{\tc\tcl2 \v Building}
Clone the repo: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid git clone https://github.com/twyleg/spidevpp\par
}
 Create a build directory: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cd spidev\par
mkdir build\par
}
 Run cmake: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cd build\par
cmake ..\par
}
 Build: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make\par
}
 \par}
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Example application for smoke testing
\par}
{\tc\tcl2 \v Example application for smoke testing}
The project provides a loopback example for smoke testing that expects the MISO and MOSI pin to be connected. This way the write and read functionality can be tested without an additional slave device by simply writting some data and receiving the data at the same time. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cd spidevpp/build/apps/loopback_example_app\par
./loopback_example_app /dev/spidev0.0\par
}
 This should create the following result: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid read check PASSED\par
write check PASSED\par
readWrite check PASSED\par
}
 \par}
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Troubleshooting
\par}
{\tc\tcl2 \v Troubleshooting}
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Conflict between bcm2835 and spidev on RPi
\par}
{\tc\tcl3 \v Conflict between bcm2835 and spidev on RPi}
Be aware that running an application that uses the bcm2835 spi implementation can cause spidev to malfunction. The reason seem to be that bcm2835 keeps ownership of the CS pins which makes it impossible for the spidev driver to drive the CS lines and enable the slave devices. A quick and dirty fix is to restart the RPi or to simply reload the following kernel modules: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid sudo rmmod spi_bcm2835\par
sudo modprobe spi_bcm2835\par
}
 \par}
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Todo List{\tc \v Todo List}\par \pard\plain 
{\bkmkstart AAAAAAABAH}
{\bkmkend AAAAAAABAH}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Member {\b I2CDriver::Plain_I2C_Write_Read_CRC8}  (int fd, uint16_t command, uint16_t *buffer, uint8_t readlen, uint16_t delay=10)\par
}
{\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
: Appopriate command bytes \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all namespaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b mfrc522} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b spidevpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
CircularQueue\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ClapDetection\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Controller\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CppThread\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKI \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
AudioRecordThread\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ClapThread\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ControllerThread\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
DoorsThread\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
IntruderMoodThread\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
IntruderThread\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MoodThread\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
RFIDThread\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
CppTimer
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
CppTimerCallback\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
IntruderDatasetCreator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
IntruderDetection\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
IntruderMoodDetection\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MoodDetection\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
EventHandler\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Events\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Globals\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
spidevpp::Gpio\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GPIODriver\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
I2CDriver\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
I2CSensor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
mfrc522::IGpio\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARI \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
BcmGpio\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
SysGpio\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
IntruderDatasetTrainer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
mfrc522::ISpi\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARJ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
BcmSpi\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Spidev\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
LEDController\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
mfrc522::MFRC522\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
mfrc522::MFRC522::MIFARE_Key\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
RelayBoard\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
RFID\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CppTimerCallback::Runnable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ServoMotor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
spidevpp::Spi\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Threads\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
mfrc522::MFRC522::Uid\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cv::VideoCapture
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Camera\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b AudioRecordThread} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b BcmGpio} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b BcmSpi} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Camera} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CircularQueue} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ClapDetection} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ClapThread} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Controller} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ControllerThread} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Controller} Thread to manage all child threads })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CppThread} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CppTimerCallback} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DoorsThread} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Doors Thread to manage doors detection functionality })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b EventHandler} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Events} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Globals} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b spidevpp::Gpio} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GPIODriver} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
GPIO Driver Class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b I2CDriver} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
I2C Driver class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b I2CSensor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b mfrc522::IGpio} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b IntruderDatasetCreator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b IntruderDatasetTrainer} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b IntruderDetection} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b IntruderMoodDetection} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b IntruderMoodThread} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b IntruderThread} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Intruder Thread to manage intruder detection functionality })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b mfrc522::ISpi} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b LEDController} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b mfrc522::MFRC522} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b mfrc522::MFRC522::MIFARE_Key} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MoodDetection} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MoodThread} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Mood Thread to manage mood detection functionality })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b RelayBoard} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Relay Board class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b RFID} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b RFIDThread} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Rfid Thread to manage rfid detection functionality })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CppTimerCallback::Runnable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ServoMotor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b spidevpp::Spi} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Spidev} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SysGpio} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Threads} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b mfrc522::MFRC522::Uid} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b src/{\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/clap-detection/{\b ClapDetection.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/clap-detection/{\b ClapDetection.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/controller/{\b Controller.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/controller/{\b Controller.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/dependencies/mfrc522/{\b igpio.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/dependencies/mfrc522/{\b ispi.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/dependencies/mfrc522/{\b mfrc522.cc} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/dependencies/mfrc522/{\b mfrc522.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/dependencies/spidevpp/apps/loopback_example_app/{\b main.cc} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/dependencies/spidevpp/libs/spidevpp/{\b gpio.cc} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/dependencies/spidevpp/libs/spidevpp/{\b gpio.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/dependencies/spidevpp/libs/spidevpp/{\b spi.cc} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/dependencies/spidevpp/libs/spidevpp/{\b spi.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/intruder-detection/{\b DatasetCreator.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/intruder-detection/{\b DatasetCreator.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/intruder-detection/{\b DatasetTrainer.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/intruder-detection/{\b DatasetTrainer.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/intruder-detection/{\b IntruderDetection.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/intruder-detection/{\b IntruderDetection.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/intruder-mood-detection/{\b IntruderMoodDetection.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/intruder-mood-detection/{\b IntruderMoodDetection.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/mood-detection/{\b MoodDetection.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/mood-detection/{\b MoodDetection.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b Camera.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b Camera.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b GPIODriver.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b GPIODriver.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b I2CDriver.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b I2CDriver.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b I2CSensor.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b LEDController.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b LEDController.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b MFRC522.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b MFRC522.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b RelayBoard.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAED \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b RelayBoard.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b RFID.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b RFID.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b ServoMotor.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/{\b ServoMotor.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/bcm2835/{\b bcm2835_gpio_impl.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/bcm2835/{\b bcm2835_spi_impl.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/bcm2835/{\b igpio.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/bcm2835/{\b ispi.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/spi/{\b spidev_impl.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/peripherals/spi/{\b sys_gpio_impl.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/{\b ControllerThread.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/{\b ControllerThread.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/{\b CppThread.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/clap-detection/{\b AudioRecordThread.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/clap-detection/{\b AudioRecordThread.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/clap-detection/{\b ClapThread.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/clap-detection/{\b ClapThread.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAES \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/doors/{\b DoorsThread.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/doors/{\b DoorsThread.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/intruder-detection/{\b IntruderThread.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/intruder-detection/{\b IntruderThread.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/intruder-mood-detection/{\b IntruderMoodThread.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/intruder-mood-detection/{\b IntruderMoodThread.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/mood-detection/{\b MoodThread.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/mood-detection/{\b MoodThread.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/rfid/{\b RFIDThread.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/thread/rfid/{\b RFIDThread.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/utils/{\b CircularQueue.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/utils/{\b CppTimerCallback.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/utils/{\b EventHandler.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/utils/{\b EventHandler.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/utils/{\b Events.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/utils/{\b Globals.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/utils/{\b Threads.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/utils/{\b Utility.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/utils/EventTest/{\b EventHandler.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/utils/EventTest/{\b EventHandler.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/utils/EventTest/{\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/{\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
mfrc522 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v mfrc522}
{\xe \v mfrc522}
{\bkmkstart AAAAAAAARE}
{\bkmkend AAAAAAAARE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IGpio}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ISpi}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b MFRC522}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef uint16_t {\b word}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const uint8_t {\b MFRC522_firmware_referenceV1_0} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const uint8_t {\b MFRC522_firmware_referenceV2_0} []\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v word\:mfrc522}
{\xe \v mfrc522\:word}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef uint16_t {\b mfrc522::word}}}
\par
{\bkmkstart AAAAAAAARF}
{\bkmkend AAAAAAAARF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v MFRC522_firmware_referenceV1_0\:mfrc522}
{\xe \v mfrc522\:MFRC522_firmware_referenceV1_0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const uint8_t mfrc522::MFRC522_firmware_referenceV1_0}}
\par
{\bkmkstart AAAAAAAARG}
{\bkmkend AAAAAAAARG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
    0x00, 0xC6, 0x37, 0xD5, 0x32, 0xB7, 0x57, 0x5C,\par
    0xC2, 0xD8, 0x7C, 0x4D, 0xD9, 0x70, 0xC7, 0x73,\par
    0x10, 0xE6, 0xD2, 0xAA, 0x5E, 0xA1, 0x3E, 0x5A,\par
    0x14, 0xAF, 0x30, 0x61, 0xC9, 0x70, 0xDB, 0x2E,\par
    0x64, 0x22, 0x72, 0xB5, 0xBD, 0x65, 0xF4, 0xEC,\par
    0x22, 0xBC, 0xD3, 0x72, 0x35, 0xCD, 0xAA, 0x41,\par
    0x1F, 0xA7, 0xF3, 0x53, 0x14, 0xDE, 0x7E, 0x02,\par
    0xD9, 0x0F, 0xB5, 0x5E, 0x25, 0x1D, 0x29, 0x79\par
\}\par
}
}
{\xe \v MFRC522_firmware_referenceV2_0\:mfrc522}
{\xe \v mfrc522\:MFRC522_firmware_referenceV2_0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const uint8_t mfrc522::MFRC522_firmware_referenceV2_0}}
\par
{\bkmkstart AAAAAAAARH}
{\bkmkend AAAAAAAARH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
    0x00, 0xEB, 0x66, 0xBA, 0x57, 0xBF, 0x23, 0x95,\par
    0xD0, 0xE3, 0x0D, 0x3D, 0x27, 0x89, 0x5C, 0xDE,\par
    0x9D, 0x3B, 0xA7, 0x00, 0x21, 0x5B, 0x89, 0x82,\par
    0x51, 0x3A, 0xEB, 0x02, 0x0C, 0xA5, 0x00, 0x49,\par
    0x7C, 0x84, 0x4D, 0xB3, 0xCC, 0xD2, 0x1B, 0x81,\par
    0x5D, 0x48, 0x76, 0xD5, 0x71, 0x61, 0x21, 0xA9,\par
    0x86, 0x96, 0x83, 0x38, 0xCF, 0x9D, 0x5B, 0x6D,\par
    0xDC, 0x15, 0xBA, 0x3E, 0x7D, 0x95, 0x3B, 0x2F\par
\}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
spidevpp Namespace Reference\par \pard\plain 
{\tc\tcl2 \v spidevpp}
{\xe \v spidevpp}
{\bkmkstart AAAAAAAAYC}
{\bkmkend AAAAAAAAYC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Gpio}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Spi}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class Stream > Stream & {\b operator<<} (Stream &out, const {\b Spi} &spi)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v operator<<\:spidevpp}
{\xe \v spidevpp\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class Stream > Stream & spidevpp::operator<< (Stream &  {\i out}, const {\b Spi} &  {\i spi})}}
\par
{\bkmkstart AAAAAAAAYD}
{\bkmkend AAAAAAAAYD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioRecordThread Class Reference\par \pard\plain 
{\tc\tcl2 \v AudioRecordThread}
{\xe \v AudioRecordThread}
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
\par
{
{\f2 #include <AudioRecordThread.h>}}\par
Inheritance diagram for AudioRecordThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_audio_record_thread__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for AudioRecordThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_audio_record_thread__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b AudioRecordThread} ({\b ClapDetection} *clapDetection)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b join} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v AudioRecordThread\:AudioRecordThread}
{\xe \v AudioRecordThread\:AudioRecordThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
AudioRecordThread::AudioRecordThread ({\b ClapDetection} *  {\i clapDetection}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v join\:AudioRecordThread}
{\xe \v AudioRecordThread\:join}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::join (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Waits for the thread to terminate. \par
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a8ff0fda6b913cc53764caef0e1200f3f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start\:AudioRecordThread}
{\xe \v AudioRecordThread\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::start (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts the thread. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/clap-detection/{\b AudioRecordThread.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/clap-detection/{\b AudioRecordThread.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BcmGpio Class Reference\par \pard\plain 
{\tc\tcl2 \v BcmGpio}
{\xe \v BcmGpio}
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
\par
{
{\f2 #include <bcm2835_gpio_impl.h>}}\par
Inheritance diagram for BcmGpio:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_bcm_gpio__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for BcmGpio:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_bcm_gpio__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Value} \{ {\b low} = 0
, {\b high} = 1
, {\b l} = 0
, {\b h} = 1
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Value} \{ {\b low} = 0
, {\b high} = 1
, {\b l} = 0
, {\b h} = 1
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b BcmGpio} (unsigned int pin)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setValue} ({\b Value} value) final\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Value} {\b getValue} () final\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Enumeration Documentation\par
\pard\plain 
{\xe \v Value\:BcmGpio}
{\xe \v BcmGpio\:Value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b mfrc522::IGpio::Value}{\f2 [strong]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v low\:BcmGpio}
{\xe \v BcmGpio\:low}
{\qr low{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
\cell }{\cell }{\row }
{\xe \v high\:BcmGpio}
{\xe \v BcmGpio\:high}
{\qr high{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
\cell }{\cell }{\row }
{\xe \v l\:BcmGpio}
{\xe \v BcmGpio\:l}
{\qr l{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
\cell }{\cell }{\row }
{\xe \v h\:BcmGpio}
{\xe \v BcmGpio\:h}
{\qr h{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
\cell }{\cell }{\row }
}
}
{\xe \v Value\:BcmGpio}
{\xe \v BcmGpio\:Value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b mfrc522::IGpio::Value}{\f2 [strong]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v low\:BcmGpio}
{\xe \v BcmGpio\:low}
{\qr low{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
\cell }{\cell }{\row }
{\xe \v high\:BcmGpio}
{\xe \v BcmGpio\:high}
{\qr high{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
\cell }{\cell }{\row }
{\xe \v l\:BcmGpio}
{\xe \v BcmGpio\:l}
{\qr l{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
\cell }{\cell }{\row }
{\xe \v h\:BcmGpio}
{\xe \v BcmGpio\:h}
{\qr h{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
\cell }{\cell }{\row }
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v BcmGpio\:BcmGpio}
{\xe \v BcmGpio\:BcmGpio}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
BcmGpio::BcmGpio (unsigned int  {\i pin}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getValue\:BcmGpio}
{\xe \v BcmGpio\:getValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Value} BcmGpio::getValue (){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::IGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v setValue\:BcmGpio}
{\xe \v BcmGpio\:setValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void BcmGpio::setValue ({\b Value}  {\i value}){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::IGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIO \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/bcm2835/{\b bcm2835_gpio_impl.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BcmSpi Class Reference\par \pard\plain 
{\tc\tcl2 \v BcmSpi}
{\xe \v BcmSpi}
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
\par
{
{\f2 #include <bcm2835_spi_impl.h>}}\par
Inheritance diagram for BcmSpi:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_bcm_spi__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for BcmSpi:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_bcm_spi__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b BcmSpi} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b write} (char *pData, size_t len) final\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b read} (char *pData, size_t len) final\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b writeRead} (char *pData, size_t len) final\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b writeRead} (char data) final\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v BcmSpi\:BcmSpi}
{\xe \v BcmSpi\:BcmSpi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
BcmSpi::BcmSpi (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v read\:BcmSpi}
{\xe \v BcmSpi\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void BcmSpi::read (char *  {\i pData}, size_t  {\i len}){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::ISpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v write\:BcmSpi}
{\xe \v BcmSpi\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void BcmSpi::write (char *  {\i pData}, size_t  {\i len}){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::ISpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v writeRead\:BcmSpi}
{\xe \v BcmSpi\:writeRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void BcmSpi::writeRead (char *  {\i pData}, size_t  {\i len}){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::ISpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIW \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v writeRead\:BcmSpi}
{\xe \v BcmSpi\:writeRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char BcmSpi::writeRead (char  {\i data}){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::ISpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIY \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/bcm2835/{\b bcm2835_spi_impl.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Camera Class Reference\par \pard\plain 
{\tc\tcl2 \v Camera}
{\xe \v Camera}
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
\par
{
{\f2 #include <Camera.h>}}\par
Inheritance diagram for Camera:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_camera__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for Camera:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_camera__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Camera} (int id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
cv::VideoCapture {\b getCamera} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Camera\:Camera}
{\xe \v Camera\:Camera}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Camera::Camera (int  {\i id}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getCamera\:Camera}
{\xe \v Camera\:getCamera}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
cv::VideoCapture Camera::getCamera (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b Camera.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CircularQueue Class Reference\par \pard\plain 
{\tc\tcl2 \v CircularQueue}
{\xe \v CircularQueue}
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
\par
{
{\f2 #include <CircularQueue.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b CircularQueue} (int size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~CircularQueue} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b enqueue} (int value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b dequeue} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b display} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b countQueue} (int value)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v CircularQueue\:CircularQueue}
{\xe \v CircularQueue\:CircularQueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
CircularQueue::CircularQueue (int  {\i size}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~CircularQueue\:CircularQueue}
{\xe \v CircularQueue\:~CircularQueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
CircularQueue::~CircularQueue (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v countQueue\:CircularQueue}
{\xe \v CircularQueue\:countQueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CircularQueue::countQueue (int  {\i value}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v dequeue\:CircularQueue}
{\xe \v CircularQueue\:dequeue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CircularQueue::dequeue (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v display\:CircularQueue}
{\xe \v CircularQueue\:display}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CircularQueue::display (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v enqueue\:CircularQueue}
{\xe \v CircularQueue\:enqueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CircularQueue::enqueue (int  {\i value}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/utils/{\b CircularQueue.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ClapDetection Class Reference\par \pard\plain 
{\tc\tcl2 \v ClapDetection}
{\xe \v ClapDetection}
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
\par
{
{\f2 #include <ClapDetection.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ClapDetection} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Initialize} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b openStream} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b closeStream} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b record} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b detectClap} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b reverse_bits} (int num, int bit_length)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fft} (std::vector< std::complex< double > > &a, bool inverse)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::vector< double > {\b convolve} (const std::vector< double > &a, const std::vector< double > &b)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::vector< double > {\b load_audio_file} (const std::string &filename)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static double {\b percentage_above_threshold} (const std::vector< double > &a, double threshold)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static double {\b find_per} (const std::string &within_file, const std::string &find_file)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static double {\b find_per_data} (const std::vector< double > &within_data, const std::vector< double > &y_find)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b result} (double per, double check)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b paCallback} (const void *inputBuffer, void *outputBuffer, unsigned long framesPerBuffer, const PaStreamCallbackTimeInfo *timeInfo, PaStreamCallbackFlags statusFlags, void *userData)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ClapDetection\:ClapDetection}
{\xe \v ClapDetection\:ClapDetection}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ClapDetection::ClapDetection (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v closeStream\:ClapDetection}
{\xe \v ClapDetection\:closeStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ClapDetection::closeStream (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a441f8b04980a0e2e7b20e83a6748ec8a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v convolve\:ClapDetection}
{\xe \v ClapDetection\:convolve}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static std::vector< double > ClapDetection::convolve (const std::vector< double > &  {\i a}, const std::vector< double > &  {\i b}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a71206899c9fbc9e7687d3305beeb15cc_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a71206899c9fbc9e7687d3305beeb15cc_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v detectClap\:ClapDetection}
{\xe \v ClapDetection\:detectClap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ClapDetection::detectClap (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a94762cfcae59ebbdea790fef53c9bc15_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v fft\:ClapDetection}
{\xe \v ClapDetection\:fft}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static void ClapDetection::fft (std::vector< std::complex< double > > &  {\i a}, bool  {\i inverse}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a457a526ff1d5c5d9cef68b62f4f6a0aa_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a457a526ff1d5c5d9cef68b62f4f6a0aa_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v find_per\:ClapDetection}
{\xe \v ClapDetection\:find_per}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static double ClapDetection::find_per (const std::string &  {\i within_file}, const std::string &  {\i find_file}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a909b33bb375c84ab4b348eb9da0a1cf4_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v find_per_data\:ClapDetection}
{\xe \v ClapDetection\:find_per_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static double ClapDetection::find_per_data (const std::vector< double > &  {\i within_data}, const std::vector< double > &  {\i y_find}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_aa9f00a28382879aaba458015d3e6acce_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_aa9f00a28382879aaba458015d3e6acce_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Initialize\:ClapDetection}
{\xe \v ClapDetection\:Initialize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ClapDetection::Initialize ()}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes our Clap Detector.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i } \cell }{\cell }
{\row }
}
return \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a93c7a6332be7f0b126135a9319daa745_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v load_audio_file\:ClapDetection}
{\xe \v ClapDetection\:load_audio_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static std::vector< double > ClapDetection::load_audio_file (const std::string &  {\i filename}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a955c7cf2960391a7af5309db688356e6_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v openStream\:ClapDetection}
{\xe \v ClapDetection\:openStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ClapDetection::openStream (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a905ea0c10c5b8ce07c8cdda94e37535a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v paCallback\:ClapDetection}
{\xe \v ClapDetection\:paCallback}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static int ClapDetection::paCallback (const void *  {\i inputBuffer}, void *  {\i outputBuffer}, unsigned long  {\i framesPerBuffer}, const PaStreamCallbackTimeInfo *  {\i timeInfo}, PaStreamCallbackFlags  {\i statusFlags}, void *  {\i userData}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a2c26276e3b68b25282e33d809788c6c8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v percentage_above_threshold\:ClapDetection}
{\xe \v ClapDetection\:percentage_above_threshold}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static double ClapDetection::percentage_above_threshold (const std::vector< double > &  {\i a}, double  {\i threshold}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a4a303e4a95761d63c8348838c6c580bf_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v record\:ClapDetection}
{\xe \v ClapDetection\:record}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ClapDetection::record (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v result\:ClapDetection}
{\xe \v ClapDetection\:result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static bool ClapDetection::result (double  {\i per}, double  {\i check}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a3d70aed7d269a7aa9fdd099a7b2334da_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v reverse_bits\:ClapDetection}
{\xe \v ClapDetection\:reverse_bits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static int ClapDetection::reverse_bits (int  {\i num}, int  {\i bit_length}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_ae3b186d18ddec06fc0d88821fe78dccc_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_ae3b186d18ddec06fc0d88821fe78dccc_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start\:ClapDetection}
{\xe \v ClapDetection\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ClapDetection::start (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a800366c00fe876aa905a59a072436957_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v stop\:ClapDetection}
{\xe \v ClapDetection\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ClapDetection::stop () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_detection_a14d7a4329f238978b15abc40f6066340_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/clap-detection/{\b ClapDetection.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/clap-detection/{\b ClapDetection.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ClapThread Class Reference\par \pard\plain 
{\tc\tcl2 \v ClapThread}
{\xe \v ClapThread}
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
\par
{
{\f2 #include <ClapThread.h>}}\par
Inheritance diagram for ClapThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_thread__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for ClapThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_clap_thread__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ClapThread} ({\b ClapDetection} *clapDetection)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b join} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ClapThread\:ClapThread}
{\xe \v ClapThread\:ClapThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ClapThread::ClapThread ({\b ClapDetection} *  {\i clapDetection}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v join\:ClapThread}
{\xe \v ClapThread\:join}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::join (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Waits for the thread to terminate. \par
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a8ff0fda6b913cc53764caef0e1200f3f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start\:ClapThread}
{\xe \v ClapThread\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::start (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts the thread. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/clap-detection/{\b ClapThread.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/clap-detection/{\b ClapThread.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Controller Class Reference\par \pard\plain 
{\tc\tcl2 \v Controller}
{\xe \v Controller}
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
\par
{
{\f2 #include <Controller.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Controller} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Controller\:Controller}
{\xe \v Controller\:Controller}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Controller::Controller (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/controller/{\b Controller.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ControllerThread Class Reference\par \pard\plain 
{\tc\tcl2 \v ControllerThread}
{\xe \v ControllerThread}
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Controller} Thread to manage all child threads. }}\par
{
{\f2 #include <ControllerThread.h>}}\par
Inheritance diagram for ControllerThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_controller_thread__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for ControllerThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_controller_thread__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ControllerThread} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setArgs} (int ac, std::vector< std::string > av)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b join} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Controller} Thread to manage all child threads. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale & Savan Agrawal \par
}}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ControllerThread\:ControllerThread}
{\xe \v ControllerThread\:ControllerThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ControllerThread::ControllerThread (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Contructor for our controller thread. All child threads are initiallized here. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v join\:ControllerThread}
{\xe \v ControllerThread\:join}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::join (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Waits for the thread to terminate. \par
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a8ff0fda6b913cc53764caef0e1200f3f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v setArgs\:ControllerThread}
{\xe \v ControllerThread\:setArgs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ControllerThread::setArgs (int  {\i ac}, std::vector< std::string >  {\i av}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_controller_thread_a53ad3a44cd24e685c06262380ea6c5b8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start\:ControllerThread}
{\xe \v ControllerThread\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::start (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts the thread. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/{\b ControllerThread.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/{\b ControllerThread.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CppThread Class Reference\par \pard\plain 
{\tc\tcl2 \v CppThread}
{\xe \v CppThread}
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
\par
{
{\f2 #include <CppThread.h>}}\par
Inheritance diagram for CppThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b join} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b run} ()=0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007\par
(C) 2020-2022, Bernd Porr {\f2 mail@bernporr.me.uk} A thin wrapper around the C++ thread model to avoid a static callback. Instead just inherit this class and overload {\b run()} which then runs in this thread. This is header-only so that it can be performed inline for max performance. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v join\:CppThread}
{\xe \v CppThread\:join}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::join (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Waits for the thread to terminate. \par
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a8ff0fda6b913cc53764caef0e1200f3f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v run\:CppThread}
{\xe \v CppThread\:run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void CppThread::run (){\f2 [protected]}, {\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This method does all the work of this thread. Overload this abstract function with a real one doing the actual work of this thread. \par
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a792b79e72250710147c452648def4a78_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start\:CppThread}
{\xe \v CppThread\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::start (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts the thread. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/{\b CppThread.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CppTimerCallback Class Reference\par \pard\plain 
{\tc\tcl2 \v CppTimerCallback}
{\xe \v CppTimerCallback}
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
\par
{
{\f2 #include <CppTimerCallback.h>}}\par
Inheritance diagram for CppTimerCallback:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_timer_callback__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for CppTimerCallback:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_timer_callback__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Runnable}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b registerEventRunnable} ({\b Runnable} &h)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b unregisterEventRunnable} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b timerEvent} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v registerEventRunnable\:CppTimerCallback}
{\xe \v CppTimerCallback\:registerEventRunnable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppTimerCallback::registerEventRunnable ({\b Runnable} &  {\i h}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v timerEvent\:CppTimerCallback}
{\xe \v CppTimerCallback\:timerEvent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppTimerCallback::timerEvent (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_timer_callback_af6b39f5eb8e98bfc1b301ac3f25276e9_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v unregisterEventRunnable\:CppTimerCallback}
{\xe \v CppTimerCallback\:unregisterEventRunnable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppTimerCallback::unregisterEventRunnable (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/utils/{\b CppTimerCallback.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DoorsThread Class Reference\par \pard\plain 
{\tc\tcl2 \v DoorsThread}
{\xe \v DoorsThread}
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Doors Thread to manage doors detection functionality. }}\par
{
{\f2 #include <DoorsThread.h>}}\par
Inheritance diagram for DoorsThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_doors_thread__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for DoorsThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_doors_thread__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DoorsThread} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b join} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Doors Thread to manage doors detection functionality. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v DoorsThread\:DoorsThread}
{\xe \v DoorsThread\:DoorsThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
DoorsThread::DoorsThread (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Contructor for our doors thread.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i } \cell }{\cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v join\:DoorsThread}
{\xe \v DoorsThread\:join}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::join (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Waits for the thread to terminate. \par
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a8ff0fda6b913cc53764caef0e1200f3f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start\:DoorsThread}
{\xe \v DoorsThread\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::start (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts the thread. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v stop\:DoorsThread}
{\xe \v DoorsThread\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void DoorsThread::stop (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Stop our thread's inner functionality. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/doors/{\b DoorsThread.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/doors/{\b DoorsThread.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
EventHandler Class Reference\par \pard\plain 
{\tc\tcl2 \v EventHandler}
{\xe \v EventHandler}
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
\par
{
{\f2 #include <EventHandler.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b EventHandler} (const {\b EventHandler} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b EventHandler} & {\b operator=} (const {\b EventHandler} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addListener} ({\b Event} event, std::function< void()> callback)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename... Args> void {\b addListener} ({\b Event} event, std::function< void(Args...)> callback)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b emit} ({\b Event} event)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename... Args> void {\b emit} ({\b Event} event, Args... args)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isEventRegistered} ({\b Event} event) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b EventHandler} (const {\b EventHandler} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b EventHandler} & {\b operator=} (const {\b EventHandler} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addListener} ({\b Event} event, std::function< void()> callback)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename... Args> void {\b addListener} ({\b Event} event, std::function< void(Args...)> callback)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b emit} ({\b Event} event)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename... Args> void {\b emit} ({\b Event} event, Args... args)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isEventRegistered} ({\b Event} event) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b EventHandler} & {\b getInstance} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b EventHandler} & {\b getInstance} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v EventHandler\:EventHandler}
{\xe \v EventHandler\:EventHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
EventHandler::EventHandler (const {\b EventHandler} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v EventHandler\:EventHandler}
{\xe \v EventHandler\:EventHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
EventHandler::EventHandler (const {\b EventHandler} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v addListener\:EventHandler}
{\xe \v EventHandler\:addListener}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void EventHandler::addListener ({\b Event}  {\i event}, std::function< void()>  {\i callback})}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_event_handler_a4d3a9170bf42c684997f46ac0e3fafcd_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v addListener\:EventHandler}
{\xe \v EventHandler\:addListener}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void EventHandler::addListener ({\b Event}  {\i event}, std::function< void()>  {\i callback})}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v addListener\:EventHandler}
{\xe \v EventHandler\:addListener}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename... Args> void EventHandler::addListener ({\b Event}  {\i event}, std::function< void(Args...)>  {\i callback})}}
\par
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v addListener\:EventHandler}
{\xe \v EventHandler\:addListener}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename... Args> void EventHandler::addListener ({\b Event}  {\i event}, std::function< void(Args...)>  {\i callback})}}
\par
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v emit\:EventHandler}
{\xe \v EventHandler\:emit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void EventHandler::emit ({\b Event}  {\i event})}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_event_handler_a78ac6d7c899898fbb2c7b24117b272dd_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v emit\:EventHandler}
{\xe \v EventHandler\:emit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void EventHandler::emit ({\b Event}  {\i event})}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v emit\:EventHandler}
{\xe \v EventHandler\:emit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename... Args> void EventHandler::emit ({\b Event}  {\i event}, Args...  {\i args})}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v emit\:EventHandler}
{\xe \v EventHandler\:emit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename... Args> void EventHandler::emit ({\b Event}  {\i event}, Args...  {\i args})}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getInstance\:EventHandler}
{\xe \v EventHandler\:getInstance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b EventHandler} & EventHandler::getInstance (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_event_handler_a54e992984633e36c76f7b62edfbf7604_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v getInstance\:EventHandler}
{\xe \v EventHandler\:getInstance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static {\b EventHandler} & EventHandler::getInstance (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v isEventRegistered\:EventHandler}
{\xe \v EventHandler\:isEventRegistered}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool EventHandler::isEventRegistered ({\b Event}  {\i event}) const}}
\par
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v isEventRegistered\:EventHandler}
{\xe \v EventHandler\:isEventRegistered}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool EventHandler::isEventRegistered ({\b Event}  {\i event}) const}}
\par
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:EventHandler}
{\xe \v EventHandler\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b EventHandler} & EventHandler::operator= (const {\b EventHandler} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:EventHandler}
{\xe \v EventHandler\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b EventHandler} & EventHandler::operator= (const {\b EventHandler} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/utils/{\b EventHandler.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/utils/EventTest/{\b EventHandler.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/utils/{\b EventHandler.cpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/utils/EventTest/{\b EventHandler.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Events Class Reference\par \pard\plain 
{\tc\tcl2 \v Events}
{\xe \v Events}
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
\par
{
{\f2 #include <Events.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b EVENT_CODES} \{ {\b CLAP_DETECTED}
, {\b CLAP_DETECTED_THREAD}
, {\b DATASET_CREATOR_COMPLETE}
, {\b DATASET_CREATOR_ERROR}
, {\b DATASET_TRAINER_COMPLETE}
, {\b DATASET_TRAINER_ERROR}
, {\b INTRUDER_THREAD_KILL}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Events} (const {\b Events} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Events} & {\b operator=} (const {\b Events} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
eventpp::EventDispatcher< {\b EVENT_CODES}, void()> {\b getDispatcher} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b appendListener} ({\b EVENT_CODES} ev, std::function< void()> cb)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b dispatch} ({\b EVENT_CODES} ev)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b Events} & {\b getInstance} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Enumeration Documentation\par
\pard\plain 
{\xe \v EVENT_CODES\:Events}
{\xe \v Events\:EVENT_CODES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b Events::EVENT_CODES}}}
\par
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v CLAP_DETECTED\:Events}
{\xe \v Events\:CLAP_DETECTED}
{\qr CLAP_DETECTED{\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
\cell }{\cell }{\row }
{\xe \v CLAP_DETECTED_THREAD\:Events}
{\xe \v Events\:CLAP_DETECTED_THREAD}
{\qr CLAP_DETECTED_THREAD{\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
\cell }{\cell }{\row }
{\xe \v DATASET_CREATOR_COMPLETE\:Events}
{\xe \v Events\:DATASET_CREATOR_COMPLETE}
{\qr DATASET_CREATOR_COMPLETE{\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
\cell }{\cell }{\row }
{\xe \v DATASET_CREATOR_ERROR\:Events}
{\xe \v Events\:DATASET_CREATOR_ERROR}
{\qr DATASET_CREATOR_ERROR{\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
\cell }{\cell }{\row }
{\xe \v DATASET_TRAINER_COMPLETE\:Events}
{\xe \v Events\:DATASET_TRAINER_COMPLETE}
{\qr DATASET_TRAINER_COMPLETE{\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
\cell }{\cell }{\row }
{\xe \v DATASET_TRAINER_ERROR\:Events}
{\xe \v Events\:DATASET_TRAINER_ERROR}
{\qr DATASET_TRAINER_ERROR{\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
\cell }{\cell }{\row }
{\xe \v INTRUDER_THREAD_KILL\:Events}
{\xe \v Events\:INTRUDER_THREAD_KILL}
{\qr INTRUDER_THREAD_KILL{\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
\cell }{\cell }{\row }
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Events\:Events}
{\xe \v Events\:Events}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Events::Events (const {\b Events} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v appendListener\:Events}
{\xe \v Events\:appendListener}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Events::appendListener ({\b EVENT_CODES}  {\i ev}, std::function< void()>  {\i cb}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v dispatch\:Events}
{\xe \v Events\:dispatch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Events::dispatch ({\b EVENT_CODES}  {\i ev}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getDispatcher\:Events}
{\xe \v Events\:getDispatcher}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
eventpp::EventDispatcher< {\b EVENT_CODES}, void()> Events::getDispatcher (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getInstance\:Events}
{\xe \v Events\:getInstance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static {\b Events} & Events::getInstance (){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:Events}
{\xe \v Events\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Events} & Events::operator= (const {\b Events} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/utils/{\b Events.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Globals Class Reference\par \pard\plain 
{\tc\tcl2 \v Globals}
{\xe \v Globals}
{\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
\par
{
{\f2 #include <Globals.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setMoodSvm} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
cv::Ptr< cv::ml::SVM > {\b getMoodSvm} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getGarageDoorPin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getMainDoorPin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getLedPin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getLedRedPin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getLedGreenPin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getLedBluePin} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getGarageDoorPin\:Globals}
{\xe \v Globals\:getGarageDoorPin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Globals::getGarageDoorPin (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getLedBluePin\:Globals}
{\xe \v Globals\:getLedBluePin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Globals::getLedBluePin (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getLedGreenPin\:Globals}
{\xe \v Globals\:getLedGreenPin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Globals::getLedGreenPin (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getLedPin\:Globals}
{\xe \v Globals\:getLedPin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Globals::getLedPin (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getLedRedPin\:Globals}
{\xe \v Globals\:getLedRedPin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Globals::getLedRedPin (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getMainDoorPin\:Globals}
{\xe \v Globals\:getMainDoorPin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Globals::getMainDoorPin (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getMoodSvm\:Globals}
{\xe \v Globals\:getMoodSvm}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
cv::Ptr< cv::ml::SVM > Globals::getMoodSvm (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_globals_a6175ae15868ba84a14fd1cf1823d8dbd_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v setMoodSvm\:Globals}
{\xe \v Globals\:setMoodSvm}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Globals::setMoodSvm (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_globals_a7e9e2b31d0484acc038684bd8aceff1a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/utils/{\b Globals.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
spidevpp::Gpio Class Reference\par \pard\plain 
{\tc\tcl2 \v spidevpp::Gpio}
{\xe \v spidevpp::Gpio}
{\bkmkstart AAAAAAAAYE}
{\bkmkend AAAAAAAAYE}
\par
{
{\f2 #include <gpio.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Direction} \{ {\b INPUT}
, {\b OUTPUT}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Value} \{ {\b low} = 0
, {\b high} = 1
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Gpio} (unsigned int pin, {\b Direction} direction, {\b Value} initialValue={\b Value::low})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setValue} ({\b Value})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Value} {\b getValue} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Enumeration Documentation\par
\pard\plain 
{\xe \v Direction\:spidevpp::Gpio}
{\xe \v spidevpp::Gpio\:Direction}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b spidevpp::Gpio::Direction}{\f2 [strong]}}}
\par
{\bkmkstart AAAAAAAAYF}
{\bkmkend AAAAAAAAYF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v INPUT\:spidevpp::Gpio}
{\xe \v spidevpp::Gpio\:INPUT}
{\qr INPUT{\bkmkstart AAAAAAAAYG}
{\bkmkend AAAAAAAAYG}
\cell }{\cell }{\row }
{\xe \v OUTPUT\:spidevpp::Gpio}
{\xe \v spidevpp::Gpio\:OUTPUT}
{\qr OUTPUT{\bkmkstart AAAAAAAAYH}
{\bkmkend AAAAAAAAYH}
\cell }{\cell }{\row }
}
}
{\xe \v Value\:spidevpp::Gpio}
{\xe \v spidevpp::Gpio\:Value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b spidevpp::Gpio::Value}{\f2 [strong]}}}
\par
{\bkmkstart AAAAAAAAYI}
{\bkmkend AAAAAAAAYI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v low\:spidevpp::Gpio}
{\xe \v spidevpp::Gpio\:low}
{\qr low{\bkmkstart AAAAAAAAYJ}
{\bkmkend AAAAAAAAYJ}
\cell }{\cell }{\row }
{\xe \v high\:spidevpp::Gpio}
{\xe \v spidevpp::Gpio\:high}
{\qr high{\bkmkstart AAAAAAAAYK}
{\bkmkend AAAAAAAAYK}
\cell }{\cell }{\row }
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Gpio\:spidevpp::Gpio}
{\xe \v spidevpp::Gpio\:Gpio}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
spidevpp::Gpio::Gpio (unsigned int  {\i pin}, {\b Direction}  {\i direction}, {\b Value}  {\i initialValue} = {\f2 {\b Value::low}})}}
\par
{\bkmkstart AAAAAAAAYL}
{\bkmkend AAAAAAAAYL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classspidevpp_1_1_gpio_a6eef0d9a6619fba0e2af6d364f792ded_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getValue\:spidevpp::Gpio}
{\xe \v spidevpp::Gpio\:getValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Gpio::Value} spidevpp::Gpio::getValue ()}}
\par
{\bkmkstart AAAAAAAAYM}
{\bkmkend AAAAAAAAYM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classspidevpp_1_1_gpio_adf895aa115a073e285f3ff79abe629c5_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v setValue\:spidevpp::Gpio}
{\xe \v spidevpp::Gpio\:setValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void spidevpp::Gpio::setValue ({\b Value}  {\i value})}}
\par
{\bkmkstart AAAAAAAAYN}
{\bkmkend AAAAAAAAYN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classspidevpp_1_1_gpio_aeb4dea7570af80386b138a33f656f024_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/dependencies/spidevpp/libs/spidevpp/{\b gpio.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/dependencies/spidevpp/libs/spidevpp/{\b gpio.cc}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GPIODriver Class Reference\par \pard\plain 
{\tc\tcl2 \v GPIODriver}
{\xe \v GPIODriver}
{\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
GPIO Driver Class. }}\par
{
{\f2 #include <GPIODriver.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GPIODriver} (void)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b SetGPIOState} (int gpioPinNumber, int value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GPIORead} (int gpioPinNumber)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b SetUpPin} (int gpioPinNumber)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
GPIO Driver Class. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chhinmay Nagrale\par
}}This is class is responsilbe for handling GPIO Pins. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v GPIODriver\:GPIODriver}
{\xe \v GPIODriver\:GPIODriver}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GPIODriver::GPIODriver (void ){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v GPIORead\:GPIODriver}
{\xe \v GPIODriver\:GPIORead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int GPIODriver::GPIORead (int  {\i gpioPinNumber})}}
\par
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the current state of the GPIO pin. LOW = 0 HIGH = 1\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i gpioPinNumber} \cell }{GPIO Pin number state to read.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
State of the GPIO Pin \par
}}}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_g_p_i_o_driver_a68be60ab1fb0e9c29f60818654766a32_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v SetGPIOState\:GPIODriver}
{\xe \v GPIODriver\:SetGPIOState}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int GPIODriver::SetGPIOState (int  {\i gpioPinNumber}, int  {\i value})}}
\par
{\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set state of the GPIO pin. LOW - value = 0 HIGH - value = 1\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i gpioPinNumber} \cell }{GPIO Pin number state to read. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{State to set the pin to.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else negative error number \par
}}}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_g_p_i_o_driver_a32a483cec3179d1d13acb1dad37b21ad_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v SetUpPin\:GPIODriver}
{\xe \v GPIODriver\:SetUpPin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int GPIODriver::SetUpPin (int  {\i gpioPinNumber})}}
\par
{\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize GPIO Pins for output use. Export Pin Set Direction to output Set GPIO state value to high\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i gpioPinNumber} \cell }{GPIO pin number to set up for output use.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success error \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_g_p_i_o_driver_a314ce5622d8049f62b662b62fd3debe7_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_g_p_i_o_driver_a314ce5622d8049f62b662b62fd3debe7_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b GPIODriver.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b GPIODriver.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
I2CDriver Class Reference\par \pard\plain 
{\tc\tcl2 \v I2CDriver}
{\xe \v I2CDriver}
{\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
I2C Driver class. }}\par
{
{\f2 #include <I2CDriver.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b I2C_Setup_File} (int addres)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b I2C_Close_File} (int fd)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b I2C_Return} {\b Plain_I2C_Write_Read} (int fd, uint16_t command, uint8_t *buffer, uint8_t readLength, uint16_t delay=10)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b I2C_Return} {\b Plain_I2C_Write_Read_CRC8} (int fd, uint16_t command, uint16_t *buffer, uint8_t readlen, uint16_t delay=10)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Delay} (unsigned int timeMs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b I2C_Read_Byte} (int fd)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b I2C_Read_8bitReg} (int fd, int command)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b I2C_Read_16bitReg} (int fd, int command)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b I2C_Write_Byte} (int fd, int data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b I2C_Write_8bitReg} (int fd, int command, int data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b I2C_Write_16bitReg} (int fd, int command, int data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b I2C_Write_Block} (int fd, int command, uint8_t length, uint8_t *buff)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b I2C_Read_Block} (int fd, int command, uint8_t *buff)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
I2C Driver class. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale\par
}}This is class is responsilbe for handling I2C communication. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Delay\:I2CDriver}
{\xe \v I2CDriver\:Delay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void I2CDriver::Delay (unsigned int  {\i timeMs})}}
\par
{\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Suspends the execution of the calling thread until at least the time specified has elapsed.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i timeMs} \cell }{Time to wait in miliseconds.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
none \par
}}}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_i2_c_driver_a01453a7adeb358f269faabb33953eee0_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v I2C_Close_File\:I2CDriver}
{\xe \v I2CDriver\:I2C_Close_File}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int I2CDriver::I2C_Close_File (int  {\i fd})}}
\par
{\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Close file descriptor\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fd} \cell }{File descriptor of the device.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
result of file descriptor close operation. \par
}}}}
{\xe \v I2C_Read_16bitReg\:I2CDriver}
{\xe \v I2CDriver\:I2C_Read_16bitReg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int I2CDriver::I2C_Read_16bitReg (int  {\i fd}, int  {\i command})}}
\par
{\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use SMBUS to Write a byte word and read 2 bytes.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fd} \cell }{File descriptor of the device. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i command} \cell }{Command / Register to address.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A 16-bit unsigned word received from the device else negative errno \par
}}}}
{\xe \v I2C_Read_8bitReg\:I2CDriver}
{\xe \v I2CDriver\:I2C_Read_8bitReg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int I2CDriver::I2C_Read_8bitReg (int  {\i fd}, int  {\i command})}}
\par
{\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use SMBUS to Write a byte word and read one byte from.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fd} \cell }{File descriptor of the device. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i command} \cell }{Command / Register to address.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A data byte received from the device elese negative errno. \par
}}}}
{\xe \v I2C_Read_Block\:I2CDriver}
{\xe \v I2CDriver\:I2C_Read_Block}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int I2CDriver::I2C_Read_Block (int  {\i fd}, int  {\i command}, uint8_t *  {\i buffer})}}
\par
{\bkmkstart AAAAAAAAML}
{\bkmkend AAAAAAAAML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use SMBUS to Read n-bytes using a command / addressing specific register.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fd} \cell }{File descriptor of the device. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i command} \cell }{Command / Register to address. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i buffer} \cell }{Buffer to read the data to.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The number of read bytes \par
}}}}
{\xe \v I2C_Read_Byte\:I2CDriver}
{\xe \v I2CDriver\:I2C_Read_Byte}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int I2CDriver::I2C_Read_Byte (int  {\i fd})}}
\par
{\bkmkstart AAAAAAAAMM}
{\bkmkend AAAAAAAAMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use SMBUS to read one byte.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fd} \cell }{File descriptor of the device.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A data byte received from the device elese negative errno. \par
}}}}
{\xe \v I2C_Setup_File\:I2CDriver}
{\xe \v I2CDriver\:I2C_Setup_File}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int I2CDriver::I2C_Setup_File (int  {\i addr})}}
\par
{\bkmkstart AAAAAAAAMN}
{\bkmkend AAAAAAAAMN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Open I2C File descriptor for target slave device.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i addr} \cell }{Address of the slave device.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
I2C File descriptor for specified address of the slave device. \par
}}}}
{\xe \v I2C_Write_16bitReg\:I2CDriver}
{\xe \v I2CDriver\:I2C_Write_16bitReg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int I2CDriver::I2C_Write_16bitReg (int  {\i fd}, int  {\i command}, int  {\i data})}}
\par
{\bkmkstart AAAAAAAAMO}
{\bkmkend AAAAAAAAMO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use SMBUS to Write a 2-byte word using a command / addressing specific register.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fd} \cell }{File descriptor of the device. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i command} \cell }{Command / Register to address. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i data} \cell }{Data to be written.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else negative errno \par
}}}}
{\xe \v I2C_Write_8bitReg\:I2CDriver}
{\xe \v I2CDriver\:I2C_Write_8bitReg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int I2CDriver::I2C_Write_8bitReg (int  {\i fd}, int  {\i command}, int  {\i data})}}
\par
{\bkmkstart AAAAAAAAMP}
{\bkmkend AAAAAAAAMP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use SMBUS to Write a byte word uing a command / addressing specific register.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fd} \cell }{File descriptor of the device. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i command} \cell }{Command / Register to address. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i data} \cell }{Data to be written.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else negative errno \par
}}}}
{\xe \v I2C_Write_Block\:I2CDriver}
{\xe \v I2CDriver\:I2C_Write_Block}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int I2CDriver::I2C_Write_Block (int  {\i fd}, int  {\i command}, uint8_t  {\i length}, uint8_t *  {\i buffer})}}
\par
{\bkmkstart AAAAAAAAMQ}
{\bkmkend AAAAAAAAMQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use SMBUS to Write n-bytes using a command / addressing specific register.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fd} \cell }{File descriptor of the device. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i command} \cell }{Command / Register to address. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i length} \cell }{Number of bytes to be written from the data buffer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i buffer} \cell }{Buffer containing data to be written.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else negative errno \par
}}}}
{\xe \v I2C_Write_Byte\:I2CDriver}
{\xe \v I2CDriver\:I2C_Write_Byte}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int I2CDriver::I2C_Write_Byte (int  {\i fd}, int  {\i data})}}
\par
{\bkmkstart AAAAAAAAMR}
{\bkmkend AAAAAAAAMR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use SMBUS to Write a byte word.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fd} \cell }{File descriptor of the device. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i data} \cell }{Data to be written.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else negative errno \par
}}}}
{\xe \v Plain_I2C_Write_Read\:I2CDriver}
{\xe \v I2CDriver\:Plain_I2C_Write_Read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b I2C_Return} I2CDriver::Plain_I2C_Write_Read (int  {\i fd}, uint16_t  {\i command}, uint8_t *  {\i buffer}, uint8_t  {\i readLength}, uint16_t  {\i delay} = {\f2 10})}}
\par
{\bkmkstart AAAAAAAAMS}
{\bkmkend AAAAAAAAMS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use Plain I2C to read n-bytes a using a 2byte command. Pass 0 for readLength to just write.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fd} \cell }{File descriptor of the device. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i command} \cell }{Command / Register to address. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i buffer} \cell }{Buffer to read the data to. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i readLength} \cell }{Number of bytes to recieve \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i delay} \cell }{Delay between read and write (10ms by default)\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else error number \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_i2_c_driver_a1e025ccfccece30b7d42acd1bf7e8e41_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_i2_c_driver_a1e025ccfccece30b7d42acd1bf7e8e41_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Plain_I2C_Write_Read_CRC8\:I2CDriver}
{\xe \v I2CDriver\:Plain_I2C_Write_Read_CRC8}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b I2C_Return} I2CDriver::Plain_I2C_Write_Read_CRC8 (int  {\i fd}, uint16_t  {\i command}, uint16_t *  {\i buffer}, uint8_t  {\i readlen}, uint16_t  {\i delay} = {\f2 10})}}
\par
{\bkmkstart AAAAAAAAMT}
{\bkmkend AAAAAAAAMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use Plain I2C to read n-bytes using a uint16_t command and perform a CRC8 on reply uint16_ts . Pass 0 for readLength to just write.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fd} \cell }{File descriptor of the device. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i command} \cell }{Command / Register to address. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i buffer} \cell }{Buffer to read the data to. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i readlen} \cell }{number of uint16_t to read \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i delay} \cell }{Delay between read and write\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else error number\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Todo:\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid : Appopriate command bytes \par
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_i2_c_driver_a732c5b799a0aecde0d908ee981872572_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b I2CDriver.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b I2CDriver.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
I2CSensor Class Reference\par \pard\plain 
{\tc\tcl2 \v I2CSensor}
{\xe \v I2CSensor}
{\bkmkstart AAAAAAAAMU}
{\bkmkend AAAAAAAAMU}
\par
{
{\f2 #include <I2CSensor.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b Initialize} ({\b I2CDriver} &i2c)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b Reset} ()=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b Close_Device} ()=0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generic Sensor Class which implements function for peripherial. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Close_Device\:I2CSensor}
{\xe \v I2CSensor\:Close_Device}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual int I2CSensor::Close_Device (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAMV}
{\bkmkend AAAAAAAAMV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read Data from the sensor and Reset Sensor Close File Descriptor \par
}}
{\xe \v Initialize\:I2CSensor}
{\xe \v I2CSensor\:Initialize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual int I2CSensor::Initialize ({\b I2CDriver} &  {\i i2c}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAMW}
{\bkmkend AAAAAAAAMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize sensor Assign I2C Driver Open file descriptor Initial write to sensor to set it up using appropriate driver \par
}}
{\xe \v Reset\:I2CSensor}
{\xe \v I2CSensor\:Reset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual int I2CSensor::Reset (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAMX}
{\bkmkend AAAAAAAAMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Resets the sensor \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b I2CSensor.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
mfrc522::IGpio Struct Reference\par \pard\plain 
{\tc\tcl2 \v mfrc522::IGpio}
{\xe \v mfrc522::IGpio}
{\bkmkstart AAAAAAAARI}
{\bkmkend AAAAAAAARI}
\par
{
{\f2 #include <igpio.h>}}\par
Inheritance diagram for mfrc522::IGpio:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structmfrc522_1_1_i_gpio__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Value} \{ {\b low} = 0
, {\b high} = 1
, {\b l} = 0
, {\b h} = 1
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Value} \{ {\b low} = 0
, {\b high} = 1
, {\b l} = 0
, {\b h} = 1
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setValue} ({\b Value})=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b Value} {\b getValue} ()=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setValue} ({\b Value})=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b Value} {\b getValue} ()=0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Enumeration Documentation\par
\pard\plain 
{\xe \v Value\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:Value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b mfrc522::IGpio::Value}{\f2 [strong]}}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v low\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:low}
{\qr low{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
\cell }{\cell }{\row }
{\xe \v high\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:high}
{\qr high{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
\cell }{\cell }{\row }
{\xe \v l\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:l}
{\qr l{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
\cell }{\cell }{\row }
{\xe \v h\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:h}
{\qr h{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
\cell }{\cell }{\row }
}
}
{\xe \v Value\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:Value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b mfrc522::IGpio::Value}{\f2 [strong]}}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v low\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:low}
{\qr low{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
\cell }{\cell }{\row }
{\xe \v high\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:high}
{\qr high{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
\cell }{\cell }{\row }
{\xe \v l\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:l}
{\qr l{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
\cell }{\cell }{\row }
{\xe \v h\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:h}
{\qr h{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
\cell }{\cell }{\row }
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getValue\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:getValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual {\b Value} mfrc522::IGpio::getValue (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIL \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b SysGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQY \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v getValue\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:getValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual {\b Value} mfrc522::IGpio::getValue (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIL \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b SysGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQY \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v setValue\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:setValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void mfrc522::IGpio::setValue ({\b Value} ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIN \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b SysGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQZ \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structmfrc522_1_1_i_gpio_a1d5cffeab7b6f7ca38093d98866d1188_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v setValue\:mfrc522::IGpio}
{\xe \v mfrc522::IGpio\:setValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void mfrc522::IGpio::setValue ({\b Value} ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIN \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b SysGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQZ \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/dependencies/mfrc522/{\b igpio.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/bcm2835/{\b igpio.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntruderDatasetCreator Class Reference\par \pard\plain 
{\tc\tcl2 \v IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator}
{\bkmkstart AAAAAAAAMY}
{\bkmkend AAAAAAAAMY}
\par
{
{\f2 #include <DatasetCreator.h>}}\par
Inheritance diagram for IntruderDatasetCreator:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_creator__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for IntruderDatasetCreator:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_creator__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IntruderDatasetCreator} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Initialize} (cv::VideoCapture camera)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b trim} (const std::string &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b count_name} (const std::string &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b replace_spaces_with_underscores} (const std::string &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b is_valid_name} (const std::string &name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b findStringInFile} (const std::string &fileName, const std::string &searchString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getLastIntegerInFile} (const std::string &fileName)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b appendLineToFile} (const std::string &fileName, const std::string &line)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b checkCameraOpen} (cv::VideoCapture camera)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v IntruderDatasetCreator\:IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator\:IntruderDatasetCreator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
IntruderDatasetCreator::IntruderDatasetCreator (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAMZ}
{\bkmkend AAAAAAAAMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v appendLineToFile\:IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator\:appendLineToFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderDatasetCreator::appendLineToFile (const std::string &  {\i fileName}, const std::string &  {\i line}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANA}
{\bkmkend AAAAAAAANA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_creator_a699ae5e742ed3212b3172b4369f6f0e9_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v checkCameraOpen\:IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator\:checkCameraOpen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int IntruderDatasetCreator::checkCameraOpen (cv::VideoCapture  {\i camera})}}
\par
{\bkmkstart AAAAAAAANB}
{\bkmkend AAAAAAAANB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v count_name\:IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator\:count_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int IntruderDatasetCreator::count_name (const std::string &  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANC}
{\bkmkend AAAAAAAANC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v findStringInFile\:IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator\:findStringInFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool IntruderDatasetCreator::findStringInFile (const std::string &  {\i fileName}, const std::string &  {\i searchString}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAND}
{\bkmkend AAAAAAAAND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_creator_a73e5387e5dfa8223ea253ac17352ea07_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v getLastIntegerInFile\:IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator\:getLastIntegerInFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int IntruderDatasetCreator::getLastIntegerInFile (const std::string &  {\i fileName}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANE}
{\bkmkend AAAAAAAANE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_creator_a7eb468d36cfbef516594a453b516de35_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Initialize\:IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator\:Initialize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderDatasetCreator::Initialize (cv::VideoCapture  {\i camera})}}
\par
{\bkmkstart AAAAAAAANF}
{\bkmkend AAAAAAAANF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes our Dataset Creator.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i camera} \cell }{{\b Camera} object.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_creator_a41d4ed8f8ab42b57db50dd9560ce2585_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v is_valid_name\:IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator\:is_valid_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool IntruderDatasetCreator::is_valid_name (const std::string &  {\i name}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANG}
{\bkmkend AAAAAAAANG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_creator_ad4ff1abe5a7d08e7f119d76bc3d10162_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v replace_spaces_with_underscores\:IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator\:replace_spaces_with_underscores}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string IntruderDatasetCreator::replace_spaces_with_underscores (const std::string &  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANH}
{\bkmkend AAAAAAAANH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_creator_a96b37cbd8c72a17879fd0fbc849589fb_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v stop\:IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderDatasetCreator::stop (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANI}
{\bkmkend AAAAAAAANI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_creator_a30367789143221e7d4144c953700b900_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_creator_a30367789143221e7d4144c953700b900_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v trim\:IntruderDatasetCreator}
{\xe \v IntruderDatasetCreator\:trim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string IntruderDatasetCreator::trim (const std::string &  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANJ}
{\bkmkend AAAAAAAANJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_creator_ac5acff14ff6ccb3f26c0af29c53bb611_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/intruder-detection/{\b DatasetCreator.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/intruder-detection/{\b DatasetCreator.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntruderDatasetTrainer Class Reference\par \pard\plain 
{\tc\tcl2 \v IntruderDatasetTrainer}
{\xe \v IntruderDatasetTrainer}
{\bkmkstart AAAAAAAANK}
{\bkmkend AAAAAAAANK}
\par
{
{\f2 #include <DatasetTrainer.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IntruderDatasetTrainer} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Initialize} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b extract_username} (std::string &input)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::map< std::string, int > {\b readFileToMap} (const std::string &fileName)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b generateModel} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v IntruderDatasetTrainer\:IntruderDatasetTrainer}
{\xe \v IntruderDatasetTrainer\:IntruderDatasetTrainer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
IntruderDatasetTrainer::IntruderDatasetTrainer (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANL}
{\bkmkend AAAAAAAANL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v extract_username\:IntruderDatasetTrainer}
{\xe \v IntruderDatasetTrainer\:extract_username}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string IntruderDatasetTrainer::extract_username (std::string &  {\i input}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANM}
{\bkmkend AAAAAAAANM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_trainer_a0a9936a9e4fc9250c4ad580b51051f79_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v generateModel\:IntruderDatasetTrainer}
{\xe \v IntruderDatasetTrainer\:generateModel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderDatasetTrainer::generateModel (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANN}
{\bkmkend AAAAAAAANN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_trainer_a6d2299bbf12e0484dc930a7e53634c4a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Initialize\:IntruderDatasetTrainer}
{\xe \v IntruderDatasetTrainer\:Initialize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderDatasetTrainer::Initialize ()}}
\par
{\bkmkstart AAAAAAAANO}
{\bkmkend AAAAAAAANO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes our Dataset Trainer.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i } \cell }{\cell }
{\row }
}
return \par
}}
{\xe \v readFileToMap\:IntruderDatasetTrainer}
{\xe \v IntruderDatasetTrainer\:readFileToMap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::map< std::string, int > IntruderDatasetTrainer::readFileToMap (const std::string &  {\i fileName}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANP}
{\bkmkend AAAAAAAANP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_dataset_trainer_aee1a34251ed611fb6c7499b4e034156b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/intruder-detection/{\b DatasetTrainer.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/intruder-detection/{\b DatasetTrainer.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntruderDetection Class Reference\par \pard\plain 
{\tc\tcl2 \v IntruderDetection}
{\xe \v IntruderDetection}
{\bkmkstart AAAAAAAANQ}
{\bkmkend AAAAAAAANQ}
\par
{
{\f2 #include <IntruderDetection.h>}}\par
Inheritance diagram for IntruderDetection:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_detection__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for IntruderDetection:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_detection__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IntruderDetection} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Initialize} (cv::VideoCapture camera)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::map< int, std::string > {\b readFileToMap} (const std::string &fileName)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v IntruderDetection\:IntruderDetection}
{\xe \v IntruderDetection\:IntruderDetection}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
IntruderDetection::IntruderDetection (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANR}
{\bkmkend AAAAAAAANR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Initialize\:IntruderDetection}
{\xe \v IntruderDetection\:Initialize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderDetection::Initialize (cv::VideoCapture  {\i camera})}}
\par
{\bkmkstart AAAAAAAANS}
{\bkmkend AAAAAAAANS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes our Intruder Detection.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i } \cell }{\cell }
{\row }
}
return \par
}}
{\xe \v readFileToMap\:IntruderDetection}
{\xe \v IntruderDetection\:readFileToMap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::map< int, std::string > IntruderDetection::readFileToMap (const std::string &  {\i fileName}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANT}
{\bkmkend AAAAAAAANT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v stop\:IntruderDetection}
{\xe \v IntruderDetection\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderDetection::stop (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANU}
{\bkmkend AAAAAAAANU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_detection_a7ca7019eb7f23361b0a8ac3d8cdcc529_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_detection_a7ca7019eb7f23361b0a8ac3d8cdcc529_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/intruder-detection/{\b IntruderDetection.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/intruder-detection/{\b IntruderDetection.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntruderMoodDetection Class Reference\par \pard\plain 
{\tc\tcl2 \v IntruderMoodDetection}
{\xe \v IntruderMoodDetection}
{\bkmkstart AAAAAAAANV}
{\bkmkend AAAAAAAANV}
\par
{
{\f2 #include <IntruderMoodDetection.h>}}\par
Inheritance diagram for IntruderMoodDetection:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_detection__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for IntruderMoodDetection:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_detection__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IntruderMoodDetection} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Initialize} (cv::VideoCapture camera)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b unlock} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::map< int, std::string > {\b readFileToMap} (const std::string &fileName)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b restart} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setCameraId} (int id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setContrasts} (int low, int high)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setShutter} (int shutter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b checkCameraOpen} (cv::VideoCapture camera)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
cv::Mat {\b takePicture} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b savePicture} (cv::VideoCapture *, std::string filename)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v IntruderMoodDetection\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:IntruderMoodDetection}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
IntruderMoodDetection::IntruderMoodDetection (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANW}
{\bkmkend AAAAAAAANW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v checkCameraOpen\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:checkCameraOpen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int IntruderMoodDetection::checkCameraOpen (cv::VideoCapture  {\i camera})}}
\par
{\bkmkstart AAAAAAAANX}
{\bkmkend AAAAAAAANX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Initialize\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:Initialize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodDetection::Initialize (cv::VideoCapture  {\i camera})}}
\par
{\bkmkstart AAAAAAAANY}
{\bkmkend AAAAAAAANY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes our Intruder & Mood Detection.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i } \cell }{\cell }
{\row }
}
return \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_detection_a00ea796d16ff36f9bd3145b6f6eeb0de_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v readFileToMap\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:readFileToMap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::map< int, std::string > IntruderMoodDetection::readFileToMap (const std::string &  {\i fileName}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANZ}
{\bkmkend AAAAAAAANZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_detection_ad4ff8dcdfa8a083536e3317b2367eead_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v restart\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:restart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodDetection::restart (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOA}
{\bkmkend AAAAAAAAOA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_detection_a64d7c2528c01013729ef4b3ec492bec6_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v savePicture\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:savePicture}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodDetection::savePicture (cv::VideoCapture * , std::string  {\i filename})}}
\par
{\bkmkstart AAAAAAAAOB}
{\bkmkend AAAAAAAAOB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setCameraId\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:setCameraId}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodDetection::setCameraId (int  {\i id})}}
\par
{\bkmkstart AAAAAAAAOC}
{\bkmkend AAAAAAAAOC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Camera} setup functions \par
}}
{\xe \v setContrasts\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:setContrasts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodDetection::setContrasts (int  {\i low}, int  {\i high})}}
\par
{\bkmkstart AAAAAAAAOD}
{\bkmkend AAAAAAAAOD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setShutter\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:setShutter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodDetection::setShutter (int  {\i shutter})}}
\par
{\bkmkstart AAAAAAAAOE}
{\bkmkend AAAAAAAAOE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v start\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodDetection::start (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOF}
{\bkmkend AAAAAAAAOF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_detection_acd6daec24bb0d856325a912a92936a93_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_detection_acd6daec24bb0d856325a912a92936a93_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v stop\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodDetection::stop (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOG}
{\bkmkend AAAAAAAAOG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_detection_a6457a5a1d28a943c2a20fbf929df7324_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_detection_a6457a5a1d28a943c2a20fbf929df7324_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v takePicture\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:takePicture}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
cv::Mat IntruderMoodDetection::takePicture ()}}
\par
{\bkmkstart AAAAAAAAOH}
{\bkmkend AAAAAAAAOH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Camera} functions \par
}}
{\xe \v unlock\:IntruderMoodDetection}
{\xe \v IntruderMoodDetection\:unlock}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodDetection::unlock (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOI}
{\bkmkend AAAAAAAAOI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_detection_a5c1ef131ee35d806ab207615a0e7bd49_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_detection_a5c1ef131ee35d806ab207615a0e7bd49_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/intruder-mood-detection/{\b IntruderMoodDetection.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/intruder-mood-detection/{\b IntruderMoodDetection.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntruderMoodThread Class Reference\par \pard\plain 
{\tc\tcl2 \v IntruderMoodThread}
{\xe \v IntruderMoodThread}
{\bkmkstart AAAAAAAAOJ}
{\bkmkend AAAAAAAAOJ}
\par
{
{\f2 #include <IntruderMoodThread.h>}}\par
Inheritance diagram for IntruderMoodThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_thread__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for IntruderMoodThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_thread__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IntruderMoodThread} (cv::VideoCapture camera)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b unlock} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b restart} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b join} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v IntruderMoodThread\:IntruderMoodThread}
{\xe \v IntruderMoodThread\:IntruderMoodThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
IntruderMoodThread::IntruderMoodThread (cv::VideoCapture  {\i camera}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOK}
{\bkmkend AAAAAAAAOK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Contructor for our intruder mood thread. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v join\:IntruderMoodThread}
{\xe \v IntruderMoodThread\:join}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::join (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Waits for the thread to terminate. \par
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a8ff0fda6b913cc53764caef0e1200f3f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v restart\:IntruderMoodThread}
{\xe \v IntruderMoodThread\:restart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodThread::restart (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOL}
{\bkmkend AAAAAAAAOL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_thread_a4ca398b2c77685a25ca8983afc8bb50d_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start\:IntruderMoodThread}
{\xe \v IntruderMoodThread\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::start (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts the thread. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v stop\:IntruderMoodThread}
{\xe \v IntruderMoodThread\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodThread::stop (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOM}
{\bkmkend AAAAAAAAOM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_thread_ade454d5fa7c9f6fdf3b11a8d4d6fc92d_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v unlock\:IntruderMoodThread}
{\xe \v IntruderMoodThread\:unlock}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderMoodThread::unlock (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAON}
{\bkmkend AAAAAAAAON}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_mood_thread_a44ae2cf509b7afa810c8ee861c6b1ad2_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/intruder-mood-detection/{\b IntruderMoodThread.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/intruder-mood-detection/{\b IntruderMoodThread.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntruderThread Class Reference\par \pard\plain 
{\tc\tcl2 \v IntruderThread}
{\xe \v IntruderThread}
{\bkmkstart AAAAAAAAOO}
{\bkmkend AAAAAAAAOO}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Intruder Thread to manage intruder detection functionality. }}\par
{
{\f2 #include <IntruderThread.h>}}\par
Inheritance diagram for IntruderThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_thread__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for IntruderThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_thread__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IntruderThread} (cv::VideoCapture camera)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setModule} (std::string module)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b join} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Intruder Thread to manage intruder detection functionality. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v IntruderThread\:IntruderThread}
{\xe \v IntruderThread\:IntruderThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
IntruderThread::IntruderThread (cv::VideoCapture  {\i camera}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOP}
{\bkmkend AAAAAAAAOP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Contructor for our intruder thread. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v join\:IntruderThread}
{\xe \v IntruderThread\:join}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::join (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Waits for the thread to terminate. \par
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a8ff0fda6b913cc53764caef0e1200f3f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v setModule\:IntruderThread}
{\xe \v IntruderThread\:setModule}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderThread::setModule (std::string  {\i module}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOQ}
{\bkmkend AAAAAAAAOQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v start\:IntruderThread}
{\xe \v IntruderThread\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::start (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts the thread. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v stop\:IntruderThread}
{\xe \v IntruderThread\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void IntruderThread::stop (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOR}
{\bkmkend AAAAAAAAOR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_intruder_thread_adca3a9fd9fadc77fa40e2a36dbd7df7d_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/intruder-detection/{\b IntruderThread.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/intruder-detection/{\b IntruderThread.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
mfrc522::ISpi Struct Reference\par \pard\plain 
{\tc\tcl2 \v mfrc522::ISpi}
{\xe \v mfrc522::ISpi}
{\bkmkstart AAAAAAAARJ}
{\bkmkend AAAAAAAARJ}
\par
{
{\f2 #include <ispi.h>}}\par
Inheritance diagram for mfrc522::ISpi:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structmfrc522_1_1_i_spi__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b write} (char *pData, size_t len)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b read} (char *pData, size_t len)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b writeRead} (char *pData, size_t len)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual char {\b writeRead} (char data)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b write} (char *pData, size_t len)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b read} (char *pData, size_t len)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b writeRead} (char *pData, size_t len)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual char {\b writeRead} (char data)=0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v read\:mfrc522::ISpi}
{\xe \v mfrc522::ISpi\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void mfrc522::ISpi::read (char *  {\i pData}, size_t  {\i len}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmSpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIR \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b Spidev} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQR \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v read\:mfrc522::ISpi}
{\xe \v mfrc522::ISpi\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void mfrc522::ISpi::read (char *  {\i pData}, size_t  {\i len}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmSpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIR \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b Spidev} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQR \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v write\:mfrc522::ISpi}
{\xe \v mfrc522::ISpi\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void mfrc522::ISpi::write (char *  {\i pData}, size_t  {\i len}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmSpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIT \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b Spidev} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structmfrc522_1_1_i_spi_a9f98a44742d44089eee210f9d5908bed_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v write\:mfrc522::ISpi}
{\xe \v mfrc522::ISpi\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void mfrc522::ISpi::write (char *  {\i pData}, size_t  {\i len}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmSpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIT \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b Spidev} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v writeRead\:mfrc522::ISpi}
{\xe \v mfrc522::ISpi\:writeRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void mfrc522::ISpi::writeRead (char *  {\i pData}, size_t  {\i len}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmSpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIV \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b Spidev} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQT \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structmfrc522_1_1_i_spi_a251598542df9d4026fc28e832d4770ac_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v writeRead\:mfrc522::ISpi}
{\xe \v mfrc522::ISpi\:writeRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void mfrc522::ISpi::writeRead (char *  {\i pData}, size_t  {\i len}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmSpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIV \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b Spidev} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQT \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v writeRead\:mfrc522::ISpi}
{\xe \v mfrc522::ISpi\:writeRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual char mfrc522::ISpi::writeRead (char  {\i data}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmSpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIX \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b Spidev} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v writeRead\:mfrc522::ISpi}
{\xe \v mfrc522::ISpi\:writeRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual char mfrc522::ISpi::writeRead (char  {\i data}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b BcmSpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIX \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b Spidev} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/dependencies/mfrc522/{\b ispi.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/bcm2835/{\b ispi.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
LEDController Class Reference\par \pard\plain 
{\tc\tcl2 \v LEDController}
{\xe \v LEDController}
{\bkmkstart AAAAAAAAOS}
{\bkmkend AAAAAAAAOS}
\par
{
{\f2 #include <LEDController.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b LEDController} (int ledPin, int redPin, int greenPin, int bluePin)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b turnOnLED} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b turnOffLED} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setRGBColor} (const std::string &color)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b turnOffRGBLED} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v LEDController\:LEDController}
{\xe \v LEDController\:LEDController}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
LEDController::LEDController (int  {\i ledPin}, int  {\i redPin}, int  {\i greenPin}, int  {\i bluePin})}}
\par
{\bkmkstart AAAAAAAAOT}
{\bkmkend AAAAAAAAOT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v setRGBColor\:LEDController}
{\xe \v LEDController\:setRGBColor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void LEDController::setRGBColor (const std::string &  {\i color})}}
\par
{\bkmkstart AAAAAAAAOU}
{\bkmkend AAAAAAAAOU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v turnOffLED\:LEDController}
{\xe \v LEDController\:turnOffLED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void LEDController::turnOffLED ()}}
\par
{\bkmkstart AAAAAAAAOV}
{\bkmkend AAAAAAAAOV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v turnOffRGBLED\:LEDController}
{\xe \v LEDController\:turnOffRGBLED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void LEDController::turnOffRGBLED ()}}
\par
{\bkmkstart AAAAAAAAOW}
{\bkmkend AAAAAAAAOW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v turnOnLED\:LEDController}
{\xe \v LEDController\:turnOnLED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void LEDController::turnOnLED ()}}
\par
{\bkmkstart AAAAAAAAOX}
{\bkmkend AAAAAAAAOX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b LEDController.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b LEDController.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
mfrc522::MFRC522 Class Reference\par \pard\plain 
{\tc\tcl2 \v mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522}
{\bkmkstart AAAAAAAARK}
{\bkmkend AAAAAAAARK}
\par
{
{\f2 #include <mfrc522.h>}}\par
Collaboration diagram for mfrc522::MFRC522:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b MIFARE_Key}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Uid}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b PCD_Register} \{ {\b CommandReg} = 0x01 << 1
, {\b ComIEnReg} = 0x02 << 1
, {\b DivIEnReg} = 0x03 << 1
, {\b ComIrqReg} = 0x04 << 1
, {\b DivIrqReg} = 0x05 << 1
, {\b ErrorReg} = 0x06 << 1
, {\b Status1Reg} = 0x07 << 1
, {\b Status2Reg} = 0x08 << 1
, {\b FIFODataReg} = 0x09 << 1
, {\b FIFOLevelReg} = 0x0A << 1
, {\b WaterLevelReg} = 0x0B << 1
, {\b ControlReg} = 0x0C << 1
, {\b BitFramingReg} = 0x0D << 1
, {\b CollReg} = 0x0E << 1
, {\b ModeReg} = 0x11 << 1
, {\b TxModeReg} = 0x12 << 1
, {\b RxModeReg} = 0x13 << 1
, {\b TxControlReg} = 0x14 << 1
, {\b TxASKReg} = 0x15 << 1
, {\b TxSelReg} = 0x16 << 1
, {\b RxSelReg} = 0x17 << 1
, {\b RxThresholdReg} = 0x18 << 1
, {\b DemodReg} = 0x19 << 1
, {\b MfTxReg} = 0x1C << 1
, {\b MfRxReg} = 0x1D << 1
, {\b SerialSpeedReg} = 0x1F << 1
, {\b CRCResultRegH} = 0x21 << 1
, {\b CRCResultRegL} = 0x22 << 1
, {\b ModWidthReg} = 0x24 << 1
, {\b RFCfgReg} = 0x26 << 1
, {\b GsNReg} = 0x27 << 1
, {\b CWGsPReg} = 0x28 << 1
, {\b ModGsPReg} = 0x29 << 1
, {\b TModeReg} = 0x2A << 1
, {\b TPrescalerReg} = 0x2B << 1
, {\b TReloadRegH} = 0x2C << 1
, {\b TReloadRegL} = 0x2D << 1
, {\b TCounterValueRegH} = 0x2E << 1
, {\b TCounterValueRegL} = 0x2F << 1
, {\b TestSel1Reg} = 0x31 << 1
, {\b TestSel2Reg} = 0x32 << 1
, {\b TestPinEnReg} = 0x33 << 1
, {\b TestPinValueReg} = 0x34 << 1
, {\b TestBusReg} = 0x35 << 1
, {\b AutoTestReg} = 0x36 << 1
, {\b VersionReg} = 0x37 << 1
, {\b AnalogTestReg} = 0x38 << 1
, {\b TestDAC1Reg} = 0x39 << 1
, {\b TestDAC2Reg} = 0x3A << 1
, {\b TestADCReg} = 0x3B << 1
, {\b CommandReg} = 0x01 << 1
, {\b ComIEnReg} = 0x02 << 1
, {\b DivIEnReg} = 0x03 << 1
, {\b ComIrqReg} = 0x04 << 1
, {\b DivIrqReg} = 0x05 << 1
, {\b ErrorReg} = 0x06 << 1
, {\b Status1Reg} = 0x07 << 1
, {\b Status2Reg} = 0x08 << 1
, {\b FIFODataReg} = 0x09 << 1
, {\b FIFOLevelReg} = 0x0A << 1
, {\b WaterLevelReg} = 0x0B << 1
, {\b ControlReg} = 0x0C << 1
, {\b BitFramingReg} = 0x0D << 1
, {\b CollReg} = 0x0E << 1
, {\b ModeReg} = 0x11 << 1
, {\b TxModeReg} = 0x12 << 1
, {\b RxModeReg} = 0x13 << 1
, {\b TxControlReg} = 0x14 << 1
, {\b TxASKReg} = 0x15 << 1
, {\b TxSelReg} = 0x16 << 1
, {\b RxSelReg} = 0x17 << 1
, {\b RxThresholdReg} = 0x18 << 1
, {\b DemodReg} = 0x19 << 1
, {\b MfTxReg} = 0x1C << 1
, {\b MfRxReg} = 0x1D << 1
, {\b SerialSpeedReg} = 0x1F << 1
, {\b CRCResultRegH} = 0x21 << 1
, {\b CRCResultRegL} = 0x22 << 1
, {\b ModWidthReg} = 0x24 << 1
, {\b RFCfgReg} = 0x26 << 1
, {\b GsNReg} = 0x27 << 1
, {\b CWGsPReg} = 0x28 << 1
, {\b ModGsPReg} = 0x29 << 1
, {\b TModeReg} = 0x2A << 1
, {\b TPrescalerReg} = 0x2B << 1
, {\b TReloadRegH} = 0x2C << 1
, {\b TReloadRegL} = 0x2D << 1
, {\b TCounterValueRegH} = 0x2E << 1
, {\b TCounterValueRegL} = 0x2F << 1
, {\b TestSel1Reg} = 0x31 << 1
, {\b TestSel2Reg} = 0x32 << 1
, {\b TestPinEnReg} = 0x33 << 1
, {\b TestPinValueReg} = 0x34 << 1
, {\b TestBusReg} = 0x35 << 1
, {\b AutoTestReg} = 0x36 << 1
, {\b VersionReg} = 0x37 << 1
, {\b AnalogTestReg} = 0x38 << 1
, {\b TestDAC1Reg} = 0x39 << 1
, {\b TestDAC2Reg} = 0x3A << 1
, {\b TestADCReg} = 0x3B << 1
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b PCD_Command} \{ {\b PCD_Idle} = 0x00
, {\b PCD_Mem} = 0x01
, {\b PCD_GenerateRandomID} = 0x02
, {\b PCD_CalcCRC} = 0x03
, {\b PCD_Transmit} = 0x04
, {\b PCD_NoCmdChange} = 0x07
, {\b PCD_Receive} = 0x08
, {\b PCD_Transceive} = 0x0C
, {\b PCD_MFAuthent} = 0x0E
, {\b PCD_SoftReset} = 0x0F
, {\b PCD_Idle} = 0x00
, {\b PCD_Mem} = 0x01
, {\b PCD_GenerateRandomID} = 0x02
, {\b PCD_CalcCRC} = 0x03
, {\b PCD_Transmit} = 0x04
, {\b PCD_NoCmdChange} = 0x07
, {\b PCD_Receive} = 0x08
, {\b PCD_Transceive} = 0x0C
, {\b PCD_MFAuthent} = 0x0E
, {\b PCD_SoftReset} = 0x0F
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b PCD_RxGain} \{ {\b RxGain_18dB} = 0x00 << 4
, {\b RxGain_23dB} = 0x01 << 4
, {\b RxGain_18dB_2} = 0x02 << 4
, {\b RxGain_23dB_2} = 0x03 << 4
, {\b RxGain_33dB} = 0x04 << 4
, {\b RxGain_38dB} = 0x05 << 4
, {\b RxGain_43dB} = 0x06 << 4
, {\b RxGain_48dB} = 0x07 << 4
, {\b RxGain_min} = 0x00 << 4
, {\b RxGain_avg} = 0x04 << 4
, {\b RxGain_max} = 0x07 << 4
, {\b RxGain_18dB} = 0x00 << 4
, {\b RxGain_23dB} = 0x01 << 4
, {\b RxGain_18dB_2} = 0x02 << 4
, {\b RxGain_23dB_2} = 0x03 << 4
, {\b RxGain_33dB} = 0x04 << 4
, {\b RxGain_38dB} = 0x05 << 4
, {\b RxGain_43dB} = 0x06 << 4
, {\b RxGain_48dB} = 0x07 << 4
, {\b RxGain_min} = 0x00 << 4
, {\b RxGain_avg} = 0x04 << 4
, {\b RxGain_max} = 0x07 << 4
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b PICC_Command} \{ {\b PICC_CMD_REQA} = 0x26
, {\b PICC_CMD_WUPA} = 0x52
, {\b PICC_CMD_CT} = 0x88
, {\b PICC_CMD_SEL_CL1} = 0x93
, {\b PICC_CMD_SEL_CL2} = 0x95
, {\b PICC_CMD_SEL_CL3} = 0x97
, {\b PICC_CMD_HLTA} = 0x50
, {\b PICC_CMD_MF_AUTH_KEY_A} = 0x60
, {\b PICC_CMD_MF_AUTH_KEY_B} = 0x61
, {\b PICC_CMD_MF_READ} = 0x30
, {\b PICC_CMD_MF_WRITE} = 0xA0
, {\b PICC_CMD_MF_DECREMENT} = 0xC0
, {\b PICC_CMD_MF_INCREMENT} = 0xC1
, {\b PICC_CMD_MF_RESTORE} = 0xC2
, {\b PICC_CMD_MF_TRANSFER} = 0xB0
, {\b PICC_CMD_UL_WRITE} = 0xA2
, {\b PICC_CMD_REQA} = 0x26
, {\b PICC_CMD_WUPA} = 0x52
, {\b PICC_CMD_CT} = 0x88
, {\b PICC_CMD_SEL_CL1} = 0x93
, {\b PICC_CMD_SEL_CL2} = 0x95
, {\b PICC_CMD_SEL_CL3} = 0x97
, {\b PICC_CMD_HLTA} = 0x50
, {\b PICC_CMD_MF_AUTH_KEY_A} = 0x60
, {\b PICC_CMD_MF_AUTH_KEY_B} = 0x61
, {\b PICC_CMD_MF_READ} = 0x30
, {\b PICC_CMD_MF_WRITE} = 0xA0
, {\b PICC_CMD_MF_DECREMENT} = 0xC0
, {\b PICC_CMD_MF_INCREMENT} = 0xC1
, {\b PICC_CMD_MF_RESTORE} = 0xC2
, {\b PICC_CMD_MF_TRANSFER} = 0xB0
, {\b PICC_CMD_UL_WRITE} = 0xA2
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b MIFARE_Misc} \{ {\b MF_ACK} = 0xA
, {\b MF_KEY_SIZE} = 6
, {\b MF_ACK} = 0xA
, {\b MF_KEY_SIZE} = 6
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b PICC_Type} \{ {\b PICC_TYPE_UNKNOWN} = 0
, {\b PICC_TYPE_ISO_14443_4} = 1
, {\b PICC_TYPE_ISO_18092} = 2
, {\b PICC_TYPE_MIFARE_MINI} = 3
, {\b PICC_TYPE_MIFARE_1K} = 4
, {\b PICC_TYPE_MIFARE_4K} = 5
, {\b PICC_TYPE_MIFARE_UL} = 6
, {\b PICC_TYPE_MIFARE_PLUS} = 7
, {\b PICC_TYPE_TNP3XXX} = 8
, {\b PICC_TYPE_NOT_COMPLETE} = 255
, {\b PICC_TYPE_UNKNOWN} = 0
, {\b PICC_TYPE_ISO_14443_4} = 1
, {\b PICC_TYPE_ISO_18092} = 2
, {\b PICC_TYPE_MIFARE_MINI} = 3
, {\b PICC_TYPE_MIFARE_1K} = 4
, {\b PICC_TYPE_MIFARE_4K} = 5
, {\b PICC_TYPE_MIFARE_UL} = 6
, {\b PICC_TYPE_MIFARE_PLUS} = 7
, {\b PICC_TYPE_TNP3XXX} = 8
, {\b PICC_TYPE_NOT_COMPLETE} = 255
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b StatusCode} \{ {\b STATUS_OK} = 1
, {\b STATUS_ERROR} = 2
, {\b STATUS_COLLISION} = 3
, {\b STATUS_TIMEOUT} = 4
, {\b STATUS_NO_ROOM} = 5
, {\b STATUS_INTERNAL_ERROR} = 6
, {\b STATUS_INVALID} = 7
, {\b STATUS_CRC_WRONG} = 8
, {\b STATUS_MIFARE_NACK} = 9
, {\b STATUS_OK} = 1
, {\b STATUS_ERROR} = 2
, {\b STATUS_COLLISION} = 3
, {\b STATUS_TIMEOUT} = 4
, {\b STATUS_NO_ROOM} = 5
, {\b STATUS_INTERNAL_ERROR} = 6
, {\b STATUS_INVALID} = 7
, {\b STATUS_CRC_WRONG} = 8
, {\b STATUS_MIFARE_NACK} = 9
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b PCD_Register} \{ {\b CommandReg} = 0x01 << 1
, {\b ComIEnReg} = 0x02 << 1
, {\b DivIEnReg} = 0x03 << 1
, {\b ComIrqReg} = 0x04 << 1
, {\b DivIrqReg} = 0x05 << 1
, {\b ErrorReg} = 0x06 << 1
, {\b Status1Reg} = 0x07 << 1
, {\b Status2Reg} = 0x08 << 1
, {\b FIFODataReg} = 0x09 << 1
, {\b FIFOLevelReg} = 0x0A << 1
, {\b WaterLevelReg} = 0x0B << 1
, {\b ControlReg} = 0x0C << 1
, {\b BitFramingReg} = 0x0D << 1
, {\b CollReg} = 0x0E << 1
, {\b ModeReg} = 0x11 << 1
, {\b TxModeReg} = 0x12 << 1
, {\b RxModeReg} = 0x13 << 1
, {\b TxControlReg} = 0x14 << 1
, {\b TxASKReg} = 0x15 << 1
, {\b TxSelReg} = 0x16 << 1
, {\b RxSelReg} = 0x17 << 1
, {\b RxThresholdReg} = 0x18 << 1
, {\b DemodReg} = 0x19 << 1
, {\b MfTxReg} = 0x1C << 1
, {\b MfRxReg} = 0x1D << 1
, {\b SerialSpeedReg} = 0x1F << 1
, {\b CRCResultRegH} = 0x21 << 1
, {\b CRCResultRegL} = 0x22 << 1
, {\b ModWidthReg} = 0x24 << 1
, {\b RFCfgReg} = 0x26 << 1
, {\b GsNReg} = 0x27 << 1
, {\b CWGsPReg} = 0x28 << 1
, {\b ModGsPReg} = 0x29 << 1
, {\b TModeReg} = 0x2A << 1
, {\b TPrescalerReg} = 0x2B << 1
, {\b TReloadRegH} = 0x2C << 1
, {\b TReloadRegL} = 0x2D << 1
, {\b TCounterValueRegH} = 0x2E << 1
, {\b TCounterValueRegL} = 0x2F << 1
, {\b TestSel1Reg} = 0x31 << 1
, {\b TestSel2Reg} = 0x32 << 1
, {\b TestPinEnReg} = 0x33 << 1
, {\b TestPinValueReg} = 0x34 << 1
, {\b TestBusReg} = 0x35 << 1
, {\b AutoTestReg} = 0x36 << 1
, {\b VersionReg} = 0x37 << 1
, {\b AnalogTestReg} = 0x38 << 1
, {\b TestDAC1Reg} = 0x39 << 1
, {\b TestDAC2Reg} = 0x3A << 1
, {\b TestADCReg} = 0x3B << 1
, {\b CommandReg} = 0x01 << 1
, {\b ComIEnReg} = 0x02 << 1
, {\b DivIEnReg} = 0x03 << 1
, {\b ComIrqReg} = 0x04 << 1
, {\b DivIrqReg} = 0x05 << 1
, {\b ErrorReg} = 0x06 << 1
, {\b Status1Reg} = 0x07 << 1
, {\b Status2Reg} = 0x08 << 1
, {\b FIFODataReg} = 0x09 << 1
, {\b FIFOLevelReg} = 0x0A << 1
, {\b WaterLevelReg} = 0x0B << 1
, {\b ControlReg} = 0x0C << 1
, {\b BitFramingReg} = 0x0D << 1
, {\b CollReg} = 0x0E << 1
, {\b ModeReg} = 0x11 << 1
, {\b TxModeReg} = 0x12 << 1
, {\b RxModeReg} = 0x13 << 1
, {\b TxControlReg} = 0x14 << 1
, {\b TxASKReg} = 0x15 << 1
, {\b TxSelReg} = 0x16 << 1
, {\b RxSelReg} = 0x17 << 1
, {\b RxThresholdReg} = 0x18 << 1
, {\b DemodReg} = 0x19 << 1
, {\b MfTxReg} = 0x1C << 1
, {\b MfRxReg} = 0x1D << 1
, {\b SerialSpeedReg} = 0x1F << 1
, {\b CRCResultRegH} = 0x21 << 1
, {\b CRCResultRegL} = 0x22 << 1
, {\b ModWidthReg} = 0x24 << 1
, {\b RFCfgReg} = 0x26 << 1
, {\b GsNReg} = 0x27 << 1
, {\b CWGsPReg} = 0x28 << 1
, {\b ModGsPReg} = 0x29 << 1
, {\b TModeReg} = 0x2A << 1
, {\b TPrescalerReg} = 0x2B << 1
, {\b TReloadRegH} = 0x2C << 1
, {\b TReloadRegL} = 0x2D << 1
, {\b TCounterValueRegH} = 0x2E << 1
, {\b TCounterValueRegL} = 0x2F << 1
, {\b TestSel1Reg} = 0x31 << 1
, {\b TestSel2Reg} = 0x32 << 1
, {\b TestPinEnReg} = 0x33 << 1
, {\b TestPinValueReg} = 0x34 << 1
, {\b TestBusReg} = 0x35 << 1
, {\b AutoTestReg} = 0x36 << 1
, {\b VersionReg} = 0x37 << 1
, {\b AnalogTestReg} = 0x38 << 1
, {\b TestDAC1Reg} = 0x39 << 1
, {\b TestDAC2Reg} = 0x3A << 1
, {\b TestADCReg} = 0x3B << 1
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b PCD_Command} \{ {\b PCD_Idle} = 0x00
, {\b PCD_Mem} = 0x01
, {\b PCD_GenerateRandomID} = 0x02
, {\b PCD_CalcCRC} = 0x03
, {\b PCD_Transmit} = 0x04
, {\b PCD_NoCmdChange} = 0x07
, {\b PCD_Receive} = 0x08
, {\b PCD_Transceive} = 0x0C
, {\b PCD_MFAuthent} = 0x0E
, {\b PCD_SoftReset} = 0x0F
, {\b PCD_Idle} = 0x00
, {\b PCD_Mem} = 0x01
, {\b PCD_GenerateRandomID} = 0x02
, {\b PCD_CalcCRC} = 0x03
, {\b PCD_Transmit} = 0x04
, {\b PCD_NoCmdChange} = 0x07
, {\b PCD_Receive} = 0x08
, {\b PCD_Transceive} = 0x0C
, {\b PCD_MFAuthent} = 0x0E
, {\b PCD_SoftReset} = 0x0F
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b PCD_RxGain} \{ {\b RxGain_18dB} = 0x00 << 4
, {\b RxGain_23dB} = 0x01 << 4
, {\b RxGain_18dB_2} = 0x02 << 4
, {\b RxGain_23dB_2} = 0x03 << 4
, {\b RxGain_33dB} = 0x04 << 4
, {\b RxGain_38dB} = 0x05 << 4
, {\b RxGain_43dB} = 0x06 << 4
, {\b RxGain_48dB} = 0x07 << 4
, {\b RxGain_min} = 0x00 << 4
, {\b RxGain_avg} = 0x04 << 4
, {\b RxGain_max} = 0x07 << 4
, {\b RxGain_18dB} = 0x00 << 4
, {\b RxGain_23dB} = 0x01 << 4
, {\b RxGain_18dB_2} = 0x02 << 4
, {\b RxGain_23dB_2} = 0x03 << 4
, {\b RxGain_33dB} = 0x04 << 4
, {\b RxGain_38dB} = 0x05 << 4
, {\b RxGain_43dB} = 0x06 << 4
, {\b RxGain_48dB} = 0x07 << 4
, {\b RxGain_min} = 0x00 << 4
, {\b RxGain_avg} = 0x04 << 4
, {\b RxGain_max} = 0x07 << 4
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b PICC_Command} \{ {\b PICC_CMD_REQA} = 0x26
, {\b PICC_CMD_WUPA} = 0x52
, {\b PICC_CMD_CT} = 0x88
, {\b PICC_CMD_SEL_CL1} = 0x93
, {\b PICC_CMD_SEL_CL2} = 0x95
, {\b PICC_CMD_SEL_CL3} = 0x97
, {\b PICC_CMD_HLTA} = 0x50
, {\b PICC_CMD_MF_AUTH_KEY_A} = 0x60
, {\b PICC_CMD_MF_AUTH_KEY_B} = 0x61
, {\b PICC_CMD_MF_READ} = 0x30
, {\b PICC_CMD_MF_WRITE} = 0xA0
, {\b PICC_CMD_MF_DECREMENT} = 0xC0
, {\b PICC_CMD_MF_INCREMENT} = 0xC1
, {\b PICC_CMD_MF_RESTORE} = 0xC2
, {\b PICC_CMD_MF_TRANSFER} = 0xB0
, {\b PICC_CMD_UL_WRITE} = 0xA2
, {\b PICC_CMD_REQA} = 0x26
, {\b PICC_CMD_WUPA} = 0x52
, {\b PICC_CMD_CT} = 0x88
, {\b PICC_CMD_SEL_CL1} = 0x93
, {\b PICC_CMD_SEL_CL2} = 0x95
, {\b PICC_CMD_SEL_CL3} = 0x97
, {\b PICC_CMD_HLTA} = 0x50
, {\b PICC_CMD_MF_AUTH_KEY_A} = 0x60
, {\b PICC_CMD_MF_AUTH_KEY_B} = 0x61
, {\b PICC_CMD_MF_READ} = 0x30
, {\b PICC_CMD_MF_WRITE} = 0xA0
, {\b PICC_CMD_MF_DECREMENT} = 0xC0
, {\b PICC_CMD_MF_INCREMENT} = 0xC1
, {\b PICC_CMD_MF_RESTORE} = 0xC2
, {\b PICC_CMD_MF_TRANSFER} = 0xB0
, {\b PICC_CMD_UL_WRITE} = 0xA2
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b MIFARE_Misc} \{ {\b MF_ACK} = 0xA
, {\b MF_KEY_SIZE} = 6
, {\b MF_ACK} = 0xA
, {\b MF_KEY_SIZE} = 6
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b PICC_Type} \{ {\b PICC_TYPE_UNKNOWN} = 0
, {\b PICC_TYPE_ISO_14443_4} = 1
, {\b PICC_TYPE_ISO_18092} = 2
, {\b PICC_TYPE_MIFARE_MINI} = 3
, {\b PICC_TYPE_MIFARE_1K} = 4
, {\b PICC_TYPE_MIFARE_4K} = 5
, {\b PICC_TYPE_MIFARE_UL} = 6
, {\b PICC_TYPE_MIFARE_PLUS} = 7
, {\b PICC_TYPE_TNP3XXX} = 8
, {\b PICC_TYPE_NOT_COMPLETE} = 255
, {\b PICC_TYPE_UNKNOWN} = 0
, {\b PICC_TYPE_ISO_14443_4} = 1
, {\b PICC_TYPE_ISO_18092} = 2
, {\b PICC_TYPE_MIFARE_MINI} = 3
, {\b PICC_TYPE_MIFARE_1K} = 4
, {\b PICC_TYPE_MIFARE_4K} = 5
, {\b PICC_TYPE_MIFARE_UL} = 6
, {\b PICC_TYPE_MIFARE_PLUS} = 7
, {\b PICC_TYPE_TNP3XXX} = 8
, {\b PICC_TYPE_NOT_COMPLETE} = 255
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b StatusCode} \{ {\b STATUS_OK} = 1
, {\b STATUS_ERROR} = 2
, {\b STATUS_COLLISION} = 3
, {\b STATUS_TIMEOUT} = 4
, {\b STATUS_NO_ROOM} = 5
, {\b STATUS_INTERNAL_ERROR} = 6
, {\b STATUS_INVALID} = 7
, {\b STATUS_CRC_WRONG} = 8
, {\b STATUS_MIFARE_NACK} = 9
, {\b STATUS_OK} = 1
, {\b STATUS_ERROR} = 2
, {\b STATUS_COLLISION} = 3
, {\b STATUS_TIMEOUT} = 4
, {\b STATUS_NO_ROOM} = 5
, {\b STATUS_INTERNAL_ERROR} = 6
, {\b STATUS_INVALID} = 7
, {\b STATUS_CRC_WRONG} = 8
, {\b STATUS_MIFARE_NACK} = 9
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MFRC522} ({\b ISpi} &, {\b IGpio} &resetPin)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_WriteRegister} (uint8_t reg, uint8_t value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_WriteRegister} (uint8_t reg, uint8_t count, uint8_t *values)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_ReadRegister} (uint8_t reg)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_ReadRegister} (uint8_t reg, uint8_t count, uint8_t *values, uint8_t rxAlign=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBitMask} (unsigned char reg, unsigned char mask)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_SetRegisterBitMask} (uint8_t reg, uint8_t mask)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_ClearRegisterBitMask} (uint8_t reg, uint8_t mask)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_CalculateCRC} (uint8_t *data, uint8_t length, uint8_t *result)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_Init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_Reset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_AntennaOn} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_AntennaOff} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_GetAntennaGain} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_SetAntennaGain} (uint8_t mask)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b PCD_PerformSelfTest} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_TransceiveData} (uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen, uint8_t *validBits=NULL, uint8_t rxAlign=0, bool checkCRC=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_CommunicateWithPICC} (uint8_t command, uint8_t waitIRq, uint8_t *sendData, uint8_t sendLen, uint8_t *backData=NULL, uint8_t *backLen=NULL, uint8_t *validBits=NULL, uint8_t rxAlign=0, bool checkCRC=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_RequestA} (uint8_t *bufferATQA, uint8_t *bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_WakeupA} (uint8_t *bufferATQA, uint8_t *bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_REQA_or_WUPA} (uint8_t command, uint8_t *bufferATQA, uint8_t *bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_Select} ({\b Uid} *{\b uid}, uint8_t validBits=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_HaltA} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_Authenticate} (uint8_t command, uint8_t blockAddr, {\b MIFARE_Key} *key, {\b Uid} *{\b uid})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_StopCrypto1} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Read} (uint8_t blockAddr, uint8_t *buffer, uint8_t *bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Write} (uint8_t blockAddr, uint8_t *buffer, uint8_t bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Decrement} (uint8_t blockAddr, long delta)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Increment} (uint8_t blockAddr, long delta)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Restore} (uint8_t blockAddr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Transfer} (uint8_t blockAddr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Ultralight_Write} (uint8_t page, uint8_t *buffer, uint8_t bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_GetValue} (uint8_t blockAddr, long *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_SetValue} (uint8_t blockAddr, long value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_MIFARE_Transceive} (uint8_t *sendData, uint8_t sendLen, bool acceptTimeout=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b GetStatusCodeName} (uint8_t code)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_GetType} (uint8_t sak)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b PICC_GetTypeName} (uint8_t type)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PICC_DumpToSerial} ({\b Uid} *{\b uid})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PICC_DumpMifareClassicToSerial} ({\b Uid} *{\b uid}, uint8_t piccType, {\b MIFARE_Key} *key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PICC_DumpMifareClassicSectorToSerial} ({\b Uid} *{\b uid}, {\b MIFARE_Key} *key, uint8_t sector)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PICC_DumpMifareUltralightToSerial} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b MIFARE_SetAccessBits} (uint8_t *accessBitBuffer, uint8_t g0, uint8_t g1, uint8_t g2, uint8_t g3)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b MIFARE_OpenUidBackdoor} (bool logErrors)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b MIFARE_SetUid} (uint8_t *newUid, uint8_t uidSize, bool logErrors)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b MIFARE_UnbrickUidSector} (bool logErrors)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b PICC_IsNewCardPresent} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b PICC_ReadCardSerial} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MFRC522} ({\b ISpi} &, {\b IGpio} &resetPin)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_WriteRegister} (uint8_t reg, uint8_t value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_WriteRegister} (uint8_t reg, uint8_t count, uint8_t *values)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_ReadRegister} (uint8_t reg)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_ReadRegister} (uint8_t reg, uint8_t count, uint8_t *values, uint8_t rxAlign=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBitMask} (unsigned char reg, unsigned char mask)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_SetRegisterBitMask} (uint8_t reg, uint8_t mask)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_ClearRegisterBitMask} (uint8_t reg, uint8_t mask)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_CalculateCRC} (uint8_t *data, uint8_t length, uint8_t *result)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_Init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_Reset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_AntennaOn} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_AntennaOff} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_GetAntennaGain} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_SetAntennaGain} (uint8_t mask)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b PCD_PerformSelfTest} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_TransceiveData} (uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen, uint8_t *validBits=NULL, uint8_t rxAlign=0, bool checkCRC=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_CommunicateWithPICC} (uint8_t command, uint8_t waitIRq, uint8_t *sendData, uint8_t sendLen, uint8_t *backData=NULL, uint8_t *backLen=NULL, uint8_t *validBits=NULL, uint8_t rxAlign=0, bool checkCRC=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_RequestA} (uint8_t *bufferATQA, uint8_t *bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_WakeupA} (uint8_t *bufferATQA, uint8_t *bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_REQA_or_WUPA} (uint8_t command, uint8_t *bufferATQA, uint8_t *bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_Select} ({\b Uid} *{\b uid}, uint8_t validBits=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_HaltA} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_Authenticate} (uint8_t command, uint8_t blockAddr, {\b MIFARE_Key} *key, {\b Uid} *{\b uid})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PCD_StopCrypto1} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Read} (uint8_t blockAddr, uint8_t *buffer, uint8_t *bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Write} (uint8_t blockAddr, uint8_t *buffer, uint8_t bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Decrement} (uint8_t blockAddr, long delta)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Increment} (uint8_t blockAddr, long delta)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Restore} (uint8_t blockAddr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Transfer} (uint8_t blockAddr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_Ultralight_Write} (uint8_t page, uint8_t *buffer, uint8_t bufferSize)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_GetValue} (uint8_t blockAddr, long *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b MIFARE_SetValue} (uint8_t blockAddr, long value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PCD_MIFARE_Transceive} (uint8_t *sendData, uint8_t sendLen, bool acceptTimeout=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b GetStatusCodeName} (uint8_t code)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b PICC_GetType} (uint8_t sak)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b PICC_GetTypeName} (uint8_t type)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PICC_DumpToSerial} ({\b Uid} *{\b uid})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PICC_DumpMifareClassicToSerial} ({\b Uid} *{\b uid}, uint8_t piccType, {\b MIFARE_Key} *key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PICC_DumpMifareClassicSectorToSerial} ({\b Uid} *{\b uid}, {\b MIFARE_Key} *key, uint8_t sector)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PICC_DumpMifareUltralightToSerial} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b MIFARE_SetAccessBits} (uint8_t *accessBitBuffer, uint8_t g0, uint8_t g1, uint8_t g2, uint8_t g3)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b MIFARE_OpenUidBackdoor} (bool logErrors)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b MIFARE_SetUid} (uint8_t *newUid, uint8_t uidSize, bool logErrors)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b MIFARE_UnbrickUidSector} (bool logErrors)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b PICC_IsNewCardPresent} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b PICC_ReadCardSerial} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Uid} {\b uid}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ISpi} & {\b mSpi}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IGpio} & {\b mResetPin}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const uint8_t {\b FIFO_SIZE} = 64\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Enumeration Documentation\par
\pard\plain 
{\xe \v MIFARE_Misc\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Misc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::MIFARE_Misc}}}
\par
{\bkmkstart AAAAAAAARL}
{\bkmkend AAAAAAAARL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v MF_ACK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MF_ACK}
{\qr MF_ACK{\bkmkstart AAAAAAAARM}
{\bkmkend AAAAAAAARM}
\cell }{\cell }{\row }
{\xe \v MF_KEY_SIZE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MF_KEY_SIZE}
{\qr MF_KEY_SIZE{\bkmkstart AAAAAAAARN}
{\bkmkend AAAAAAAARN}
\cell }{\cell }{\row }
{\xe \v MF_ACK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MF_ACK}
{\qr MF_ACK{\bkmkstart AAAAAAAARM}
{\bkmkend AAAAAAAARM}
\cell }{\cell }{\row }
{\xe \v MF_KEY_SIZE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MF_KEY_SIZE}
{\qr MF_KEY_SIZE{\bkmkstart AAAAAAAARN}
{\bkmkend AAAAAAAARN}
\cell }{\cell }{\row }
}
}
{\xe \v MIFARE_Misc\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Misc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::MIFARE_Misc}}}
\par
{\bkmkstart AAAAAAAARL}
{\bkmkend AAAAAAAARL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v MF_ACK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MF_ACK}
{\qr MF_ACK{\bkmkstart AAAAAAAARM}
{\bkmkend AAAAAAAARM}
\cell }{\cell }{\row }
{\xe \v MF_KEY_SIZE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MF_KEY_SIZE}
{\qr MF_KEY_SIZE{\bkmkstart AAAAAAAARN}
{\bkmkend AAAAAAAARN}
\cell }{\cell }{\row }
{\xe \v MF_ACK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MF_ACK}
{\qr MF_ACK{\bkmkstart AAAAAAAARM}
{\bkmkend AAAAAAAARM}
\cell }{\cell }{\row }
{\xe \v MF_KEY_SIZE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MF_KEY_SIZE}
{\qr MF_KEY_SIZE{\bkmkstart AAAAAAAARN}
{\bkmkend AAAAAAAARN}
\cell }{\cell }{\row }
}
}
{\xe \v PCD_Command\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Command}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::PCD_Command}}}
\par
{\bkmkstart AAAAAAAARO}
{\bkmkend AAAAAAAARO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v PCD_Idle\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Idle}
{\qr PCD_Idle{\bkmkstart AAAAAAAARP}
{\bkmkend AAAAAAAARP}
\cell }{\cell }{\row }
{\xe \v PCD_Mem\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Mem}
{\qr PCD_Mem{\bkmkstart AAAAAAAARQ}
{\bkmkend AAAAAAAARQ}
\cell }{\cell }{\row }
{\xe \v PCD_GenerateRandomID\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_GenerateRandomID}
{\qr PCD_GenerateRandomID{\bkmkstart AAAAAAAARR}
{\bkmkend AAAAAAAARR}
\cell }{\cell }{\row }
{\xe \v PCD_CalcCRC\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_CalcCRC}
{\qr PCD_CalcCRC{\bkmkstart AAAAAAAARS}
{\bkmkend AAAAAAAARS}
\cell }{\cell }{\row }
{\xe \v PCD_Transmit\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Transmit}
{\qr PCD_Transmit{\bkmkstart AAAAAAAART}
{\bkmkend AAAAAAAART}
\cell }{\cell }{\row }
{\xe \v PCD_NoCmdChange\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_NoCmdChange}
{\qr PCD_NoCmdChange{\bkmkstart AAAAAAAARU}
{\bkmkend AAAAAAAARU}
\cell }{\cell }{\row }
{\xe \v PCD_Receive\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Receive}
{\qr PCD_Receive{\bkmkstart AAAAAAAARV}
{\bkmkend AAAAAAAARV}
\cell }{\cell }{\row }
{\xe \v PCD_Transceive\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Transceive}
{\qr PCD_Transceive{\bkmkstart AAAAAAAARW}
{\bkmkend AAAAAAAARW}
\cell }{\cell }{\row }
{\xe \v PCD_MFAuthent\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_MFAuthent}
{\qr PCD_MFAuthent{\bkmkstart AAAAAAAARX}
{\bkmkend AAAAAAAARX}
\cell }{\cell }{\row }
{\xe \v PCD_SoftReset\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_SoftReset}
{\qr PCD_SoftReset{\bkmkstart AAAAAAAARY}
{\bkmkend AAAAAAAARY}
\cell }{\cell }{\row }
{\xe \v PCD_Idle\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Idle}
{\qr PCD_Idle{\bkmkstart AAAAAAAARP}
{\bkmkend AAAAAAAARP}
\cell }{\cell }{\row }
{\xe \v PCD_Mem\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Mem}
{\qr PCD_Mem{\bkmkstart AAAAAAAARQ}
{\bkmkend AAAAAAAARQ}
\cell }{\cell }{\row }
{\xe \v PCD_GenerateRandomID\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_GenerateRandomID}
{\qr PCD_GenerateRandomID{\bkmkstart AAAAAAAARR}
{\bkmkend AAAAAAAARR}
\cell }{\cell }{\row }
{\xe \v PCD_CalcCRC\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_CalcCRC}
{\qr PCD_CalcCRC{\bkmkstart AAAAAAAARS}
{\bkmkend AAAAAAAARS}
\cell }{\cell }{\row }
{\xe \v PCD_Transmit\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Transmit}
{\qr PCD_Transmit{\bkmkstart AAAAAAAART}
{\bkmkend AAAAAAAART}
\cell }{\cell }{\row }
{\xe \v PCD_NoCmdChange\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_NoCmdChange}
{\qr PCD_NoCmdChange{\bkmkstart AAAAAAAARU}
{\bkmkend AAAAAAAARU}
\cell }{\cell }{\row }
{\xe \v PCD_Receive\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Receive}
{\qr PCD_Receive{\bkmkstart AAAAAAAARV}
{\bkmkend AAAAAAAARV}
\cell }{\cell }{\row }
{\xe \v PCD_Transceive\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Transceive}
{\qr PCD_Transceive{\bkmkstart AAAAAAAARW}
{\bkmkend AAAAAAAARW}
\cell }{\cell }{\row }
{\xe \v PCD_MFAuthent\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_MFAuthent}
{\qr PCD_MFAuthent{\bkmkstart AAAAAAAARX}
{\bkmkend AAAAAAAARX}
\cell }{\cell }{\row }
{\xe \v PCD_SoftReset\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_SoftReset}
{\qr PCD_SoftReset{\bkmkstart AAAAAAAARY}
{\bkmkend AAAAAAAARY}
\cell }{\cell }{\row }
}
}
{\xe \v PCD_Command\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Command}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::PCD_Command}}}
\par
{\bkmkstart AAAAAAAARO}
{\bkmkend AAAAAAAARO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v PCD_Idle\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Idle}
{\qr PCD_Idle{\bkmkstart AAAAAAAARP}
{\bkmkend AAAAAAAARP}
\cell }{\cell }{\row }
{\xe \v PCD_Mem\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Mem}
{\qr PCD_Mem{\bkmkstart AAAAAAAARQ}
{\bkmkend AAAAAAAARQ}
\cell }{\cell }{\row }
{\xe \v PCD_GenerateRandomID\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_GenerateRandomID}
{\qr PCD_GenerateRandomID{\bkmkstart AAAAAAAARR}
{\bkmkend AAAAAAAARR}
\cell }{\cell }{\row }
{\xe \v PCD_CalcCRC\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_CalcCRC}
{\qr PCD_CalcCRC{\bkmkstart AAAAAAAARS}
{\bkmkend AAAAAAAARS}
\cell }{\cell }{\row }
{\xe \v PCD_Transmit\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Transmit}
{\qr PCD_Transmit{\bkmkstart AAAAAAAART}
{\bkmkend AAAAAAAART}
\cell }{\cell }{\row }
{\xe \v PCD_NoCmdChange\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_NoCmdChange}
{\qr PCD_NoCmdChange{\bkmkstart AAAAAAAARU}
{\bkmkend AAAAAAAARU}
\cell }{\cell }{\row }
{\xe \v PCD_Receive\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Receive}
{\qr PCD_Receive{\bkmkstart AAAAAAAARV}
{\bkmkend AAAAAAAARV}
\cell }{\cell }{\row }
{\xe \v PCD_Transceive\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Transceive}
{\qr PCD_Transceive{\bkmkstart AAAAAAAARW}
{\bkmkend AAAAAAAARW}
\cell }{\cell }{\row }
{\xe \v PCD_MFAuthent\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_MFAuthent}
{\qr PCD_MFAuthent{\bkmkstart AAAAAAAARX}
{\bkmkend AAAAAAAARX}
\cell }{\cell }{\row }
{\xe \v PCD_SoftReset\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_SoftReset}
{\qr PCD_SoftReset{\bkmkstart AAAAAAAARY}
{\bkmkend AAAAAAAARY}
\cell }{\cell }{\row }
{\xe \v PCD_Idle\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Idle}
{\qr PCD_Idle{\bkmkstart AAAAAAAARP}
{\bkmkend AAAAAAAARP}
\cell }{\cell }{\row }
{\xe \v PCD_Mem\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Mem}
{\qr PCD_Mem{\bkmkstart AAAAAAAARQ}
{\bkmkend AAAAAAAARQ}
\cell }{\cell }{\row }
{\xe \v PCD_GenerateRandomID\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_GenerateRandomID}
{\qr PCD_GenerateRandomID{\bkmkstart AAAAAAAARR}
{\bkmkend AAAAAAAARR}
\cell }{\cell }{\row }
{\xe \v PCD_CalcCRC\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_CalcCRC}
{\qr PCD_CalcCRC{\bkmkstart AAAAAAAARS}
{\bkmkend AAAAAAAARS}
\cell }{\cell }{\row }
{\xe \v PCD_Transmit\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Transmit}
{\qr PCD_Transmit{\bkmkstart AAAAAAAART}
{\bkmkend AAAAAAAART}
\cell }{\cell }{\row }
{\xe \v PCD_NoCmdChange\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_NoCmdChange}
{\qr PCD_NoCmdChange{\bkmkstart AAAAAAAARU}
{\bkmkend AAAAAAAARU}
\cell }{\cell }{\row }
{\xe \v PCD_Receive\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Receive}
{\qr PCD_Receive{\bkmkstart AAAAAAAARV}
{\bkmkend AAAAAAAARV}
\cell }{\cell }{\row }
{\xe \v PCD_Transceive\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Transceive}
{\qr PCD_Transceive{\bkmkstart AAAAAAAARW}
{\bkmkend AAAAAAAARW}
\cell }{\cell }{\row }
{\xe \v PCD_MFAuthent\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_MFAuthent}
{\qr PCD_MFAuthent{\bkmkstart AAAAAAAARX}
{\bkmkend AAAAAAAARX}
\cell }{\cell }{\row }
{\xe \v PCD_SoftReset\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_SoftReset}
{\qr PCD_SoftReset{\bkmkstart AAAAAAAARY}
{\bkmkend AAAAAAAARY}
\cell }{\cell }{\row }
}
}
{\xe \v PCD_Register\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Register}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::PCD_Register}}}
\par
{\bkmkstart AAAAAAAARZ}
{\bkmkend AAAAAAAARZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v CommandReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CommandReg}
{\qr CommandReg{\bkmkstart AAAAAAAASA}
{\bkmkend AAAAAAAASA}
\cell }{\cell }{\row }
{\xe \v ComIEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ComIEnReg}
{\qr ComIEnReg{\bkmkstart AAAAAAAASB}
{\bkmkend AAAAAAAASB}
\cell }{\cell }{\row }
{\xe \v DivIEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DivIEnReg}
{\qr DivIEnReg{\bkmkstart AAAAAAAASC}
{\bkmkend AAAAAAAASC}
\cell }{\cell }{\row }
{\xe \v ComIrqReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ComIrqReg}
{\qr ComIrqReg{\bkmkstart AAAAAAAASD}
{\bkmkend AAAAAAAASD}
\cell }{\cell }{\row }
{\xe \v DivIrqReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DivIrqReg}
{\qr DivIrqReg{\bkmkstart AAAAAAAASE}
{\bkmkend AAAAAAAASE}
\cell }{\cell }{\row }
{\xe \v ErrorReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ErrorReg}
{\qr ErrorReg{\bkmkstart AAAAAAAASF}
{\bkmkend AAAAAAAASF}
\cell }{\cell }{\row }
{\xe \v Status1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:Status1Reg}
{\qr Status1Reg{\bkmkstart AAAAAAAASG}
{\bkmkend AAAAAAAASG}
\cell }{\cell }{\row }
{\xe \v Status2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:Status2Reg}
{\qr Status2Reg{\bkmkstart AAAAAAAASH}
{\bkmkend AAAAAAAASH}
\cell }{\cell }{\row }
{\xe \v FIFODataReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:FIFODataReg}
{\qr FIFODataReg{\bkmkstart AAAAAAAASI}
{\bkmkend AAAAAAAASI}
\cell }{\cell }{\row }
{\xe \v FIFOLevelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:FIFOLevelReg}
{\qr FIFOLevelReg{\bkmkstart AAAAAAAASJ}
{\bkmkend AAAAAAAASJ}
\cell }{\cell }{\row }
{\xe \v WaterLevelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:WaterLevelReg}
{\qr WaterLevelReg{\bkmkstart AAAAAAAASK}
{\bkmkend AAAAAAAASK}
\cell }{\cell }{\row }
{\xe \v ControlReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ControlReg}
{\qr ControlReg{\bkmkstart AAAAAAAASL}
{\bkmkend AAAAAAAASL}
\cell }{\cell }{\row }
{\xe \v BitFramingReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:BitFramingReg}
{\qr BitFramingReg{\bkmkstart AAAAAAAASM}
{\bkmkend AAAAAAAASM}
\cell }{\cell }{\row }
{\xe \v CollReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CollReg}
{\qr CollReg{\bkmkstart AAAAAAAASN}
{\bkmkend AAAAAAAASN}
\cell }{\cell }{\row }
{\xe \v ModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModeReg}
{\qr ModeReg{\bkmkstart AAAAAAAASO}
{\bkmkend AAAAAAAASO}
\cell }{\cell }{\row }
{\xe \v TxModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxModeReg}
{\qr TxModeReg{\bkmkstart AAAAAAAASP}
{\bkmkend AAAAAAAASP}
\cell }{\cell }{\row }
{\xe \v RxModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxModeReg}
{\qr RxModeReg{\bkmkstart AAAAAAAASQ}
{\bkmkend AAAAAAAASQ}
\cell }{\cell }{\row }
{\xe \v TxControlReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxControlReg}
{\qr TxControlReg{\bkmkstart AAAAAAAASR}
{\bkmkend AAAAAAAASR}
\cell }{\cell }{\row }
{\xe \v TxASKReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxASKReg}
{\qr TxASKReg{\bkmkstart AAAAAAAASS}
{\bkmkend AAAAAAAASS}
\cell }{\cell }{\row }
{\xe \v TxSelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxSelReg}
{\qr TxSelReg{\bkmkstart AAAAAAAAST}
{\bkmkend AAAAAAAAST}
\cell }{\cell }{\row }
{\xe \v RxSelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxSelReg}
{\qr RxSelReg{\bkmkstart AAAAAAAASU}
{\bkmkend AAAAAAAASU}
\cell }{\cell }{\row }
{\xe \v RxThresholdReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxThresholdReg}
{\qr RxThresholdReg{\bkmkstart AAAAAAAASV}
{\bkmkend AAAAAAAASV}
\cell }{\cell }{\row }
{\xe \v DemodReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DemodReg}
{\qr DemodReg{\bkmkstart AAAAAAAASW}
{\bkmkend AAAAAAAASW}
\cell }{\cell }{\row }
{\xe \v MfTxReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MfTxReg}
{\qr MfTxReg{\bkmkstart AAAAAAAASX}
{\bkmkend AAAAAAAASX}
\cell }{\cell }{\row }
{\xe \v MfRxReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MfRxReg}
{\qr MfRxReg{\bkmkstart AAAAAAAASY}
{\bkmkend AAAAAAAASY}
\cell }{\cell }{\row }
{\xe \v SerialSpeedReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:SerialSpeedReg}
{\qr SerialSpeedReg{\bkmkstart AAAAAAAASZ}
{\bkmkend AAAAAAAASZ}
\cell }{\cell }{\row }
{\xe \v CRCResultRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CRCResultRegH}
{\qr CRCResultRegH{\bkmkstart AAAAAAAATA}
{\bkmkend AAAAAAAATA}
\cell }{\cell }{\row }
{\xe \v CRCResultRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CRCResultRegL}
{\qr CRCResultRegL{\bkmkstart AAAAAAAATB}
{\bkmkend AAAAAAAATB}
\cell }{\cell }{\row }
{\xe \v ModWidthReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModWidthReg}
{\qr ModWidthReg{\bkmkstart AAAAAAAATC}
{\bkmkend AAAAAAAATC}
\cell }{\cell }{\row }
{\xe \v RFCfgReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RFCfgReg}
{\qr RFCfgReg{\bkmkstart AAAAAAAATD}
{\bkmkend AAAAAAAATD}
\cell }{\cell }{\row }
{\xe \v GsNReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:GsNReg}
{\qr GsNReg{\bkmkstart AAAAAAAATE}
{\bkmkend AAAAAAAATE}
\cell }{\cell }{\row }
{\xe \v CWGsPReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CWGsPReg}
{\qr CWGsPReg{\bkmkstart AAAAAAAATF}
{\bkmkend AAAAAAAATF}
\cell }{\cell }{\row }
{\xe \v ModGsPReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModGsPReg}
{\qr ModGsPReg{\bkmkstart AAAAAAAATG}
{\bkmkend AAAAAAAATG}
\cell }{\cell }{\row }
{\xe \v TModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TModeReg}
{\qr TModeReg{\bkmkstart AAAAAAAATH}
{\bkmkend AAAAAAAATH}
\cell }{\cell }{\row }
{\xe \v TPrescalerReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TPrescalerReg}
{\qr TPrescalerReg{\bkmkstart AAAAAAAATI}
{\bkmkend AAAAAAAATI}
\cell }{\cell }{\row }
{\xe \v TReloadRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TReloadRegH}
{\qr TReloadRegH{\bkmkstart AAAAAAAATJ}
{\bkmkend AAAAAAAATJ}
\cell }{\cell }{\row }
{\xe \v TReloadRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TReloadRegL}
{\qr TReloadRegL{\bkmkstart AAAAAAAATK}
{\bkmkend AAAAAAAATK}
\cell }{\cell }{\row }
{\xe \v TCounterValueRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TCounterValueRegH}
{\qr TCounterValueRegH{\bkmkstart AAAAAAAATL}
{\bkmkend AAAAAAAATL}
\cell }{\cell }{\row }
{\xe \v TCounterValueRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TCounterValueRegL}
{\qr TCounterValueRegL{\bkmkstart AAAAAAAATM}
{\bkmkend AAAAAAAATM}
\cell }{\cell }{\row }
{\xe \v TestSel1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestSel1Reg}
{\qr TestSel1Reg{\bkmkstart AAAAAAAATN}
{\bkmkend AAAAAAAATN}
\cell }{\cell }{\row }
{\xe \v TestSel2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestSel2Reg}
{\qr TestSel2Reg{\bkmkstart AAAAAAAATO}
{\bkmkend AAAAAAAATO}
\cell }{\cell }{\row }
{\xe \v TestPinEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestPinEnReg}
{\qr TestPinEnReg{\bkmkstart AAAAAAAATP}
{\bkmkend AAAAAAAATP}
\cell }{\cell }{\row }
{\xe \v TestPinValueReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestPinValueReg}
{\qr TestPinValueReg{\bkmkstart AAAAAAAATQ}
{\bkmkend AAAAAAAATQ}
\cell }{\cell }{\row }
{\xe \v TestBusReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestBusReg}
{\qr TestBusReg{\bkmkstart AAAAAAAATR}
{\bkmkend AAAAAAAATR}
\cell }{\cell }{\row }
{\xe \v AutoTestReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:AutoTestReg}
{\qr AutoTestReg{\bkmkstart AAAAAAAATS}
{\bkmkend AAAAAAAATS}
\cell }{\cell }{\row }
{\xe \v VersionReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:VersionReg}
{\qr VersionReg{\bkmkstart AAAAAAAATT}
{\bkmkend AAAAAAAATT}
\cell }{\cell }{\row }
{\xe \v AnalogTestReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:AnalogTestReg}
{\qr AnalogTestReg{\bkmkstart AAAAAAAATU}
{\bkmkend AAAAAAAATU}
\cell }{\cell }{\row }
{\xe \v TestDAC1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestDAC1Reg}
{\qr TestDAC1Reg{\bkmkstart AAAAAAAATV}
{\bkmkend AAAAAAAATV}
\cell }{\cell }{\row }
{\xe \v TestDAC2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestDAC2Reg}
{\qr TestDAC2Reg{\bkmkstart AAAAAAAATW}
{\bkmkend AAAAAAAATW}
\cell }{\cell }{\row }
{\xe \v TestADCReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestADCReg}
{\qr TestADCReg{\bkmkstart AAAAAAAATX}
{\bkmkend AAAAAAAATX}
\cell }{\cell }{\row }
{\xe \v CommandReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CommandReg}
{\qr CommandReg{\bkmkstart AAAAAAAASA}
{\bkmkend AAAAAAAASA}
\cell }{\cell }{\row }
{\xe \v ComIEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ComIEnReg}
{\qr ComIEnReg{\bkmkstart AAAAAAAASB}
{\bkmkend AAAAAAAASB}
\cell }{\cell }{\row }
{\xe \v DivIEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DivIEnReg}
{\qr DivIEnReg{\bkmkstart AAAAAAAASC}
{\bkmkend AAAAAAAASC}
\cell }{\cell }{\row }
{\xe \v ComIrqReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ComIrqReg}
{\qr ComIrqReg{\bkmkstart AAAAAAAASD}
{\bkmkend AAAAAAAASD}
\cell }{\cell }{\row }
{\xe \v DivIrqReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DivIrqReg}
{\qr DivIrqReg{\bkmkstart AAAAAAAASE}
{\bkmkend AAAAAAAASE}
\cell }{\cell }{\row }
{\xe \v ErrorReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ErrorReg}
{\qr ErrorReg{\bkmkstart AAAAAAAASF}
{\bkmkend AAAAAAAASF}
\cell }{\cell }{\row }
{\xe \v Status1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:Status1Reg}
{\qr Status1Reg{\bkmkstart AAAAAAAASG}
{\bkmkend AAAAAAAASG}
\cell }{\cell }{\row }
{\xe \v Status2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:Status2Reg}
{\qr Status2Reg{\bkmkstart AAAAAAAASH}
{\bkmkend AAAAAAAASH}
\cell }{\cell }{\row }
{\xe \v FIFODataReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:FIFODataReg}
{\qr FIFODataReg{\bkmkstart AAAAAAAASI}
{\bkmkend AAAAAAAASI}
\cell }{\cell }{\row }
{\xe \v FIFOLevelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:FIFOLevelReg}
{\qr FIFOLevelReg{\bkmkstart AAAAAAAASJ}
{\bkmkend AAAAAAAASJ}
\cell }{\cell }{\row }
{\xe \v WaterLevelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:WaterLevelReg}
{\qr WaterLevelReg{\bkmkstart AAAAAAAASK}
{\bkmkend AAAAAAAASK}
\cell }{\cell }{\row }
{\xe \v ControlReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ControlReg}
{\qr ControlReg{\bkmkstart AAAAAAAASL}
{\bkmkend AAAAAAAASL}
\cell }{\cell }{\row }
{\xe \v BitFramingReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:BitFramingReg}
{\qr BitFramingReg{\bkmkstart AAAAAAAASM}
{\bkmkend AAAAAAAASM}
\cell }{\cell }{\row }
{\xe \v CollReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CollReg}
{\qr CollReg{\bkmkstart AAAAAAAASN}
{\bkmkend AAAAAAAASN}
\cell }{\cell }{\row }
{\xe \v ModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModeReg}
{\qr ModeReg{\bkmkstart AAAAAAAASO}
{\bkmkend AAAAAAAASO}
\cell }{\cell }{\row }
{\xe \v TxModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxModeReg}
{\qr TxModeReg{\bkmkstart AAAAAAAASP}
{\bkmkend AAAAAAAASP}
\cell }{\cell }{\row }
{\xe \v RxModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxModeReg}
{\qr RxModeReg{\bkmkstart AAAAAAAASQ}
{\bkmkend AAAAAAAASQ}
\cell }{\cell }{\row }
{\xe \v TxControlReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxControlReg}
{\qr TxControlReg{\bkmkstart AAAAAAAASR}
{\bkmkend AAAAAAAASR}
\cell }{\cell }{\row }
{\xe \v TxASKReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxASKReg}
{\qr TxASKReg{\bkmkstart AAAAAAAASS}
{\bkmkend AAAAAAAASS}
\cell }{\cell }{\row }
{\xe \v TxSelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxSelReg}
{\qr TxSelReg{\bkmkstart AAAAAAAAST}
{\bkmkend AAAAAAAAST}
\cell }{\cell }{\row }
{\xe \v RxSelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxSelReg}
{\qr RxSelReg{\bkmkstart AAAAAAAASU}
{\bkmkend AAAAAAAASU}
\cell }{\cell }{\row }
{\xe \v RxThresholdReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxThresholdReg}
{\qr RxThresholdReg{\bkmkstart AAAAAAAASV}
{\bkmkend AAAAAAAASV}
\cell }{\cell }{\row }
{\xe \v DemodReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DemodReg}
{\qr DemodReg{\bkmkstart AAAAAAAASW}
{\bkmkend AAAAAAAASW}
\cell }{\cell }{\row }
{\xe \v MfTxReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MfTxReg}
{\qr MfTxReg{\bkmkstart AAAAAAAASX}
{\bkmkend AAAAAAAASX}
\cell }{\cell }{\row }
{\xe \v MfRxReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MfRxReg}
{\qr MfRxReg{\bkmkstart AAAAAAAASY}
{\bkmkend AAAAAAAASY}
\cell }{\cell }{\row }
{\xe \v SerialSpeedReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:SerialSpeedReg}
{\qr SerialSpeedReg{\bkmkstart AAAAAAAASZ}
{\bkmkend AAAAAAAASZ}
\cell }{\cell }{\row }
{\xe \v CRCResultRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CRCResultRegH}
{\qr CRCResultRegH{\bkmkstart AAAAAAAATA}
{\bkmkend AAAAAAAATA}
\cell }{\cell }{\row }
{\xe \v CRCResultRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CRCResultRegL}
{\qr CRCResultRegL{\bkmkstart AAAAAAAATB}
{\bkmkend AAAAAAAATB}
\cell }{\cell }{\row }
{\xe \v ModWidthReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModWidthReg}
{\qr ModWidthReg{\bkmkstart AAAAAAAATC}
{\bkmkend AAAAAAAATC}
\cell }{\cell }{\row }
{\xe \v RFCfgReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RFCfgReg}
{\qr RFCfgReg{\bkmkstart AAAAAAAATD}
{\bkmkend AAAAAAAATD}
\cell }{\cell }{\row }
{\xe \v GsNReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:GsNReg}
{\qr GsNReg{\bkmkstart AAAAAAAATE}
{\bkmkend AAAAAAAATE}
\cell }{\cell }{\row }
{\xe \v CWGsPReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CWGsPReg}
{\qr CWGsPReg{\bkmkstart AAAAAAAATF}
{\bkmkend AAAAAAAATF}
\cell }{\cell }{\row }
{\xe \v ModGsPReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModGsPReg}
{\qr ModGsPReg{\bkmkstart AAAAAAAATG}
{\bkmkend AAAAAAAATG}
\cell }{\cell }{\row }
{\xe \v TModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TModeReg}
{\qr TModeReg{\bkmkstart AAAAAAAATH}
{\bkmkend AAAAAAAATH}
\cell }{\cell }{\row }
{\xe \v TPrescalerReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TPrescalerReg}
{\qr TPrescalerReg{\bkmkstart AAAAAAAATI}
{\bkmkend AAAAAAAATI}
\cell }{\cell }{\row }
{\xe \v TReloadRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TReloadRegH}
{\qr TReloadRegH{\bkmkstart AAAAAAAATJ}
{\bkmkend AAAAAAAATJ}
\cell }{\cell }{\row }
{\xe \v TReloadRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TReloadRegL}
{\qr TReloadRegL{\bkmkstart AAAAAAAATK}
{\bkmkend AAAAAAAATK}
\cell }{\cell }{\row }
{\xe \v TCounterValueRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TCounterValueRegH}
{\qr TCounterValueRegH{\bkmkstart AAAAAAAATL}
{\bkmkend AAAAAAAATL}
\cell }{\cell }{\row }
{\xe \v TCounterValueRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TCounterValueRegL}
{\qr TCounterValueRegL{\bkmkstart AAAAAAAATM}
{\bkmkend AAAAAAAATM}
\cell }{\cell }{\row }
{\xe \v TestSel1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestSel1Reg}
{\qr TestSel1Reg{\bkmkstart AAAAAAAATN}
{\bkmkend AAAAAAAATN}
\cell }{\cell }{\row }
{\xe \v TestSel2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestSel2Reg}
{\qr TestSel2Reg{\bkmkstart AAAAAAAATO}
{\bkmkend AAAAAAAATO}
\cell }{\cell }{\row }
{\xe \v TestPinEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestPinEnReg}
{\qr TestPinEnReg{\bkmkstart AAAAAAAATP}
{\bkmkend AAAAAAAATP}
\cell }{\cell }{\row }
{\xe \v TestPinValueReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestPinValueReg}
{\qr TestPinValueReg{\bkmkstart AAAAAAAATQ}
{\bkmkend AAAAAAAATQ}
\cell }{\cell }{\row }
{\xe \v TestBusReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestBusReg}
{\qr TestBusReg{\bkmkstart AAAAAAAATR}
{\bkmkend AAAAAAAATR}
\cell }{\cell }{\row }
{\xe \v AutoTestReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:AutoTestReg}
{\qr AutoTestReg{\bkmkstart AAAAAAAATS}
{\bkmkend AAAAAAAATS}
\cell }{\cell }{\row }
{\xe \v VersionReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:VersionReg}
{\qr VersionReg{\bkmkstart AAAAAAAATT}
{\bkmkend AAAAAAAATT}
\cell }{\cell }{\row }
{\xe \v AnalogTestReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:AnalogTestReg}
{\qr AnalogTestReg{\bkmkstart AAAAAAAATU}
{\bkmkend AAAAAAAATU}
\cell }{\cell }{\row }
{\xe \v TestDAC1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestDAC1Reg}
{\qr TestDAC1Reg{\bkmkstart AAAAAAAATV}
{\bkmkend AAAAAAAATV}
\cell }{\cell }{\row }
{\xe \v TestDAC2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestDAC2Reg}
{\qr TestDAC2Reg{\bkmkstart AAAAAAAATW}
{\bkmkend AAAAAAAATW}
\cell }{\cell }{\row }
{\xe \v TestADCReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestADCReg}
{\qr TestADCReg{\bkmkstart AAAAAAAATX}
{\bkmkend AAAAAAAATX}
\cell }{\cell }{\row }
}
}
{\xe \v PCD_Register\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Register}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::PCD_Register}}}
\par
{\bkmkstart AAAAAAAARZ}
{\bkmkend AAAAAAAARZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v CommandReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CommandReg}
{\qr CommandReg{\bkmkstart AAAAAAAASA}
{\bkmkend AAAAAAAASA}
\cell }{\cell }{\row }
{\xe \v ComIEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ComIEnReg}
{\qr ComIEnReg{\bkmkstart AAAAAAAASB}
{\bkmkend AAAAAAAASB}
\cell }{\cell }{\row }
{\xe \v DivIEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DivIEnReg}
{\qr DivIEnReg{\bkmkstart AAAAAAAASC}
{\bkmkend AAAAAAAASC}
\cell }{\cell }{\row }
{\xe \v ComIrqReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ComIrqReg}
{\qr ComIrqReg{\bkmkstart AAAAAAAASD}
{\bkmkend AAAAAAAASD}
\cell }{\cell }{\row }
{\xe \v DivIrqReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DivIrqReg}
{\qr DivIrqReg{\bkmkstart AAAAAAAASE}
{\bkmkend AAAAAAAASE}
\cell }{\cell }{\row }
{\xe \v ErrorReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ErrorReg}
{\qr ErrorReg{\bkmkstart AAAAAAAASF}
{\bkmkend AAAAAAAASF}
\cell }{\cell }{\row }
{\xe \v Status1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:Status1Reg}
{\qr Status1Reg{\bkmkstart AAAAAAAASG}
{\bkmkend AAAAAAAASG}
\cell }{\cell }{\row }
{\xe \v Status2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:Status2Reg}
{\qr Status2Reg{\bkmkstart AAAAAAAASH}
{\bkmkend AAAAAAAASH}
\cell }{\cell }{\row }
{\xe \v FIFODataReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:FIFODataReg}
{\qr FIFODataReg{\bkmkstart AAAAAAAASI}
{\bkmkend AAAAAAAASI}
\cell }{\cell }{\row }
{\xe \v FIFOLevelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:FIFOLevelReg}
{\qr FIFOLevelReg{\bkmkstart AAAAAAAASJ}
{\bkmkend AAAAAAAASJ}
\cell }{\cell }{\row }
{\xe \v WaterLevelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:WaterLevelReg}
{\qr WaterLevelReg{\bkmkstart AAAAAAAASK}
{\bkmkend AAAAAAAASK}
\cell }{\cell }{\row }
{\xe \v ControlReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ControlReg}
{\qr ControlReg{\bkmkstart AAAAAAAASL}
{\bkmkend AAAAAAAASL}
\cell }{\cell }{\row }
{\xe \v BitFramingReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:BitFramingReg}
{\qr BitFramingReg{\bkmkstart AAAAAAAASM}
{\bkmkend AAAAAAAASM}
\cell }{\cell }{\row }
{\xe \v CollReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CollReg}
{\qr CollReg{\bkmkstart AAAAAAAASN}
{\bkmkend AAAAAAAASN}
\cell }{\cell }{\row }
{\xe \v ModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModeReg}
{\qr ModeReg{\bkmkstart AAAAAAAASO}
{\bkmkend AAAAAAAASO}
\cell }{\cell }{\row }
{\xe \v TxModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxModeReg}
{\qr TxModeReg{\bkmkstart AAAAAAAASP}
{\bkmkend AAAAAAAASP}
\cell }{\cell }{\row }
{\xe \v RxModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxModeReg}
{\qr RxModeReg{\bkmkstart AAAAAAAASQ}
{\bkmkend AAAAAAAASQ}
\cell }{\cell }{\row }
{\xe \v TxControlReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxControlReg}
{\qr TxControlReg{\bkmkstart AAAAAAAASR}
{\bkmkend AAAAAAAASR}
\cell }{\cell }{\row }
{\xe \v TxASKReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxASKReg}
{\qr TxASKReg{\bkmkstart AAAAAAAASS}
{\bkmkend AAAAAAAASS}
\cell }{\cell }{\row }
{\xe \v TxSelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxSelReg}
{\qr TxSelReg{\bkmkstart AAAAAAAAST}
{\bkmkend AAAAAAAAST}
\cell }{\cell }{\row }
{\xe \v RxSelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxSelReg}
{\qr RxSelReg{\bkmkstart AAAAAAAASU}
{\bkmkend AAAAAAAASU}
\cell }{\cell }{\row }
{\xe \v RxThresholdReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxThresholdReg}
{\qr RxThresholdReg{\bkmkstart AAAAAAAASV}
{\bkmkend AAAAAAAASV}
\cell }{\cell }{\row }
{\xe \v DemodReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DemodReg}
{\qr DemodReg{\bkmkstart AAAAAAAASW}
{\bkmkend AAAAAAAASW}
\cell }{\cell }{\row }
{\xe \v MfTxReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MfTxReg}
{\qr MfTxReg{\bkmkstart AAAAAAAASX}
{\bkmkend AAAAAAAASX}
\cell }{\cell }{\row }
{\xe \v MfRxReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MfRxReg}
{\qr MfRxReg{\bkmkstart AAAAAAAASY}
{\bkmkend AAAAAAAASY}
\cell }{\cell }{\row }
{\xe \v SerialSpeedReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:SerialSpeedReg}
{\qr SerialSpeedReg{\bkmkstart AAAAAAAASZ}
{\bkmkend AAAAAAAASZ}
\cell }{\cell }{\row }
{\xe \v CRCResultRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CRCResultRegH}
{\qr CRCResultRegH{\bkmkstart AAAAAAAATA}
{\bkmkend AAAAAAAATA}
\cell }{\cell }{\row }
{\xe \v CRCResultRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CRCResultRegL}
{\qr CRCResultRegL{\bkmkstart AAAAAAAATB}
{\bkmkend AAAAAAAATB}
\cell }{\cell }{\row }
{\xe \v ModWidthReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModWidthReg}
{\qr ModWidthReg{\bkmkstart AAAAAAAATC}
{\bkmkend AAAAAAAATC}
\cell }{\cell }{\row }
{\xe \v RFCfgReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RFCfgReg}
{\qr RFCfgReg{\bkmkstart AAAAAAAATD}
{\bkmkend AAAAAAAATD}
\cell }{\cell }{\row }
{\xe \v GsNReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:GsNReg}
{\qr GsNReg{\bkmkstart AAAAAAAATE}
{\bkmkend AAAAAAAATE}
\cell }{\cell }{\row }
{\xe \v CWGsPReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CWGsPReg}
{\qr CWGsPReg{\bkmkstart AAAAAAAATF}
{\bkmkend AAAAAAAATF}
\cell }{\cell }{\row }
{\xe \v ModGsPReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModGsPReg}
{\qr ModGsPReg{\bkmkstart AAAAAAAATG}
{\bkmkend AAAAAAAATG}
\cell }{\cell }{\row }
{\xe \v TModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TModeReg}
{\qr TModeReg{\bkmkstart AAAAAAAATH}
{\bkmkend AAAAAAAATH}
\cell }{\cell }{\row }
{\xe \v TPrescalerReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TPrescalerReg}
{\qr TPrescalerReg{\bkmkstart AAAAAAAATI}
{\bkmkend AAAAAAAATI}
\cell }{\cell }{\row }
{\xe \v TReloadRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TReloadRegH}
{\qr TReloadRegH{\bkmkstart AAAAAAAATJ}
{\bkmkend AAAAAAAATJ}
\cell }{\cell }{\row }
{\xe \v TReloadRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TReloadRegL}
{\qr TReloadRegL{\bkmkstart AAAAAAAATK}
{\bkmkend AAAAAAAATK}
\cell }{\cell }{\row }
{\xe \v TCounterValueRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TCounterValueRegH}
{\qr TCounterValueRegH{\bkmkstart AAAAAAAATL}
{\bkmkend AAAAAAAATL}
\cell }{\cell }{\row }
{\xe \v TCounterValueRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TCounterValueRegL}
{\qr TCounterValueRegL{\bkmkstart AAAAAAAATM}
{\bkmkend AAAAAAAATM}
\cell }{\cell }{\row }
{\xe \v TestSel1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestSel1Reg}
{\qr TestSel1Reg{\bkmkstart AAAAAAAATN}
{\bkmkend AAAAAAAATN}
\cell }{\cell }{\row }
{\xe \v TestSel2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestSel2Reg}
{\qr TestSel2Reg{\bkmkstart AAAAAAAATO}
{\bkmkend AAAAAAAATO}
\cell }{\cell }{\row }
{\xe \v TestPinEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestPinEnReg}
{\qr TestPinEnReg{\bkmkstart AAAAAAAATP}
{\bkmkend AAAAAAAATP}
\cell }{\cell }{\row }
{\xe \v TestPinValueReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestPinValueReg}
{\qr TestPinValueReg{\bkmkstart AAAAAAAATQ}
{\bkmkend AAAAAAAATQ}
\cell }{\cell }{\row }
{\xe \v TestBusReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestBusReg}
{\qr TestBusReg{\bkmkstart AAAAAAAATR}
{\bkmkend AAAAAAAATR}
\cell }{\cell }{\row }
{\xe \v AutoTestReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:AutoTestReg}
{\qr AutoTestReg{\bkmkstart AAAAAAAATS}
{\bkmkend AAAAAAAATS}
\cell }{\cell }{\row }
{\xe \v VersionReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:VersionReg}
{\qr VersionReg{\bkmkstart AAAAAAAATT}
{\bkmkend AAAAAAAATT}
\cell }{\cell }{\row }
{\xe \v AnalogTestReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:AnalogTestReg}
{\qr AnalogTestReg{\bkmkstart AAAAAAAATU}
{\bkmkend AAAAAAAATU}
\cell }{\cell }{\row }
{\xe \v TestDAC1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestDAC1Reg}
{\qr TestDAC1Reg{\bkmkstart AAAAAAAATV}
{\bkmkend AAAAAAAATV}
\cell }{\cell }{\row }
{\xe \v TestDAC2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestDAC2Reg}
{\qr TestDAC2Reg{\bkmkstart AAAAAAAATW}
{\bkmkend AAAAAAAATW}
\cell }{\cell }{\row }
{\xe \v TestADCReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestADCReg}
{\qr TestADCReg{\bkmkstart AAAAAAAATX}
{\bkmkend AAAAAAAATX}
\cell }{\cell }{\row }
{\xe \v CommandReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CommandReg}
{\qr CommandReg{\bkmkstart AAAAAAAASA}
{\bkmkend AAAAAAAASA}
\cell }{\cell }{\row }
{\xe \v ComIEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ComIEnReg}
{\qr ComIEnReg{\bkmkstart AAAAAAAASB}
{\bkmkend AAAAAAAASB}
\cell }{\cell }{\row }
{\xe \v DivIEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DivIEnReg}
{\qr DivIEnReg{\bkmkstart AAAAAAAASC}
{\bkmkend AAAAAAAASC}
\cell }{\cell }{\row }
{\xe \v ComIrqReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ComIrqReg}
{\qr ComIrqReg{\bkmkstart AAAAAAAASD}
{\bkmkend AAAAAAAASD}
\cell }{\cell }{\row }
{\xe \v DivIrqReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DivIrqReg}
{\qr DivIrqReg{\bkmkstart AAAAAAAASE}
{\bkmkend AAAAAAAASE}
\cell }{\cell }{\row }
{\xe \v ErrorReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ErrorReg}
{\qr ErrorReg{\bkmkstart AAAAAAAASF}
{\bkmkend AAAAAAAASF}
\cell }{\cell }{\row }
{\xe \v Status1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:Status1Reg}
{\qr Status1Reg{\bkmkstart AAAAAAAASG}
{\bkmkend AAAAAAAASG}
\cell }{\cell }{\row }
{\xe \v Status2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:Status2Reg}
{\qr Status2Reg{\bkmkstart AAAAAAAASH}
{\bkmkend AAAAAAAASH}
\cell }{\cell }{\row }
{\xe \v FIFODataReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:FIFODataReg}
{\qr FIFODataReg{\bkmkstart AAAAAAAASI}
{\bkmkend AAAAAAAASI}
\cell }{\cell }{\row }
{\xe \v FIFOLevelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:FIFOLevelReg}
{\qr FIFOLevelReg{\bkmkstart AAAAAAAASJ}
{\bkmkend AAAAAAAASJ}
\cell }{\cell }{\row }
{\xe \v WaterLevelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:WaterLevelReg}
{\qr WaterLevelReg{\bkmkstart AAAAAAAASK}
{\bkmkend AAAAAAAASK}
\cell }{\cell }{\row }
{\xe \v ControlReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ControlReg}
{\qr ControlReg{\bkmkstart AAAAAAAASL}
{\bkmkend AAAAAAAASL}
\cell }{\cell }{\row }
{\xe \v BitFramingReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:BitFramingReg}
{\qr BitFramingReg{\bkmkstart AAAAAAAASM}
{\bkmkend AAAAAAAASM}
\cell }{\cell }{\row }
{\xe \v CollReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CollReg}
{\qr CollReg{\bkmkstart AAAAAAAASN}
{\bkmkend AAAAAAAASN}
\cell }{\cell }{\row }
{\xe \v ModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModeReg}
{\qr ModeReg{\bkmkstart AAAAAAAASO}
{\bkmkend AAAAAAAASO}
\cell }{\cell }{\row }
{\xe \v TxModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxModeReg}
{\qr TxModeReg{\bkmkstart AAAAAAAASP}
{\bkmkend AAAAAAAASP}
\cell }{\cell }{\row }
{\xe \v RxModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxModeReg}
{\qr RxModeReg{\bkmkstart AAAAAAAASQ}
{\bkmkend AAAAAAAASQ}
\cell }{\cell }{\row }
{\xe \v TxControlReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxControlReg}
{\qr TxControlReg{\bkmkstart AAAAAAAASR}
{\bkmkend AAAAAAAASR}
\cell }{\cell }{\row }
{\xe \v TxASKReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxASKReg}
{\qr TxASKReg{\bkmkstart AAAAAAAASS}
{\bkmkend AAAAAAAASS}
\cell }{\cell }{\row }
{\xe \v TxSelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TxSelReg}
{\qr TxSelReg{\bkmkstart AAAAAAAAST}
{\bkmkend AAAAAAAAST}
\cell }{\cell }{\row }
{\xe \v RxSelReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxSelReg}
{\qr RxSelReg{\bkmkstart AAAAAAAASU}
{\bkmkend AAAAAAAASU}
\cell }{\cell }{\row }
{\xe \v RxThresholdReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxThresholdReg}
{\qr RxThresholdReg{\bkmkstart AAAAAAAASV}
{\bkmkend AAAAAAAASV}
\cell }{\cell }{\row }
{\xe \v DemodReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:DemodReg}
{\qr DemodReg{\bkmkstart AAAAAAAASW}
{\bkmkend AAAAAAAASW}
\cell }{\cell }{\row }
{\xe \v MfTxReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MfTxReg}
{\qr MfTxReg{\bkmkstart AAAAAAAASX}
{\bkmkend AAAAAAAASX}
\cell }{\cell }{\row }
{\xe \v MfRxReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MfRxReg}
{\qr MfRxReg{\bkmkstart AAAAAAAASY}
{\bkmkend AAAAAAAASY}
\cell }{\cell }{\row }
{\xe \v SerialSpeedReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:SerialSpeedReg}
{\qr SerialSpeedReg{\bkmkstart AAAAAAAASZ}
{\bkmkend AAAAAAAASZ}
\cell }{\cell }{\row }
{\xe \v CRCResultRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CRCResultRegH}
{\qr CRCResultRegH{\bkmkstart AAAAAAAATA}
{\bkmkend AAAAAAAATA}
\cell }{\cell }{\row }
{\xe \v CRCResultRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CRCResultRegL}
{\qr CRCResultRegL{\bkmkstart AAAAAAAATB}
{\bkmkend AAAAAAAATB}
\cell }{\cell }{\row }
{\xe \v ModWidthReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModWidthReg}
{\qr ModWidthReg{\bkmkstart AAAAAAAATC}
{\bkmkend AAAAAAAATC}
\cell }{\cell }{\row }
{\xe \v RFCfgReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RFCfgReg}
{\qr RFCfgReg{\bkmkstart AAAAAAAATD}
{\bkmkend AAAAAAAATD}
\cell }{\cell }{\row }
{\xe \v GsNReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:GsNReg}
{\qr GsNReg{\bkmkstart AAAAAAAATE}
{\bkmkend AAAAAAAATE}
\cell }{\cell }{\row }
{\xe \v CWGsPReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:CWGsPReg}
{\qr CWGsPReg{\bkmkstart AAAAAAAATF}
{\bkmkend AAAAAAAATF}
\cell }{\cell }{\row }
{\xe \v ModGsPReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:ModGsPReg}
{\qr ModGsPReg{\bkmkstart AAAAAAAATG}
{\bkmkend AAAAAAAATG}
\cell }{\cell }{\row }
{\xe \v TModeReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TModeReg}
{\qr TModeReg{\bkmkstart AAAAAAAATH}
{\bkmkend AAAAAAAATH}
\cell }{\cell }{\row }
{\xe \v TPrescalerReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TPrescalerReg}
{\qr TPrescalerReg{\bkmkstart AAAAAAAATI}
{\bkmkend AAAAAAAATI}
\cell }{\cell }{\row }
{\xe \v TReloadRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TReloadRegH}
{\qr TReloadRegH{\bkmkstart AAAAAAAATJ}
{\bkmkend AAAAAAAATJ}
\cell }{\cell }{\row }
{\xe \v TReloadRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TReloadRegL}
{\qr TReloadRegL{\bkmkstart AAAAAAAATK}
{\bkmkend AAAAAAAATK}
\cell }{\cell }{\row }
{\xe \v TCounterValueRegH\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TCounterValueRegH}
{\qr TCounterValueRegH{\bkmkstart AAAAAAAATL}
{\bkmkend AAAAAAAATL}
\cell }{\cell }{\row }
{\xe \v TCounterValueRegL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TCounterValueRegL}
{\qr TCounterValueRegL{\bkmkstart AAAAAAAATM}
{\bkmkend AAAAAAAATM}
\cell }{\cell }{\row }
{\xe \v TestSel1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestSel1Reg}
{\qr TestSel1Reg{\bkmkstart AAAAAAAATN}
{\bkmkend AAAAAAAATN}
\cell }{\cell }{\row }
{\xe \v TestSel2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestSel2Reg}
{\qr TestSel2Reg{\bkmkstart AAAAAAAATO}
{\bkmkend AAAAAAAATO}
\cell }{\cell }{\row }
{\xe \v TestPinEnReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestPinEnReg}
{\qr TestPinEnReg{\bkmkstart AAAAAAAATP}
{\bkmkend AAAAAAAATP}
\cell }{\cell }{\row }
{\xe \v TestPinValueReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestPinValueReg}
{\qr TestPinValueReg{\bkmkstart AAAAAAAATQ}
{\bkmkend AAAAAAAATQ}
\cell }{\cell }{\row }
{\xe \v TestBusReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestBusReg}
{\qr TestBusReg{\bkmkstart AAAAAAAATR}
{\bkmkend AAAAAAAATR}
\cell }{\cell }{\row }
{\xe \v AutoTestReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:AutoTestReg}
{\qr AutoTestReg{\bkmkstart AAAAAAAATS}
{\bkmkend AAAAAAAATS}
\cell }{\cell }{\row }
{\xe \v VersionReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:VersionReg}
{\qr VersionReg{\bkmkstart AAAAAAAATT}
{\bkmkend AAAAAAAATT}
\cell }{\cell }{\row }
{\xe \v AnalogTestReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:AnalogTestReg}
{\qr AnalogTestReg{\bkmkstart AAAAAAAATU}
{\bkmkend AAAAAAAATU}
\cell }{\cell }{\row }
{\xe \v TestDAC1Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestDAC1Reg}
{\qr TestDAC1Reg{\bkmkstart AAAAAAAATV}
{\bkmkend AAAAAAAATV}
\cell }{\cell }{\row }
{\xe \v TestDAC2Reg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestDAC2Reg}
{\qr TestDAC2Reg{\bkmkstart AAAAAAAATW}
{\bkmkend AAAAAAAATW}
\cell }{\cell }{\row }
{\xe \v TestADCReg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:TestADCReg}
{\qr TestADCReg{\bkmkstart AAAAAAAATX}
{\bkmkend AAAAAAAATX}
\cell }{\cell }{\row }
}
}
{\xe \v PCD_RxGain\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_RxGain}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::PCD_RxGain}}}
\par
{\bkmkstart AAAAAAAATY}
{\bkmkend AAAAAAAATY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v RxGain_18dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_18dB}
{\qr RxGain_18dB{\bkmkstart AAAAAAAATZ}
{\bkmkend AAAAAAAATZ}
\cell }{\cell }{\row }
{\xe \v RxGain_23dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_23dB}
{\qr RxGain_23dB{\bkmkstart AAAAAAAAUA}
{\bkmkend AAAAAAAAUA}
\cell }{\cell }{\row }
{\xe \v RxGain_18dB_2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_18dB_2}
{\qr RxGain_18dB_2{\bkmkstart AAAAAAAAUB}
{\bkmkend AAAAAAAAUB}
\cell }{\cell }{\row }
{\xe \v RxGain_23dB_2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_23dB_2}
{\qr RxGain_23dB_2{\bkmkstart AAAAAAAAUC}
{\bkmkend AAAAAAAAUC}
\cell }{\cell }{\row }
{\xe \v RxGain_33dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_33dB}
{\qr RxGain_33dB{\bkmkstart AAAAAAAAUD}
{\bkmkend AAAAAAAAUD}
\cell }{\cell }{\row }
{\xe \v RxGain_38dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_38dB}
{\qr RxGain_38dB{\bkmkstart AAAAAAAAUE}
{\bkmkend AAAAAAAAUE}
\cell }{\cell }{\row }
{\xe \v RxGain_43dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_43dB}
{\qr RxGain_43dB{\bkmkstart AAAAAAAAUF}
{\bkmkend AAAAAAAAUF}
\cell }{\cell }{\row }
{\xe \v RxGain_48dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_48dB}
{\qr RxGain_48dB{\bkmkstart AAAAAAAAUG}
{\bkmkend AAAAAAAAUG}
\cell }{\cell }{\row }
{\xe \v RxGain_min\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_min}
{\qr RxGain_min{\bkmkstart AAAAAAAAUH}
{\bkmkend AAAAAAAAUH}
\cell }{\cell }{\row }
{\xe \v RxGain_avg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_avg}
{\qr RxGain_avg{\bkmkstart AAAAAAAAUI}
{\bkmkend AAAAAAAAUI}
\cell }{\cell }{\row }
{\xe \v RxGain_max\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_max}
{\qr RxGain_max{\bkmkstart AAAAAAAAUJ}
{\bkmkend AAAAAAAAUJ}
\cell }{\cell }{\row }
{\xe \v RxGain_18dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_18dB}
{\qr RxGain_18dB{\bkmkstart AAAAAAAATZ}
{\bkmkend AAAAAAAATZ}
\cell }{\cell }{\row }
{\xe \v RxGain_23dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_23dB}
{\qr RxGain_23dB{\bkmkstart AAAAAAAAUA}
{\bkmkend AAAAAAAAUA}
\cell }{\cell }{\row }
{\xe \v RxGain_18dB_2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_18dB_2}
{\qr RxGain_18dB_2{\bkmkstart AAAAAAAAUB}
{\bkmkend AAAAAAAAUB}
\cell }{\cell }{\row }
{\xe \v RxGain_23dB_2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_23dB_2}
{\qr RxGain_23dB_2{\bkmkstart AAAAAAAAUC}
{\bkmkend AAAAAAAAUC}
\cell }{\cell }{\row }
{\xe \v RxGain_33dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_33dB}
{\qr RxGain_33dB{\bkmkstart AAAAAAAAUD}
{\bkmkend AAAAAAAAUD}
\cell }{\cell }{\row }
{\xe \v RxGain_38dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_38dB}
{\qr RxGain_38dB{\bkmkstart AAAAAAAAUE}
{\bkmkend AAAAAAAAUE}
\cell }{\cell }{\row }
{\xe \v RxGain_43dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_43dB}
{\qr RxGain_43dB{\bkmkstart AAAAAAAAUF}
{\bkmkend AAAAAAAAUF}
\cell }{\cell }{\row }
{\xe \v RxGain_48dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_48dB}
{\qr RxGain_48dB{\bkmkstart AAAAAAAAUG}
{\bkmkend AAAAAAAAUG}
\cell }{\cell }{\row }
{\xe \v RxGain_min\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_min}
{\qr RxGain_min{\bkmkstart AAAAAAAAUH}
{\bkmkend AAAAAAAAUH}
\cell }{\cell }{\row }
{\xe \v RxGain_avg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_avg}
{\qr RxGain_avg{\bkmkstart AAAAAAAAUI}
{\bkmkend AAAAAAAAUI}
\cell }{\cell }{\row }
{\xe \v RxGain_max\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_max}
{\qr RxGain_max{\bkmkstart AAAAAAAAUJ}
{\bkmkend AAAAAAAAUJ}
\cell }{\cell }{\row }
}
}
{\xe \v PCD_RxGain\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_RxGain}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::PCD_RxGain}}}
\par
{\bkmkstart AAAAAAAATY}
{\bkmkend AAAAAAAATY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v RxGain_18dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_18dB}
{\qr RxGain_18dB{\bkmkstart AAAAAAAATZ}
{\bkmkend AAAAAAAATZ}
\cell }{\cell }{\row }
{\xe \v RxGain_23dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_23dB}
{\qr RxGain_23dB{\bkmkstart AAAAAAAAUA}
{\bkmkend AAAAAAAAUA}
\cell }{\cell }{\row }
{\xe \v RxGain_18dB_2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_18dB_2}
{\qr RxGain_18dB_2{\bkmkstart AAAAAAAAUB}
{\bkmkend AAAAAAAAUB}
\cell }{\cell }{\row }
{\xe \v RxGain_23dB_2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_23dB_2}
{\qr RxGain_23dB_2{\bkmkstart AAAAAAAAUC}
{\bkmkend AAAAAAAAUC}
\cell }{\cell }{\row }
{\xe \v RxGain_33dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_33dB}
{\qr RxGain_33dB{\bkmkstart AAAAAAAAUD}
{\bkmkend AAAAAAAAUD}
\cell }{\cell }{\row }
{\xe \v RxGain_38dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_38dB}
{\qr RxGain_38dB{\bkmkstart AAAAAAAAUE}
{\bkmkend AAAAAAAAUE}
\cell }{\cell }{\row }
{\xe \v RxGain_43dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_43dB}
{\qr RxGain_43dB{\bkmkstart AAAAAAAAUF}
{\bkmkend AAAAAAAAUF}
\cell }{\cell }{\row }
{\xe \v RxGain_48dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_48dB}
{\qr RxGain_48dB{\bkmkstart AAAAAAAAUG}
{\bkmkend AAAAAAAAUG}
\cell }{\cell }{\row }
{\xe \v RxGain_min\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_min}
{\qr RxGain_min{\bkmkstart AAAAAAAAUH}
{\bkmkend AAAAAAAAUH}
\cell }{\cell }{\row }
{\xe \v RxGain_avg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_avg}
{\qr RxGain_avg{\bkmkstart AAAAAAAAUI}
{\bkmkend AAAAAAAAUI}
\cell }{\cell }{\row }
{\xe \v RxGain_max\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_max}
{\qr RxGain_max{\bkmkstart AAAAAAAAUJ}
{\bkmkend AAAAAAAAUJ}
\cell }{\cell }{\row }
{\xe \v RxGain_18dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_18dB}
{\qr RxGain_18dB{\bkmkstart AAAAAAAATZ}
{\bkmkend AAAAAAAATZ}
\cell }{\cell }{\row }
{\xe \v RxGain_23dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_23dB}
{\qr RxGain_23dB{\bkmkstart AAAAAAAAUA}
{\bkmkend AAAAAAAAUA}
\cell }{\cell }{\row }
{\xe \v RxGain_18dB_2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_18dB_2}
{\qr RxGain_18dB_2{\bkmkstart AAAAAAAAUB}
{\bkmkend AAAAAAAAUB}
\cell }{\cell }{\row }
{\xe \v RxGain_23dB_2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_23dB_2}
{\qr RxGain_23dB_2{\bkmkstart AAAAAAAAUC}
{\bkmkend AAAAAAAAUC}
\cell }{\cell }{\row }
{\xe \v RxGain_33dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_33dB}
{\qr RxGain_33dB{\bkmkstart AAAAAAAAUD}
{\bkmkend AAAAAAAAUD}
\cell }{\cell }{\row }
{\xe \v RxGain_38dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_38dB}
{\qr RxGain_38dB{\bkmkstart AAAAAAAAUE}
{\bkmkend AAAAAAAAUE}
\cell }{\cell }{\row }
{\xe \v RxGain_43dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_43dB}
{\qr RxGain_43dB{\bkmkstart AAAAAAAAUF}
{\bkmkend AAAAAAAAUF}
\cell }{\cell }{\row }
{\xe \v RxGain_48dB\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_48dB}
{\qr RxGain_48dB{\bkmkstart AAAAAAAAUG}
{\bkmkend AAAAAAAAUG}
\cell }{\cell }{\row }
{\xe \v RxGain_min\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_min}
{\qr RxGain_min{\bkmkstart AAAAAAAAUH}
{\bkmkend AAAAAAAAUH}
\cell }{\cell }{\row }
{\xe \v RxGain_avg\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_avg}
{\qr RxGain_avg{\bkmkstart AAAAAAAAUI}
{\bkmkend AAAAAAAAUI}
\cell }{\cell }{\row }
{\xe \v RxGain_max\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:RxGain_max}
{\qr RxGain_max{\bkmkstart AAAAAAAAUJ}
{\bkmkend AAAAAAAAUJ}
\cell }{\cell }{\row }
}
}
{\xe \v PICC_Command\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_Command}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::PICC_Command}}}
\par
{\bkmkstart AAAAAAAAUK}
{\bkmkend AAAAAAAAUK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v PICC_CMD_REQA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_REQA}
{\qr PICC_CMD_REQA{\bkmkstart AAAAAAAAUL}
{\bkmkend AAAAAAAAUL}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_WUPA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_WUPA}
{\qr PICC_CMD_WUPA{\bkmkstart AAAAAAAAUM}
{\bkmkend AAAAAAAAUM}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_CT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_CT}
{\qr PICC_CMD_CT{\bkmkstart AAAAAAAAUN}
{\bkmkend AAAAAAAAUN}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL1\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL1}
{\qr PICC_CMD_SEL_CL1{\bkmkstart AAAAAAAAUO}
{\bkmkend AAAAAAAAUO}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL2}
{\qr PICC_CMD_SEL_CL2{\bkmkstart AAAAAAAAUP}
{\bkmkend AAAAAAAAUP}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL3\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL3}
{\qr PICC_CMD_SEL_CL3{\bkmkstart AAAAAAAAUQ}
{\bkmkend AAAAAAAAUQ}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_HLTA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_HLTA}
{\qr PICC_CMD_HLTA{\bkmkstart AAAAAAAAUR}
{\bkmkend AAAAAAAAUR}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_AUTH_KEY_A\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_AUTH_KEY_A}
{\qr PICC_CMD_MF_AUTH_KEY_A{\bkmkstart AAAAAAAAUS}
{\bkmkend AAAAAAAAUS}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_AUTH_KEY_B\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_AUTH_KEY_B}
{\qr PICC_CMD_MF_AUTH_KEY_B{\bkmkstart AAAAAAAAUT}
{\bkmkend AAAAAAAAUT}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_READ\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_READ}
{\qr PICC_CMD_MF_READ{\bkmkstart AAAAAAAAUU}
{\bkmkend AAAAAAAAUU}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_WRITE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_WRITE}
{\qr PICC_CMD_MF_WRITE{\bkmkstart AAAAAAAAUV}
{\bkmkend AAAAAAAAUV}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_DECREMENT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_DECREMENT}
{\qr PICC_CMD_MF_DECREMENT{\bkmkstart AAAAAAAAUW}
{\bkmkend AAAAAAAAUW}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_INCREMENT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_INCREMENT}
{\qr PICC_CMD_MF_INCREMENT{\bkmkstart AAAAAAAAUX}
{\bkmkend AAAAAAAAUX}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_RESTORE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_RESTORE}
{\qr PICC_CMD_MF_RESTORE{\bkmkstart AAAAAAAAUY}
{\bkmkend AAAAAAAAUY}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_TRANSFER\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_TRANSFER}
{\qr PICC_CMD_MF_TRANSFER{\bkmkstart AAAAAAAAUZ}
{\bkmkend AAAAAAAAUZ}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_UL_WRITE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_UL_WRITE}
{\qr PICC_CMD_UL_WRITE{\bkmkstart AAAAAAAAVA}
{\bkmkend AAAAAAAAVA}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_REQA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_REQA}
{\qr PICC_CMD_REQA{\bkmkstart AAAAAAAAUL}
{\bkmkend AAAAAAAAUL}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_WUPA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_WUPA}
{\qr PICC_CMD_WUPA{\bkmkstart AAAAAAAAUM}
{\bkmkend AAAAAAAAUM}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_CT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_CT}
{\qr PICC_CMD_CT{\bkmkstart AAAAAAAAUN}
{\bkmkend AAAAAAAAUN}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL1\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL1}
{\qr PICC_CMD_SEL_CL1{\bkmkstart AAAAAAAAUO}
{\bkmkend AAAAAAAAUO}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL2}
{\qr PICC_CMD_SEL_CL2{\bkmkstart AAAAAAAAUP}
{\bkmkend AAAAAAAAUP}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL3\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL3}
{\qr PICC_CMD_SEL_CL3{\bkmkstart AAAAAAAAUQ}
{\bkmkend AAAAAAAAUQ}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_HLTA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_HLTA}
{\qr PICC_CMD_HLTA{\bkmkstart AAAAAAAAUR}
{\bkmkend AAAAAAAAUR}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_AUTH_KEY_A\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_AUTH_KEY_A}
{\qr PICC_CMD_MF_AUTH_KEY_A{\bkmkstart AAAAAAAAUS}
{\bkmkend AAAAAAAAUS}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_AUTH_KEY_B\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_AUTH_KEY_B}
{\qr PICC_CMD_MF_AUTH_KEY_B{\bkmkstart AAAAAAAAUT}
{\bkmkend AAAAAAAAUT}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_READ\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_READ}
{\qr PICC_CMD_MF_READ{\bkmkstart AAAAAAAAUU}
{\bkmkend AAAAAAAAUU}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_WRITE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_WRITE}
{\qr PICC_CMD_MF_WRITE{\bkmkstart AAAAAAAAUV}
{\bkmkend AAAAAAAAUV}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_DECREMENT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_DECREMENT}
{\qr PICC_CMD_MF_DECREMENT{\bkmkstart AAAAAAAAUW}
{\bkmkend AAAAAAAAUW}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_INCREMENT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_INCREMENT}
{\qr PICC_CMD_MF_INCREMENT{\bkmkstart AAAAAAAAUX}
{\bkmkend AAAAAAAAUX}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_RESTORE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_RESTORE}
{\qr PICC_CMD_MF_RESTORE{\bkmkstart AAAAAAAAUY}
{\bkmkend AAAAAAAAUY}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_TRANSFER\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_TRANSFER}
{\qr PICC_CMD_MF_TRANSFER{\bkmkstart AAAAAAAAUZ}
{\bkmkend AAAAAAAAUZ}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_UL_WRITE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_UL_WRITE}
{\qr PICC_CMD_UL_WRITE{\bkmkstart AAAAAAAAVA}
{\bkmkend AAAAAAAAVA}
\cell }{\cell }{\row }
}
}
{\xe \v PICC_Command\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_Command}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::PICC_Command}}}
\par
{\bkmkstart AAAAAAAAUK}
{\bkmkend AAAAAAAAUK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v PICC_CMD_REQA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_REQA}
{\qr PICC_CMD_REQA{\bkmkstart AAAAAAAAUL}
{\bkmkend AAAAAAAAUL}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_WUPA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_WUPA}
{\qr PICC_CMD_WUPA{\bkmkstart AAAAAAAAUM}
{\bkmkend AAAAAAAAUM}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_CT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_CT}
{\qr PICC_CMD_CT{\bkmkstart AAAAAAAAUN}
{\bkmkend AAAAAAAAUN}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL1\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL1}
{\qr PICC_CMD_SEL_CL1{\bkmkstart AAAAAAAAUO}
{\bkmkend AAAAAAAAUO}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL2}
{\qr PICC_CMD_SEL_CL2{\bkmkstart AAAAAAAAUP}
{\bkmkend AAAAAAAAUP}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL3\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL3}
{\qr PICC_CMD_SEL_CL3{\bkmkstart AAAAAAAAUQ}
{\bkmkend AAAAAAAAUQ}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_HLTA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_HLTA}
{\qr PICC_CMD_HLTA{\bkmkstart AAAAAAAAUR}
{\bkmkend AAAAAAAAUR}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_AUTH_KEY_A\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_AUTH_KEY_A}
{\qr PICC_CMD_MF_AUTH_KEY_A{\bkmkstart AAAAAAAAUS}
{\bkmkend AAAAAAAAUS}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_AUTH_KEY_B\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_AUTH_KEY_B}
{\qr PICC_CMD_MF_AUTH_KEY_B{\bkmkstart AAAAAAAAUT}
{\bkmkend AAAAAAAAUT}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_READ\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_READ}
{\qr PICC_CMD_MF_READ{\bkmkstart AAAAAAAAUU}
{\bkmkend AAAAAAAAUU}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_WRITE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_WRITE}
{\qr PICC_CMD_MF_WRITE{\bkmkstart AAAAAAAAUV}
{\bkmkend AAAAAAAAUV}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_DECREMENT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_DECREMENT}
{\qr PICC_CMD_MF_DECREMENT{\bkmkstart AAAAAAAAUW}
{\bkmkend AAAAAAAAUW}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_INCREMENT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_INCREMENT}
{\qr PICC_CMD_MF_INCREMENT{\bkmkstart AAAAAAAAUX}
{\bkmkend AAAAAAAAUX}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_RESTORE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_RESTORE}
{\qr PICC_CMD_MF_RESTORE{\bkmkstart AAAAAAAAUY}
{\bkmkend AAAAAAAAUY}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_TRANSFER\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_TRANSFER}
{\qr PICC_CMD_MF_TRANSFER{\bkmkstart AAAAAAAAUZ}
{\bkmkend AAAAAAAAUZ}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_UL_WRITE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_UL_WRITE}
{\qr PICC_CMD_UL_WRITE{\bkmkstart AAAAAAAAVA}
{\bkmkend AAAAAAAAVA}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_REQA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_REQA}
{\qr PICC_CMD_REQA{\bkmkstart AAAAAAAAUL}
{\bkmkend AAAAAAAAUL}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_WUPA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_WUPA}
{\qr PICC_CMD_WUPA{\bkmkstart AAAAAAAAUM}
{\bkmkend AAAAAAAAUM}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_CT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_CT}
{\qr PICC_CMD_CT{\bkmkstart AAAAAAAAUN}
{\bkmkend AAAAAAAAUN}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL1\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL1}
{\qr PICC_CMD_SEL_CL1{\bkmkstart AAAAAAAAUO}
{\bkmkend AAAAAAAAUO}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL2\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL2}
{\qr PICC_CMD_SEL_CL2{\bkmkstart AAAAAAAAUP}
{\bkmkend AAAAAAAAUP}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_SEL_CL3\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_SEL_CL3}
{\qr PICC_CMD_SEL_CL3{\bkmkstart AAAAAAAAUQ}
{\bkmkend AAAAAAAAUQ}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_HLTA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_HLTA}
{\qr PICC_CMD_HLTA{\bkmkstart AAAAAAAAUR}
{\bkmkend AAAAAAAAUR}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_AUTH_KEY_A\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_AUTH_KEY_A}
{\qr PICC_CMD_MF_AUTH_KEY_A{\bkmkstart AAAAAAAAUS}
{\bkmkend AAAAAAAAUS}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_AUTH_KEY_B\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_AUTH_KEY_B}
{\qr PICC_CMD_MF_AUTH_KEY_B{\bkmkstart AAAAAAAAUT}
{\bkmkend AAAAAAAAUT}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_READ\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_READ}
{\qr PICC_CMD_MF_READ{\bkmkstart AAAAAAAAUU}
{\bkmkend AAAAAAAAUU}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_WRITE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_WRITE}
{\qr PICC_CMD_MF_WRITE{\bkmkstart AAAAAAAAUV}
{\bkmkend AAAAAAAAUV}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_DECREMENT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_DECREMENT}
{\qr PICC_CMD_MF_DECREMENT{\bkmkstart AAAAAAAAUW}
{\bkmkend AAAAAAAAUW}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_INCREMENT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_INCREMENT}
{\qr PICC_CMD_MF_INCREMENT{\bkmkstart AAAAAAAAUX}
{\bkmkend AAAAAAAAUX}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_RESTORE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_RESTORE}
{\qr PICC_CMD_MF_RESTORE{\bkmkstart AAAAAAAAUY}
{\bkmkend AAAAAAAAUY}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_MF_TRANSFER\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_MF_TRANSFER}
{\qr PICC_CMD_MF_TRANSFER{\bkmkstart AAAAAAAAUZ}
{\bkmkend AAAAAAAAUZ}
\cell }{\cell }{\row }
{\xe \v PICC_CMD_UL_WRITE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_CMD_UL_WRITE}
{\qr PICC_CMD_UL_WRITE{\bkmkstart AAAAAAAAVA}
{\bkmkend AAAAAAAAVA}
\cell }{\cell }{\row }
}
}
{\xe \v PICC_Type\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_Type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::PICC_Type}}}
\par
{\bkmkstart AAAAAAAAVB}
{\bkmkend AAAAAAAAVB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v PICC_TYPE_UNKNOWN\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_UNKNOWN}
{\qr PICC_TYPE_UNKNOWN{\bkmkstart AAAAAAAAVC}
{\bkmkend AAAAAAAAVC}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_ISO_14443_4\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_ISO_14443_4}
{\qr PICC_TYPE_ISO_14443_4{\bkmkstart AAAAAAAAVD}
{\bkmkend AAAAAAAAVD}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_ISO_18092\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_ISO_18092}
{\qr PICC_TYPE_ISO_18092{\bkmkstart AAAAAAAAVE}
{\bkmkend AAAAAAAAVE}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_MINI\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_MINI}
{\qr PICC_TYPE_MIFARE_MINI{\bkmkstart AAAAAAAAVF}
{\bkmkend AAAAAAAAVF}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_1K\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_1K}
{\qr PICC_TYPE_MIFARE_1K{\bkmkstart AAAAAAAAVG}
{\bkmkend AAAAAAAAVG}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_4K\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_4K}
{\qr PICC_TYPE_MIFARE_4K{\bkmkstart AAAAAAAAVH}
{\bkmkend AAAAAAAAVH}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_UL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_UL}
{\qr PICC_TYPE_MIFARE_UL{\bkmkstart AAAAAAAAVI}
{\bkmkend AAAAAAAAVI}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_PLUS\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_PLUS}
{\qr PICC_TYPE_MIFARE_PLUS{\bkmkstart AAAAAAAAVJ}
{\bkmkend AAAAAAAAVJ}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_TNP3XXX\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_TNP3XXX}
{\qr PICC_TYPE_TNP3XXX{\bkmkstart AAAAAAAAVK}
{\bkmkend AAAAAAAAVK}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_NOT_COMPLETE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_NOT_COMPLETE}
{\qr PICC_TYPE_NOT_COMPLETE{\bkmkstart AAAAAAAAVL}
{\bkmkend AAAAAAAAVL}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_UNKNOWN\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_UNKNOWN}
{\qr PICC_TYPE_UNKNOWN{\bkmkstart AAAAAAAAVC}
{\bkmkend AAAAAAAAVC}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_ISO_14443_4\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_ISO_14443_4}
{\qr PICC_TYPE_ISO_14443_4{\bkmkstart AAAAAAAAVD}
{\bkmkend AAAAAAAAVD}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_ISO_18092\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_ISO_18092}
{\qr PICC_TYPE_ISO_18092{\bkmkstart AAAAAAAAVE}
{\bkmkend AAAAAAAAVE}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_MINI\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_MINI}
{\qr PICC_TYPE_MIFARE_MINI{\bkmkstart AAAAAAAAVF}
{\bkmkend AAAAAAAAVF}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_1K\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_1K}
{\qr PICC_TYPE_MIFARE_1K{\bkmkstart AAAAAAAAVG}
{\bkmkend AAAAAAAAVG}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_4K\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_4K}
{\qr PICC_TYPE_MIFARE_4K{\bkmkstart AAAAAAAAVH}
{\bkmkend AAAAAAAAVH}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_UL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_UL}
{\qr PICC_TYPE_MIFARE_UL{\bkmkstart AAAAAAAAVI}
{\bkmkend AAAAAAAAVI}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_PLUS\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_PLUS}
{\qr PICC_TYPE_MIFARE_PLUS{\bkmkstart AAAAAAAAVJ}
{\bkmkend AAAAAAAAVJ}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_TNP3XXX\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_TNP3XXX}
{\qr PICC_TYPE_TNP3XXX{\bkmkstart AAAAAAAAVK}
{\bkmkend AAAAAAAAVK}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_NOT_COMPLETE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_NOT_COMPLETE}
{\qr PICC_TYPE_NOT_COMPLETE{\bkmkstart AAAAAAAAVL}
{\bkmkend AAAAAAAAVL}
\cell }{\cell }{\row }
}
}
{\xe \v PICC_Type\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_Type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::PICC_Type}}}
\par
{\bkmkstart AAAAAAAAVB}
{\bkmkend AAAAAAAAVB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v PICC_TYPE_UNKNOWN\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_UNKNOWN}
{\qr PICC_TYPE_UNKNOWN{\bkmkstart AAAAAAAAVC}
{\bkmkend AAAAAAAAVC}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_ISO_14443_4\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_ISO_14443_4}
{\qr PICC_TYPE_ISO_14443_4{\bkmkstart AAAAAAAAVD}
{\bkmkend AAAAAAAAVD}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_ISO_18092\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_ISO_18092}
{\qr PICC_TYPE_ISO_18092{\bkmkstart AAAAAAAAVE}
{\bkmkend AAAAAAAAVE}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_MINI\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_MINI}
{\qr PICC_TYPE_MIFARE_MINI{\bkmkstart AAAAAAAAVF}
{\bkmkend AAAAAAAAVF}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_1K\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_1K}
{\qr PICC_TYPE_MIFARE_1K{\bkmkstart AAAAAAAAVG}
{\bkmkend AAAAAAAAVG}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_4K\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_4K}
{\qr PICC_TYPE_MIFARE_4K{\bkmkstart AAAAAAAAVH}
{\bkmkend AAAAAAAAVH}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_UL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_UL}
{\qr PICC_TYPE_MIFARE_UL{\bkmkstart AAAAAAAAVI}
{\bkmkend AAAAAAAAVI}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_PLUS\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_PLUS}
{\qr PICC_TYPE_MIFARE_PLUS{\bkmkstart AAAAAAAAVJ}
{\bkmkend AAAAAAAAVJ}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_TNP3XXX\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_TNP3XXX}
{\qr PICC_TYPE_TNP3XXX{\bkmkstart AAAAAAAAVK}
{\bkmkend AAAAAAAAVK}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_NOT_COMPLETE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_NOT_COMPLETE}
{\qr PICC_TYPE_NOT_COMPLETE{\bkmkstart AAAAAAAAVL}
{\bkmkend AAAAAAAAVL}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_UNKNOWN\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_UNKNOWN}
{\qr PICC_TYPE_UNKNOWN{\bkmkstart AAAAAAAAVC}
{\bkmkend AAAAAAAAVC}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_ISO_14443_4\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_ISO_14443_4}
{\qr PICC_TYPE_ISO_14443_4{\bkmkstart AAAAAAAAVD}
{\bkmkend AAAAAAAAVD}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_ISO_18092\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_ISO_18092}
{\qr PICC_TYPE_ISO_18092{\bkmkstart AAAAAAAAVE}
{\bkmkend AAAAAAAAVE}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_MINI\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_MINI}
{\qr PICC_TYPE_MIFARE_MINI{\bkmkstart AAAAAAAAVF}
{\bkmkend AAAAAAAAVF}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_1K\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_1K}
{\qr PICC_TYPE_MIFARE_1K{\bkmkstart AAAAAAAAVG}
{\bkmkend AAAAAAAAVG}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_4K\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_4K}
{\qr PICC_TYPE_MIFARE_4K{\bkmkstart AAAAAAAAVH}
{\bkmkend AAAAAAAAVH}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_UL\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_UL}
{\qr PICC_TYPE_MIFARE_UL{\bkmkstart AAAAAAAAVI}
{\bkmkend AAAAAAAAVI}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_MIFARE_PLUS\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_MIFARE_PLUS}
{\qr PICC_TYPE_MIFARE_PLUS{\bkmkstart AAAAAAAAVJ}
{\bkmkend AAAAAAAAVJ}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_TNP3XXX\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_TNP3XXX}
{\qr PICC_TYPE_TNP3XXX{\bkmkstart AAAAAAAAVK}
{\bkmkend AAAAAAAAVK}
\cell }{\cell }{\row }
{\xe \v PICC_TYPE_NOT_COMPLETE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_TYPE_NOT_COMPLETE}
{\qr PICC_TYPE_NOT_COMPLETE{\bkmkstart AAAAAAAAVL}
{\bkmkend AAAAAAAAVL}
\cell }{\cell }{\row }
}
}
{\xe \v StatusCode\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:StatusCode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::StatusCode}}}
\par
{\bkmkstart AAAAAAAAVM}
{\bkmkend AAAAAAAAVM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v STATUS_OK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_OK}
{\qr STATUS_OK{\bkmkstart AAAAAAAAVN}
{\bkmkend AAAAAAAAVN}
\cell }{\cell }{\row }
{\xe \v STATUS_ERROR\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_ERROR}
{\qr STATUS_ERROR{\bkmkstart AAAAAAAAVO}
{\bkmkend AAAAAAAAVO}
\cell }{\cell }{\row }
{\xe \v STATUS_COLLISION\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_COLLISION}
{\qr STATUS_COLLISION{\bkmkstart AAAAAAAAVP}
{\bkmkend AAAAAAAAVP}
\cell }{\cell }{\row }
{\xe \v STATUS_TIMEOUT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_TIMEOUT}
{\qr STATUS_TIMEOUT{\bkmkstart AAAAAAAAVQ}
{\bkmkend AAAAAAAAVQ}
\cell }{\cell }{\row }
{\xe \v STATUS_NO_ROOM\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_NO_ROOM}
{\qr STATUS_NO_ROOM{\bkmkstart AAAAAAAAVR}
{\bkmkend AAAAAAAAVR}
\cell }{\cell }{\row }
{\xe \v STATUS_INTERNAL_ERROR\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_INTERNAL_ERROR}
{\qr STATUS_INTERNAL_ERROR{\bkmkstart AAAAAAAAVS}
{\bkmkend AAAAAAAAVS}
\cell }{\cell }{\row }
{\xe \v STATUS_INVALID\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_INVALID}
{\qr STATUS_INVALID{\bkmkstart AAAAAAAAVT}
{\bkmkend AAAAAAAAVT}
\cell }{\cell }{\row }
{\xe \v STATUS_CRC_WRONG\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_CRC_WRONG}
{\qr STATUS_CRC_WRONG{\bkmkstart AAAAAAAAVU}
{\bkmkend AAAAAAAAVU}
\cell }{\cell }{\row }
{\xe \v STATUS_MIFARE_NACK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_MIFARE_NACK}
{\qr STATUS_MIFARE_NACK{\bkmkstart AAAAAAAAVV}
{\bkmkend AAAAAAAAVV}
\cell }{\cell }{\row }
{\xe \v STATUS_OK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_OK}
{\qr STATUS_OK{\bkmkstart AAAAAAAAVN}
{\bkmkend AAAAAAAAVN}
\cell }{\cell }{\row }
{\xe \v STATUS_ERROR\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_ERROR}
{\qr STATUS_ERROR{\bkmkstart AAAAAAAAVO}
{\bkmkend AAAAAAAAVO}
\cell }{\cell }{\row }
{\xe \v STATUS_COLLISION\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_COLLISION}
{\qr STATUS_COLLISION{\bkmkstart AAAAAAAAVP}
{\bkmkend AAAAAAAAVP}
\cell }{\cell }{\row }
{\xe \v STATUS_TIMEOUT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_TIMEOUT}
{\qr STATUS_TIMEOUT{\bkmkstart AAAAAAAAVQ}
{\bkmkend AAAAAAAAVQ}
\cell }{\cell }{\row }
{\xe \v STATUS_NO_ROOM\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_NO_ROOM}
{\qr STATUS_NO_ROOM{\bkmkstart AAAAAAAAVR}
{\bkmkend AAAAAAAAVR}
\cell }{\cell }{\row }
{\xe \v STATUS_INTERNAL_ERROR\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_INTERNAL_ERROR}
{\qr STATUS_INTERNAL_ERROR{\bkmkstart AAAAAAAAVS}
{\bkmkend AAAAAAAAVS}
\cell }{\cell }{\row }
{\xe \v STATUS_INVALID\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_INVALID}
{\qr STATUS_INVALID{\bkmkstart AAAAAAAAVT}
{\bkmkend AAAAAAAAVT}
\cell }{\cell }{\row }
{\xe \v STATUS_CRC_WRONG\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_CRC_WRONG}
{\qr STATUS_CRC_WRONG{\bkmkstart AAAAAAAAVU}
{\bkmkend AAAAAAAAVU}
\cell }{\cell }{\row }
{\xe \v STATUS_MIFARE_NACK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_MIFARE_NACK}
{\qr STATUS_MIFARE_NACK{\bkmkstart AAAAAAAAVV}
{\bkmkend AAAAAAAAVV}
\cell }{\cell }{\row }
}
}
{\xe \v StatusCode\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:StatusCode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b mfrc522::MFRC522::StatusCode}}}
\par
{\bkmkstart AAAAAAAAVM}
{\bkmkend AAAAAAAAVM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v STATUS_OK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_OK}
{\qr STATUS_OK{\bkmkstart AAAAAAAAVN}
{\bkmkend AAAAAAAAVN}
\cell }{\cell }{\row }
{\xe \v STATUS_ERROR\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_ERROR}
{\qr STATUS_ERROR{\bkmkstart AAAAAAAAVO}
{\bkmkend AAAAAAAAVO}
\cell }{\cell }{\row }
{\xe \v STATUS_COLLISION\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_COLLISION}
{\qr STATUS_COLLISION{\bkmkstart AAAAAAAAVP}
{\bkmkend AAAAAAAAVP}
\cell }{\cell }{\row }
{\xe \v STATUS_TIMEOUT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_TIMEOUT}
{\qr STATUS_TIMEOUT{\bkmkstart AAAAAAAAVQ}
{\bkmkend AAAAAAAAVQ}
\cell }{\cell }{\row }
{\xe \v STATUS_NO_ROOM\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_NO_ROOM}
{\qr STATUS_NO_ROOM{\bkmkstart AAAAAAAAVR}
{\bkmkend AAAAAAAAVR}
\cell }{\cell }{\row }
{\xe \v STATUS_INTERNAL_ERROR\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_INTERNAL_ERROR}
{\qr STATUS_INTERNAL_ERROR{\bkmkstart AAAAAAAAVS}
{\bkmkend AAAAAAAAVS}
\cell }{\cell }{\row }
{\xe \v STATUS_INVALID\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_INVALID}
{\qr STATUS_INVALID{\bkmkstart AAAAAAAAVT}
{\bkmkend AAAAAAAAVT}
\cell }{\cell }{\row }
{\xe \v STATUS_CRC_WRONG\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_CRC_WRONG}
{\qr STATUS_CRC_WRONG{\bkmkstart AAAAAAAAVU}
{\bkmkend AAAAAAAAVU}
\cell }{\cell }{\row }
{\xe \v STATUS_MIFARE_NACK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_MIFARE_NACK}
{\qr STATUS_MIFARE_NACK{\bkmkstart AAAAAAAAVV}
{\bkmkend AAAAAAAAVV}
\cell }{\cell }{\row }
{\xe \v STATUS_OK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_OK}
{\qr STATUS_OK{\bkmkstart AAAAAAAAVN}
{\bkmkend AAAAAAAAVN}
\cell }{\cell }{\row }
{\xe \v STATUS_ERROR\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_ERROR}
{\qr STATUS_ERROR{\bkmkstart AAAAAAAAVO}
{\bkmkend AAAAAAAAVO}
\cell }{\cell }{\row }
{\xe \v STATUS_COLLISION\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_COLLISION}
{\qr STATUS_COLLISION{\bkmkstart AAAAAAAAVP}
{\bkmkend AAAAAAAAVP}
\cell }{\cell }{\row }
{\xe \v STATUS_TIMEOUT\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_TIMEOUT}
{\qr STATUS_TIMEOUT{\bkmkstart AAAAAAAAVQ}
{\bkmkend AAAAAAAAVQ}
\cell }{\cell }{\row }
{\xe \v STATUS_NO_ROOM\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_NO_ROOM}
{\qr STATUS_NO_ROOM{\bkmkstart AAAAAAAAVR}
{\bkmkend AAAAAAAAVR}
\cell }{\cell }{\row }
{\xe \v STATUS_INTERNAL_ERROR\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_INTERNAL_ERROR}
{\qr STATUS_INTERNAL_ERROR{\bkmkstart AAAAAAAAVS}
{\bkmkend AAAAAAAAVS}
\cell }{\cell }{\row }
{\xe \v STATUS_INVALID\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_INVALID}
{\qr STATUS_INVALID{\bkmkstart AAAAAAAAVT}
{\bkmkend AAAAAAAAVT}
\cell }{\cell }{\row }
{\xe \v STATUS_CRC_WRONG\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_CRC_WRONG}
{\qr STATUS_CRC_WRONG{\bkmkstart AAAAAAAAVU}
{\bkmkend AAAAAAAAVU}
\cell }{\cell }{\row }
{\xe \v STATUS_MIFARE_NACK\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:STATUS_MIFARE_NACK}
{\qr STATUS_MIFARE_NACK{\bkmkstart AAAAAAAAVV}
{\bkmkend AAAAAAAAVV}
\cell }{\cell }{\row }
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v MFRC522\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MFRC522}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
mfrc522::MFRC522::MFRC522 ({\b ISpi} &  {\i spi}, {\b IGpio} &  {\i resetPin})}}
\par
{\bkmkstart AAAAAAAAVW}
{\bkmkend AAAAAAAAVW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a9c32316768c27c643781df0d0a0bf248_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v MFRC522\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MFRC522}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
mfrc522::MFRC522::MFRC522 ({\b ISpi} & , {\b IGpio} &  {\i resetPin})}}
\par
{\bkmkstart AAAAAAAAVW}
{\bkmkend AAAAAAAAVW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v GetStatusCodeName\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:GetStatusCodeName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string mfrc522::MFRC522::GetStatusCodeName (uint8_t  {\i code})}}
\par
{\bkmkstart AAAAAAAAVX}
{\bkmkend AAAAAAAAVX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns a __FlashStringHelper pointer to a status code name. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i code} \cell }{One of the StatusCode enums. \cell }
{\row }
}
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a0c4d480120813209751676c76149585a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetStatusCodeName\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:GetStatusCodeName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string mfrc522::MFRC522::GetStatusCodeName (uint8_t  {\i code})}}
\par
{\bkmkstart AAAAAAAAVX}
{\bkmkend AAAAAAAAVX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_Decrement\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Decrement}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Decrement (uint8_t  {\i blockAddr}, long  {\i delta})}}
\par
{\bkmkstart AAAAAAAAVY}
{\bkmkend AAAAAAAAVY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
MIFARE Decrement subtracts the delta from the value of the addressed block, and stores the result in a volatile memory. For MIFARE Classic only. The sector containing the block must be authenticated before calling this function. Only for blocks in "value block" mode, ie with access bits [C1 C2 C3] = [110] or [001]. Use {\b MIFARE_Transfer()} to store the result in a block.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i blockAddr} \cell }{The block (0-0xff) number.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i delta} \cell }{This number is subtracted from the value of block blockAddr. \cell }
{\row }
}
}}
{\xe \v MIFARE_Decrement\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Decrement}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Decrement (uint8_t  {\i blockAddr}, long  {\i delta})}}
\par
{\bkmkstart AAAAAAAAVY}
{\bkmkend AAAAAAAAVY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_GetValue\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_GetValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_GetValue (uint8_t  {\i blockAddr}, long *  {\i value})}}
\par
{\bkmkstart AAAAAAAAVZ}
{\bkmkend AAAAAAAAVZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Helper routine to read the current value from a Value Block.\par
Only for MIFARE Classic and only for blocks in "value block" mode, that is: with access bits [C1 C2 C3] = [110] or [001]. The sector containing the block must be authenticated before calling this function.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i blockAddr} \cell }{The block (0x00-0xff) number. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{out\cell }{{\i value} \cell }{Current value of the Value Block. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_abf16c5a992c8692c2cf4f65e6ad19a13_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v MIFARE_GetValue\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_GetValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_GetValue (uint8_t  {\i blockAddr}, long *  {\i value})}}
\par
{\bkmkstart AAAAAAAAVZ}
{\bkmkend AAAAAAAAVZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_Increment\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Increment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Increment (uint8_t  {\i blockAddr}, long  {\i delta})}}
\par
{\bkmkstart AAAAAAAAWA}
{\bkmkend AAAAAAAAWA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
MIFARE Increment adds the delta to the value of the addressed block, and stores the result in a volatile memory. For MIFARE Classic only. The sector containing the block must be authenticated before calling this function. Only for blocks in "value block" mode, ie with access bits [C1 C2 C3] = [110] or [001]. Use {\b MIFARE_Transfer()} to store the result in a block.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i blockAddr} \cell }{The block (0-0xff) number.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i delta} \cell }{This number is added to the value of block blockAddr. \cell }
{\row }
}
}}
{\xe \v MIFARE_Increment\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Increment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Increment (uint8_t  {\i blockAddr}, long  {\i delta})}}
\par
{\bkmkstart AAAAAAAAWA}
{\bkmkend AAAAAAAAWA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_OpenUidBackdoor\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_OpenUidBackdoor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::MIFARE_OpenUidBackdoor (bool  {\i logErrors})}}
\par
{\bkmkstart AAAAAAAAWB}
{\bkmkend AAAAAAAAWB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Performs the "magic sequence" needed to get Chinese UID changeable Mifare cards to allow writing to sector 0, where the card UID is stored.\par
Note that you do not need to have selected the card through REQA or WUPA, this sequence works immediately when the card is in the reader vicinity. This means you can use this method even on "bricked" cards that your reader does not recognise anymore (see {\b MFRC522::MIFARE_UnbrickUidSector}).\par
Of course with non-bricked devices, you're free to select them before calling this function. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_ad10ff428a8a4e48a816237093a19849a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_ad10ff428a8a4e48a816237093a19849a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v MIFARE_OpenUidBackdoor\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_OpenUidBackdoor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::MIFARE_OpenUidBackdoor (bool  {\i logErrors})}}
\par
{\bkmkstart AAAAAAAAWB}
{\bkmkend AAAAAAAAWB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_Read\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Read (uint8_t  {\i blockAddr}, uint8_t *  {\i buffer}, uint8_t *  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAWC}
{\bkmkend AAAAAAAAWC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads 16 bytes (+ 2 bytes CRC_A) from the active PICC.\par
For MIFARE Classic the sector containing the block must be authenticated before calling this function.\par
For MIFARE Ultralight only addresses 00h to 0Fh are decoded. The MF0ICU1 returns a NAK for higher addresses. The MF0ICU1 responds to the READ command by sending 16 bytes starting from the page address defined by the command argument. For example; if blockAddr is 03h then pages 03h, 04h, 05h, 06h are returned. A roll-back is implemented: If blockAddr is 0Eh, then the contents of pages 0Eh, 0Fh, 00h and 01h are returned.\par
The buffer must be at least 18 bytes because a CRC_A is also returned. Checks the CRC_A before returning STATUS_OK.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i blockAddr} \cell }{MIFARE Classic: The block (0-0xff) number. MIFARE Ultralight: The first page to return data from.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i buffer} \cell }{The buffer to store the data in\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bufferSize} \cell }{Buffer size, at least 18 bytes. Also number of bytes returned if STATUS_OK. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a039f9df6672ed1c6b23678a374022959_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a039f9df6672ed1c6b23678a374022959_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v MIFARE_Read\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Read (uint8_t  {\i blockAddr}, uint8_t *  {\i buffer}, uint8_t *  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAWC}
{\bkmkend AAAAAAAAWC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_Restore\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Restore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Restore (uint8_t  {\i blockAddr})}}
\par
{\bkmkstart AAAAAAAAWD}
{\bkmkend AAAAAAAAWD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
MIFARE Restore copies the value of the addressed block into a volatile memory. For MIFARE Classic only. The sector containing the block must be authenticated before calling this function. Only for blocks in "value block" mode, ie with access bits [C1 C2 C3] = [110] or [001]. Use {\b MIFARE_Transfer()} to store the result in a block.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i blockAddr} \cell }{The block (0-0xff) number. \cell }
{\row }
}
}}
{\xe \v MIFARE_Restore\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Restore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Restore (uint8_t  {\i blockAddr})}}
\par
{\bkmkstart AAAAAAAAWD}
{\bkmkend AAAAAAAAWD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_SetAccessBits\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_SetAccessBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::MIFARE_SetAccessBits (uint8_t *  {\i accessBitBuffer}, uint8_t  {\i g0}, uint8_t  {\i g1}, uint8_t  {\i g2}, uint8_t  {\i g3})}}
\par
{\bkmkstart AAAAAAAAWE}
{\bkmkend AAAAAAAAWE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculates the bit pattern needed for the specified access bits. In the [C1 C2 C3] tupples C1 is MSB (=4) and C3 is LSB (=1). \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i accessBitBuffer} \cell }{Pointer to byte 6, 7 and 8 in the sector trailer. Bytes [0..2] will be set.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i g0} \cell }{Access bits [C1 C2 C3] for block 0 (for sectors 0-31) or blocks 0-4 (for sectors 32-39)\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i g1} \cell }{Access bits C1 C2 C3] for block 1 (for sectors 0-31) or blocks 5-9 (for sectors 32-39)\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i g2} \cell }{Access bits C1 C2 C3] for block 2 (for sectors 0-31) or blocks 10-14 (for sectors 32-39)\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i g3} \cell }{Access bits C1 C2 C3] for the sector trailer, block 3 (for sectors 0-31) or block 15 (for sectors 32-39) \cell }
{\row }
}
}}
{\xe \v MIFARE_SetAccessBits\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_SetAccessBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::MIFARE_SetAccessBits (uint8_t *  {\i accessBitBuffer}, uint8_t  {\i g0}, uint8_t  {\i g1}, uint8_t  {\i g2}, uint8_t  {\i g3})}}
\par
{\bkmkstart AAAAAAAAWE}
{\bkmkend AAAAAAAAWE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_SetUid\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_SetUid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::MIFARE_SetUid (uint8_t *  {\i newUid}, uint8_t  {\i uidSize}, bool  {\i logErrors})}}
\par
{\bkmkstart AAAAAAAAWF}
{\bkmkend AAAAAAAAWF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads entire block 0, including all manufacturer data, and overwrites that block with the new UID, a freshly calculated BCC, and the original manufacturer data.\par
It assumes a default KEY A of 0xFFFFFFFFFFFF. Make sure to have selected the card before this function is called. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a2f11484ff5d5ff2b70590b1c04c313fd_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v MIFARE_SetUid\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_SetUid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::MIFARE_SetUid (uint8_t *  {\i newUid}, uint8_t  {\i uidSize}, bool  {\i logErrors})}}
\par
{\bkmkstart AAAAAAAAWF}
{\bkmkend AAAAAAAAWF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_SetValue\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_SetValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_SetValue (uint8_t  {\i blockAddr}, long  {\i value})}}
\par
{\bkmkstart AAAAAAAAWG}
{\bkmkend AAAAAAAAWG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Helper routine to write a specific value into a Value Block.\par
Only for MIFARE Classic and only for blocks in "value block" mode, that is: with access bits [C1 C2 C3] = [110] or [001]. The sector containing the block must be authenticated before calling this function.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i blockAddr} \cell }{The block (0x00-0xff) number. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i value} \cell }{New value of the Value Block. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a1733fb64ad8fa119e3fe945d6287d059_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v MIFARE_SetValue\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_SetValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_SetValue (uint8_t  {\i blockAddr}, long  {\i value})}}
\par
{\bkmkstart AAAAAAAAWG}
{\bkmkend AAAAAAAAWG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_Transfer\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Transfer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Transfer (uint8_t  {\i blockAddr})}}
\par
{\bkmkstart AAAAAAAAWH}
{\bkmkend AAAAAAAAWH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
MIFARE Transfer writes the value stored in the volatile memory into one MIFARE Classic block. For MIFARE Classic only. The sector containing the block must be authenticated before calling this function. Only for blocks in "value block" mode, ie with access bits [C1 C2 C3] = [110] or [001].\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i blockAddr} \cell }{The block (0-0xff) number. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a3b85e9b839756a4eb516195ef498ce58_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v MIFARE_Transfer\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Transfer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Transfer (uint8_t  {\i blockAddr})}}
\par
{\bkmkstart AAAAAAAAWH}
{\bkmkend AAAAAAAAWH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_Ultralight_Write\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Ultralight_Write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Ultralight_Write (uint8_t  {\i page}, uint8_t *  {\i buffer}, uint8_t  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAWI}
{\bkmkend AAAAAAAAWI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Writes a 4 byte page to the active MIFARE Ultralight PICC.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i page} \cell }{The page (2-15) to write to.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i buffer} \cell }{The 4 bytes to write to the PICC\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bufferSize} \cell }{Buffer size, must be at least 4 bytes. Exactly 4 bytes are written. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_afcd5d913410ed3694fab339f311b93de_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v MIFARE_Ultralight_Write\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Ultralight_Write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Ultralight_Write (uint8_t  {\i page}, uint8_t *  {\i buffer}, uint8_t  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAWI}
{\bkmkend AAAAAAAAWI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_UnbrickUidSector\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_UnbrickUidSector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::MIFARE_UnbrickUidSector (bool  {\i logErrors})}}
\par
{\bkmkstart AAAAAAAAWJ}
{\bkmkend AAAAAAAAWJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Resets entire sector 0 to zeroes, so the card can be read again by readers. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a2ff9002344e9ee1fa0be91d2f56e1d5c_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v MIFARE_UnbrickUidSector\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_UnbrickUidSector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::MIFARE_UnbrickUidSector (bool  {\i logErrors})}}
\par
{\bkmkstart AAAAAAAAWJ}
{\bkmkend AAAAAAAAWJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIFARE_Write\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Write (uint8_t  {\i blockAddr}, uint8_t *  {\i buffer}, uint8_t  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAWK}
{\bkmkend AAAAAAAAWK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Writes 16 bytes to the active PICC.\par
For MIFARE Classic the sector containing the block must be authenticated before calling this function.\par
For MIFARE Ultralight the operation is called "COMPATIBILITY WRITE". Even though 16 bytes are transferred to the Ultralight PICC, only the least significant 4 bytes (bytes 0 to 3) are written to the specified address. It is recommended to set the remaining bytes 04h to 0Fh to all logic 0.{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s83\li1080\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i blockAddr} \cell }{MIFARE Classic: The block (0-0xff) number. MIFARE Ultralight: The page (2-15) to write to.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i buffer} \cell }{The 16 bytes to write to the PICC\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bufferSize} \cell }{Buffer size, must be at least 16 bytes. Exactly 16 bytes are written. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a50b62d0ea4b1ab35d5275227fcbfaa5f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a50b62d0ea4b1ab35d5275227fcbfaa5f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v MIFARE_Write\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:MIFARE_Write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Write (uint8_t  {\i blockAddr}, uint8_t *  {\i buffer}, uint8_t  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAWK}
{\bkmkend AAAAAAAAWK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_AntennaOff\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_AntennaOff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_AntennaOff ()}}
\par
{\bkmkstart AAAAAAAAWL}
{\bkmkend AAAAAAAAWL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turns the antenna off by disabling pins TX1 and TX2. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a773b673bf8567d2cad97b136b9e269c9_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_AntennaOff\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_AntennaOff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_AntennaOff ()}}
\par
{\bkmkstart AAAAAAAAWL}
{\bkmkend AAAAAAAAWL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_AntennaOn\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_AntennaOn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_AntennaOn ()}}
\par
{\bkmkstart AAAAAAAAWM}
{\bkmkend AAAAAAAAWM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turns the antenna on by enabling pins TX1 and TX2. After a reset these pins are disabled. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a984248652522e8fd580a526a7a9b27d9_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a984248652522e8fd580a526a7a9b27d9_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_AntennaOn\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_AntennaOn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_AntennaOn ()}}
\par
{\bkmkstart AAAAAAAAWM}
{\bkmkend AAAAAAAAWM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_Authenticate\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Authenticate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_Authenticate (uint8_t  {\i command}, uint8_t  {\i blockAddr}, {\b MIFARE_Key} *  {\i key}, {\b Uid} *  {\i uid})}}
\par
{\bkmkstart AAAAAAAAWN}
{\bkmkend AAAAAAAAWN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Executes the {\b MFRC522} MFAuthent command. This command manages MIFARE authentication to enable a secure communication to any MIFARE Mini, MIFARE 1K and MIFARE 4K card. The authentication is described in the {\b MFRC522} datasheet section 10.3.1.9 and {\f2 http://www.nxp.com/documents/data_sheet/MF1S503x.pdf} section 10.1. For use with MIFARE Classic PICCs. The PICC must be selected - ie in state ACTIVE(*) - before calling this function. Remember to call {\b PCD_StopCrypto1()} after communicating with the authenticated PICC - otherwise no new communications can start.\par
All keys are set to FFFFFFFFFFFFh at chip delivery.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. Probably STATUS_TIMEOUT if you supply the wrong key. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i command} \cell }{PICC_CMD_MF_AUTH_KEY_A or PICC_CMD_MF_AUTH_KEY_B\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i blockAddr} \cell }{The block number. See numbering in the comments in the .h file.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{Pointer to the Crypteo1 key to use (6 bytes)\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i uid} \cell }{Pointer to {\b Uid} struct. The first 4 bytes of the UID is used. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a86a252950d51b7cca3ca72f70d8cb24c_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a86a252950d51b7cca3ca72f70d8cb24c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_Authenticate\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Authenticate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_Authenticate (uint8_t  {\i command}, uint8_t  {\i blockAddr}, {\b MIFARE_Key} *  {\i key}, {\b Uid} *  {\i uid})}}
\par
{\bkmkstart AAAAAAAAWN}
{\bkmkend AAAAAAAAWN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_CalculateCRC\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_CalculateCRC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_CalculateCRC (uint8_t *  {\i data}, uint8_t  {\i length}, uint8_t *  {\i result})}}
\par
{\bkmkstart AAAAAAAAWO}
{\bkmkend AAAAAAAAWO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use the CRC coprocessor in the {\b MFRC522} to calculate a CRC_A.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i data} \cell }{In: Pointer to the data to transfer to the FIFO for CRC calculation.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i length} \cell }{In: The number of bytes to transfer.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i result} \cell }{Out: Pointer to result buffer. Result is written to result[0..1], low byte first. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a5db7f98b9ace325a290f0d72e12bd05b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a5db7f98b9ace325a290f0d72e12bd05b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_CalculateCRC\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_CalculateCRC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_CalculateCRC (uint8_t *  {\i data}, uint8_t  {\i length}, uint8_t *  {\i result})}}
\par
{\bkmkstart AAAAAAAAWO}
{\bkmkend AAAAAAAAWO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_ClearRegisterBitMask\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_ClearRegisterBitMask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_ClearRegisterBitMask (uint8_t  {\i reg}, uint8_t  {\i mask})}}
\par
{\bkmkstart AAAAAAAAWP}
{\bkmkend AAAAAAAAWP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clears the bits given in mask from register reg. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i reg} \cell }{The register to update. One of the PCD_Register enums.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mask} \cell }{The bits to clear. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a24112afc3d08921c21d718c74dc8ca71_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a24112afc3d08921c21d718c74dc8ca71_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_ClearRegisterBitMask\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_ClearRegisterBitMask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_ClearRegisterBitMask (uint8_t  {\i reg}, uint8_t  {\i mask})}}
\par
{\bkmkstart AAAAAAAAWP}
{\bkmkend AAAAAAAAWP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_CommunicateWithPICC\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_CommunicateWithPICC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_CommunicateWithPICC (uint8_t  {\i command}, uint8_t  {\i waitIRq}, uint8_t *  {\i sendData}, uint8_t  {\i sendLen}, uint8_t *  {\i backData} = {\f2 NULL}, uint8_t *  {\i backLen} = {\f2 NULL}, uint8_t *  {\i validBits} = {\f2 NULL}, uint8_t  {\i rxAlign} = {\f2 0}, bool  {\i checkCRC} = {\f2 false})}}
\par
{\bkmkstart AAAAAAAAWQ}
{\bkmkend AAAAAAAAWQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transfers data to the {\b MFRC522} FIFO, executes a command, waits for completion and transfers data back from the FIFO. CRC validation can only be done if backData and backLen are specified.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i command} \cell }{The command to execute. One of the PCD_Command enums.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i waitIRq} \cell }{The bits in the ComIrqReg register that signals successful completion of the command.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sendData} \cell }{Pointer to the data to transfer to the FIFO.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sendLen} \cell }{Number of bytes to transfer to the FIFO.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i backData} \cell }{NULL or pointer to buffer if data should be read back after executing the command.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i backLen} \cell }{In: Max number of bytes to write to *backData. Out: The number of bytes returned.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i validBits} \cell }{In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rxAlign} \cell }{In: Defines the bit position in backData[0] for the first bit received. Default 0.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i checkCRC} \cell }{In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a366fced589c1009264d5c2410c06b03e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a366fced589c1009264d5c2410c06b03e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_CommunicateWithPICC\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_CommunicateWithPICC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_CommunicateWithPICC (uint8_t  {\i command}, uint8_t  {\i waitIRq}, uint8_t *  {\i sendData}, uint8_t  {\i sendLen}, uint8_t *  {\i backData} = {\f2 NULL}, uint8_t *  {\i backLen} = {\f2 NULL}, uint8_t *  {\i validBits} = {\f2 NULL}, uint8_t  {\i rxAlign} = {\f2 0}, bool  {\i checkCRC} = {\f2 false})}}
\par
{\bkmkstart AAAAAAAAWQ}
{\bkmkend AAAAAAAAWQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_GetAntennaGain\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_GetAntennaGain}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_GetAntennaGain ()}}
\par
{\bkmkstart AAAAAAAAWR}
{\bkmkend AAAAAAAAWR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the current {\b MFRC522} Receiver Gain (RxGain[2:0]) value. See 9.3.3.6 / table 98 in {\f2 http://www.nxp.com/documents/data_sheet/MFRC522.pdf} NOTE: Return value scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Value of the RxGain, scrubbed to the 3 bits used. \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a6df2b2a81b0259de285892bc61f247fc_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a6df2b2a81b0259de285892bc61f247fc_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_GetAntennaGain\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_GetAntennaGain}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_GetAntennaGain ()}}
\par
{\bkmkstart AAAAAAAAWR}
{\bkmkend AAAAAAAAWR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_Init\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_Init ()}}
\par
{\bkmkstart AAAAAAAAWS}
{\bkmkend AAAAAAAAWS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the {\b MFRC522} chip. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_affff6fd4010044cc4337803de579b4f0_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_affff6fd4010044cc4337803de579b4f0_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_Init\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_Init ()}}
\par
{\bkmkstart AAAAAAAAWS}
{\bkmkend AAAAAAAAWS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_MIFARE_Transceive\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_MIFARE_Transceive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_MIFARE_Transceive (uint8_t *  {\i sendData}, uint8_t  {\i sendLen}, bool  {\i acceptTimeout} = {\f2 false})}}
\par
{\bkmkstart AAAAAAAAWT}
{\bkmkend AAAAAAAAWT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Wrapper for MIFARE protocol communication. Adds CRC_A, executes the Transceive command and checks that the response is MF_ACK or a timeout.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sendData} \cell }{Pointer to the data to transfer to the FIFO. Do NOT include the CRC_A.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sendLen} \cell }{Number of bytes in sendData.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acceptTimeout} \cell }{True => A timeout is also success \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a73c639f5869b7d6c23d8c1cc5aa2178e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a73c639f5869b7d6c23d8c1cc5aa2178e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_MIFARE_Transceive\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_MIFARE_Transceive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_MIFARE_Transceive (uint8_t *  {\i sendData}, uint8_t  {\i sendLen}, bool  {\i acceptTimeout} = {\f2 false})}}
\par
{\bkmkstart AAAAAAAAWT}
{\bkmkend AAAAAAAAWT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_PerformSelfTest\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_PerformSelfTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::PCD_PerformSelfTest ()}}
\par
{\bkmkstart AAAAAAAAWU}
{\bkmkend AAAAAAAAWU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Performs a self-test of the {\b MFRC522} See 16.1.1 in {\f2 http://www.nxp.com/documents/data_sheet/MFRC522.pdf}\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Whether or not the test passed. \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_aabf66fe43403f40968049a2a87f0026d_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_PerformSelfTest\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_PerformSelfTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::PCD_PerformSelfTest ()}}
\par
{\bkmkstart AAAAAAAAWU}
{\bkmkend AAAAAAAAWU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_ReadRegister\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_ReadRegister}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_ReadRegister (uint8_t  {\i reg})}}
\par
{\bkmkstart AAAAAAAAWV}
{\bkmkend AAAAAAAAWV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads a byte from the specified register in the {\b MFRC522} chip. The interface is described in the datasheet section 8.1.2. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i reg} \cell }{The register to read from. One of the PCD_Register enums. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a54b1e0960ffe689bb512b9ed79dcdece_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a54b1e0960ffe689bb512b9ed79dcdece_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_ReadRegister\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_ReadRegister}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_ReadRegister (uint8_t  {\i reg})}}
\par
{\bkmkstart AAAAAAAAWV}
{\bkmkend AAAAAAAAWV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_ReadRegister\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_ReadRegister}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_ReadRegister (uint8_t  {\i reg}, uint8_t  {\i count}, uint8_t *  {\i values}, uint8_t  {\i rxAlign} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAWW}
{\bkmkend AAAAAAAAWW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads a number of bytes from the specified register in the {\b MFRC522} chip. The interface is described in the datasheet section 8.1.2. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i reg} \cell }{The register to read from. One of the PCD_Register enums.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i count} \cell }{The number of bytes to read\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i values} \cell }{Byte array to store the values in.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rxAlign} \cell }{Only bit positions rxAlign..7 in values[0] are updated. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a8243247e881823152bfe9295651b0056_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_ReadRegister\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_ReadRegister}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_ReadRegister (uint8_t  {\i reg}, uint8_t  {\i count}, uint8_t *  {\i values}, uint8_t  {\i rxAlign} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAWW}
{\bkmkend AAAAAAAAWW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_Reset\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Reset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_Reset ()}}
\par
{\bkmkstart AAAAAAAAWX}
{\bkmkend AAAAAAAAWX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Performs a soft reset on the {\b MFRC522} chip and waits for it to be ready again. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_aa3a0f87af9a7217c87de0b55592c1c60_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_aa3a0f87af9a7217c87de0b55592c1c60_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_Reset\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_Reset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_Reset ()}}
\par
{\bkmkstart AAAAAAAAWX}
{\bkmkend AAAAAAAAWX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_SetAntennaGain\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_SetAntennaGain}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_SetAntennaGain (uint8_t  {\i mask})}}
\par
{\bkmkstart AAAAAAAAWY}
{\bkmkend AAAAAAAAWY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set the {\b MFRC522} Receiver Gain (RxGain) to value specified by given mask. See 9.3.3.6 / table 98 in {\f2 http://www.nxp.com/documents/data_sheet/MFRC522.pdf} NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a245f57d7ea35bfb3ea818171abb18b4b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_SetAntennaGain\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_SetAntennaGain}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_SetAntennaGain (uint8_t  {\i mask})}}
\par
{\bkmkstart AAAAAAAAWY}
{\bkmkend AAAAAAAAWY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_SetRegisterBitMask\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_SetRegisterBitMask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_SetRegisterBitMask (uint8_t  {\i reg}, uint8_t  {\i mask})}}
\par
{\bkmkstart AAAAAAAAWZ}
{\bkmkend AAAAAAAAWZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the bits given in mask in register reg. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i reg} \cell }{The register to update. One of the PCD_Register enums.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mask} \cell }{The bits to set. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_af7304dd35540a5e47f1f34890c455286_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_af7304dd35540a5e47f1f34890c455286_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_SetRegisterBitMask\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_SetRegisterBitMask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_SetRegisterBitMask (uint8_t  {\i reg}, uint8_t  {\i mask})}}
\par
{\bkmkstart AAAAAAAAWZ}
{\bkmkend AAAAAAAAWZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_StopCrypto1\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_StopCrypto1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_StopCrypto1 ()}}
\par
{\bkmkstart AAAAAAAAXA}
{\bkmkend AAAAAAAAXA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used to exit the PCD from its authenticated state. Remember to call this function after communicating with an authenticated PICC - otherwise no new communications can start. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a427680e47e8032e2db54eee4e551e48b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a427680e47e8032e2db54eee4e551e48b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_StopCrypto1\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_StopCrypto1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_StopCrypto1 ()}}
\par
{\bkmkstart AAAAAAAAXA}
{\bkmkend AAAAAAAAXA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_TransceiveData\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_TransceiveData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_TransceiveData (uint8_t *  {\i sendData}, uint8_t  {\i sendLen}, uint8_t *  {\i backData}, uint8_t *  {\i backLen}, uint8_t *  {\i validBits} = {\f2 NULL}, uint8_t  {\i rxAlign} = {\f2 0}, bool  {\i checkCRC} = {\f2 false})}}
\par
{\bkmkstart AAAAAAAAXB}
{\bkmkend AAAAAAAAXB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Executes the Transceive command. CRC validation can only be done if backData and backLen are specified.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sendData} \cell }{Pointer to the data to transfer to the FIFO.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sendLen} \cell }{Number of bytes to transfer to the FIFO.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i backData} \cell }{NULL or pointer to buffer if data should be read back after executing the command.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i backLen} \cell }{In: Max number of bytes to write to *backData. Out: The number of bytes returned.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i validBits} \cell }{In/Out: The number of valid bits in the last byte. 0 for 8 valid bits. Default NULL.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rxAlign} \cell }{In: Defines the bit position in backData[0] for the first bit received. Default 0.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i checkCRC} \cell }{In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a6ae256b84102fb140f600f452f4ef231_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a6ae256b84102fb140f600f452f4ef231_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_TransceiveData\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_TransceiveData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PCD_TransceiveData (uint8_t *  {\i sendData}, uint8_t  {\i sendLen}, uint8_t *  {\i backData}, uint8_t *  {\i backLen}, uint8_t *  {\i validBits} = {\f2 NULL}, uint8_t  {\i rxAlign} = {\f2 0}, bool  {\i checkCRC} = {\f2 false})}}
\par
{\bkmkstart AAAAAAAAXB}
{\bkmkend AAAAAAAAXB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_WriteRegister\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_WriteRegister}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_WriteRegister (uint8_t  {\i reg}, uint8_t  {\i count}, uint8_t *  {\i values})}}
\par
{\bkmkstart AAAAAAAAXC}
{\bkmkend AAAAAAAAXC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Writes a number of bytes to the specified register in the {\b MFRC522} chip. The interface is described in the datasheet section 8.1.2. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i reg} \cell }{The register to write to. One of the PCD_Register enums.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i count} \cell }{The number of bytes to write to the register\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i values} \cell }{The values to write. Byte array. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a8f615a621af28925c38122b08ed3d03b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_WriteRegister\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_WriteRegister}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_WriteRegister (uint8_t  {\i reg}, uint8_t  {\i count}, uint8_t *  {\i values})}}
\par
{\bkmkstart AAAAAAAAXC}
{\bkmkend AAAAAAAAXC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PCD_WriteRegister\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_WriteRegister}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_WriteRegister (uint8_t  {\i reg}, uint8_t  {\i value})}}
\par
{\bkmkstart AAAAAAAAXD}
{\bkmkend AAAAAAAAXD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Writes a byte to the specified register in the {\b MFRC522} chip. The interface is described in the datasheet section 8.1.2. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i reg} \cell }{The register to write to. One of the PCD_Register enums.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{The value to write. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_aef8efdbb515b419df6c0038312c4f4e3_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_aef8efdbb515b419df6c0038312c4f4e3_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PCD_WriteRegister\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PCD_WriteRegister}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PCD_WriteRegister (uint8_t  {\i reg}, uint8_t  {\i value})}}
\par
{\bkmkstart AAAAAAAAXD}
{\bkmkend AAAAAAAAXD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_DumpMifareClassicSectorToSerial\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_DumpMifareClassicSectorToSerial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PICC_DumpMifareClassicSectorToSerial ({\b Uid} *  {\i uid}, {\b MIFARE_Key} *  {\i key}, uint8_t  {\i sector})}}
\par
{\bkmkstart AAAAAAAAXE}
{\bkmkend AAAAAAAAXE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dumps memory contents of a sector of a MIFARE Classic PICC. Uses {\b PCD_Authenticate()}, {\b MIFARE_Read()} and PCD_StopCrypto1. Always uses PICC_CMD_MF_AUTH_KEY_A because only Key A can always read the sector trailer access bits. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i uid} \cell }{Pointer to {\b Uid} struct returned from a successful {\b PICC_Select()}.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{Key A for the sector.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sector} \cell }{The sector to dump, 0..39. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a8517bd5b6752cc42da0bb6cb0ade3e0b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a8517bd5b6752cc42da0bb6cb0ade3e0b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_DumpMifareClassicSectorToSerial\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_DumpMifareClassicSectorToSerial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PICC_DumpMifareClassicSectorToSerial ({\b Uid} *  {\i uid}, {\b MIFARE_Key} *  {\i key}, uint8_t  {\i sector})}}
\par
{\bkmkstart AAAAAAAAXE}
{\bkmkend AAAAAAAAXE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_DumpMifareClassicToSerial\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_DumpMifareClassicToSerial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PICC_DumpMifareClassicToSerial ({\b Uid} *  {\i uid}, uint8_t  {\i piccType}, {\b MIFARE_Key} *  {\i key})}}
\par
{\bkmkstart AAAAAAAAXF}
{\bkmkend AAAAAAAAXF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dumps memory contents of a MIFARE Classic PICC. On success the PICC is halted after dumping the data. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i uid} \cell }{Pointer to {\b Uid} struct returned from a successful {\b PICC_Select()}.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i piccType} \cell }{One of the PICC_Type enums.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{Key A used for all sectors. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a6a0c6040b5f66d0a37b407f11a1a531a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a6a0c6040b5f66d0a37b407f11a1a531a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_DumpMifareClassicToSerial\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_DumpMifareClassicToSerial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PICC_DumpMifareClassicToSerial ({\b Uid} *  {\i uid}, uint8_t  {\i piccType}, {\b MIFARE_Key} *  {\i key})}}
\par
{\bkmkstart AAAAAAAAXF}
{\bkmkend AAAAAAAAXF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_DumpMifareUltralightToSerial\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_DumpMifareUltralightToSerial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PICC_DumpMifareUltralightToSerial ()}}
\par
{\bkmkstart AAAAAAAAXG}
{\bkmkend AAAAAAAAXG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dumps memory contents of a MIFARE Ultralight PICC. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a4ca5c68d509a9ead4d6d551e8c10bd40_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a4ca5c68d509a9ead4d6d551e8c10bd40_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_DumpMifareUltralightToSerial\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_DumpMifareUltralightToSerial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PICC_DumpMifareUltralightToSerial ()}}
\par
{\bkmkstart AAAAAAAAXG}
{\bkmkend AAAAAAAAXG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_DumpToSerial\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_DumpToSerial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PICC_DumpToSerial ({\b Uid} *  {\i uid})}}
\par
{\bkmkstart AAAAAAAAXH}
{\bkmkend AAAAAAAAXH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dumps debug info about the selected PICC to Serial. On success the PICC is halted after dumping the data. For MIFARE Classic the factory default key of 0xFFFFFFFFFFFF is tried. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i uid} \cell }{Pointer to {\b Uid} struct returned from a successful {\b PICC_Select()}. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a98d66dfc8460ae366a56d3762bcd278a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_DumpToSerial\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_DumpToSerial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::PICC_DumpToSerial ({\b Uid} *  {\i uid})}}
\par
{\bkmkstart AAAAAAAAXH}
{\bkmkend AAAAAAAAXH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_GetType\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_GetType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_GetType (uint8_t  {\i sak})}}
\par
{\bkmkstart AAAAAAAAXI}
{\bkmkend AAAAAAAAXI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Translates the SAK (Select Acknowledge) to a PICC type.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
PICC_Type \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sak} \cell }{The SAK byte returned from {\b PICC_Select()}. \cell }
{\row }
}
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a51d41355c15a2e3aebe43bffc2445212_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_GetType\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_GetType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_GetType (uint8_t  {\i sak})}}
\par
{\bkmkstart AAAAAAAAXI}
{\bkmkend AAAAAAAAXI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_GetTypeName\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_GetTypeName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string mfrc522::MFRC522::PICC_GetTypeName (uint8_t  {\i piccType})}}
\par
{\bkmkstart AAAAAAAAXJ}
{\bkmkend AAAAAAAAXJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns a String pointer to the PICC type name. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i piccType} \cell }{One of the PICC_Type enums. \cell }
{\row }
}
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_ae32295310fef34afe04407f307e583a9_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_GetTypeName\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_GetTypeName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string mfrc522::MFRC522::PICC_GetTypeName (uint8_t  {\i type})}}
\par
{\bkmkstart AAAAAAAAXJ}
{\bkmkend AAAAAAAAXJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_HaltA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_HaltA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_HaltA ()}}
\par
{\bkmkstart AAAAAAAAXK}
{\bkmkend AAAAAAAAXK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Instructs a PICC in state ACTIVE(*) to go to state HALT.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_adbb992156ffda4bfc7847620921454f3_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_adbb992156ffda4bfc7847620921454f3_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_HaltA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_HaltA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_HaltA ()}}
\par
{\bkmkstart AAAAAAAAXK}
{\bkmkend AAAAAAAAXK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_IsNewCardPresent\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_IsNewCardPresent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::PICC_IsNewCardPresent ()}}
\par
{\bkmkstart AAAAAAAAXL}
{\bkmkend AAAAAAAAXL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns true if a PICC responds to PICC_CMD_REQA. Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a8b123b82f4f6dffa7a88e8b61f2806a3_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a8b123b82f4f6dffa7a88e8b61f2806a3_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_IsNewCardPresent\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_IsNewCardPresent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::PICC_IsNewCardPresent ()}}
\par
{\bkmkstart AAAAAAAAXL}
{\bkmkend AAAAAAAAXL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_ReadCardSerial\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_ReadCardSerial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::PICC_ReadCardSerial ()}}
\par
{\bkmkstart AAAAAAAAXM}
{\bkmkend AAAAAAAAXM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Simple wrapper around PICC_Select. Returns true if a UID could be read. Remember to call {\b PICC_IsNewCardPresent()}, {\b PICC_RequestA()} or {\b PICC_WakeupA()} first. The read UID is available in the class variable uid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_abc5229168077788c4ba0c67c568f479e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_abc5229168077788c4ba0c67c568f479e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_ReadCardSerial\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_ReadCardSerial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool mfrc522::MFRC522::PICC_ReadCardSerial ()}}
\par
{\bkmkstart AAAAAAAAXM}
{\bkmkend AAAAAAAAXM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_REQA_or_WUPA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_REQA_or_WUPA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_REQA_or_WUPA (uint8_t  {\i command}, uint8_t *  {\i bufferATQA}, uint8_t *  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAXN}
{\bkmkend AAAAAAAAXN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transmits REQA or WUPA commands. Beware: When two PICCs are in the field at the same time I often get STATUS_TIMEOUT - probably due do bad antenna design.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i command} \cell }{The command to send - PICC_CMD_REQA or PICC_CMD_WUPA\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bufferATQA} \cell }{The buffer to store the ATQA (Answer to request) in\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bufferSize} \cell }{Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a3a28f6484ea6b1ed85745512da6ab775_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a3a28f6484ea6b1ed85745512da6ab775_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_REQA_or_WUPA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_REQA_or_WUPA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_REQA_or_WUPA (uint8_t  {\i command}, uint8_t *  {\i bufferATQA}, uint8_t *  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAXN}
{\bkmkend AAAAAAAAXN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_RequestA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_RequestA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_RequestA (uint8_t *  {\i bufferATQA}, uint8_t *  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAXO}
{\bkmkend AAAAAAAAXO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transmits a REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame. Beware: When two PICCs are in the field at the same time I often get STATUS_TIMEOUT - probably due do bad antenna design.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bufferATQA} \cell }{The buffer to store the ATQA (Answer to request) in\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bufferSize} \cell }{Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a44dd708016d31efc20bd2dbdb1f67aaf_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a44dd708016d31efc20bd2dbdb1f67aaf_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_RequestA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_RequestA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_RequestA (uint8_t *  {\i bufferATQA}, uint8_t *  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAXO}
{\bkmkend AAAAAAAAXO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_Select\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_Select}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_Select ({\b Uid} *  {\i uid}, uint8_t  {\i validBits} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAXP}
{\bkmkend AAAAAAAAXP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transmits SELECT/ANTICOLLISION commands to select a single PICC. Before calling this function the PICCs must be placed in the READY(*) state by calling {\b PICC_RequestA()} or {\b PICC_WakeupA()}. On success:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The chosen PICC is in state ACTIVE(*) and all other PICCs have returned to state IDLE/HALT. (Figure 7 of the ISO/IEC 14443-3 draft.)\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The UID size and value of the chosen PICC is returned in *uid along with the SAK.\par}
A PICC UID consists of 4, 7 or 10 bytes. Only 4 bytes can be specified in a SELECT command, so for the longer UIDs two or three iterations are used: UID size Number of UID bytes Cascade levels Example of PICC ======== =================== ============== =============== single 4 1 MIFARE Classic double 7 2 MIFARE Ultralight triple 10 3 Not currently in use?\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i uid} \cell }{Pointer to {\b Uid} struct. Normally output, but can also be used to supply a known UID.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i validBits} \cell }{The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a73adcb5681de77c62ac14b6347d909d2_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_a73adcb5681de77c62ac14b6347d909d2_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_Select\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_Select}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_Select ({\b Uid} *  {\i uid}, uint8_t  {\i validBits} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAXP}
{\bkmkend AAAAAAAAXP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PICC_WakeupA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_WakeupA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_WakeupA (uint8_t *  {\i bufferATQA}, uint8_t *  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAXQ}
{\bkmkend AAAAAAAAXQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Transmits a Wake-UP command, Type A. Invites PICCs in state IDLE and HALT to go to READY(*) and prepare for anticollision or selection. 7 bit frame. Beware: When two PICCs are in the field at the same time I often get STATUS_TIMEOUT - probably due do bad antenna design.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
STATUS_OK on success, STATUS_??? otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bufferATQA} \cell }{The buffer to store the ATQA (Answer to request) in\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bufferSize} \cell }{Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK. \cell }
{\row }
}
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_add1b450123e4670d88e0b6cb2ddca0c7_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmfrc522_1_1_m_f_r_c522_add1b450123e4670d88e0b6cb2ddca0c7_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PICC_WakeupA\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:PICC_WakeupA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::PICC_WakeupA (uint8_t *  {\i bufferATQA}, uint8_t *  {\i bufferSize})}}
\par
{\bkmkstart AAAAAAAAXQ}
{\bkmkend AAAAAAAAXQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setBitMask\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:setBitMask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::setBitMask (unsigned char  {\i reg}, unsigned char  {\i mask})}}
\par
{\bkmkstart AAAAAAAAXR}
{\bkmkend AAAAAAAAXR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setBitMask\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:setBitMask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mfrc522::MFRC522::setBitMask (unsigned char  {\i reg}, unsigned char  {\i mask})}}
\par
{\bkmkstart AAAAAAAAXR}
{\bkmkend AAAAAAAAXR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v FIFO_SIZE\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:FIFO_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static const uint8_t mfrc522::MFRC522::FIFO_SIZE = 64{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAXS}
{\bkmkend AAAAAAAAXS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mResetPin\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:mResetPin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b IGpio} & mfrc522::MFRC522::mResetPin}}
\par
{\bkmkstart AAAAAAAAXT}
{\bkmkend AAAAAAAAXT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mSpi\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:mSpi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ISpi} & mfrc522::MFRC522::mSpi}}
\par
{\bkmkstart AAAAAAAAXU}
{\bkmkend AAAAAAAAXU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v uid\:mfrc522::MFRC522}
{\xe \v mfrc522::MFRC522\:uid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Uid} mfrc522::MFRC522::uid}}
\par
{\bkmkstart AAAAAAAAXV}
{\bkmkend AAAAAAAAXV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/dependencies/mfrc522/{\b mfrc522.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b MFRC522.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/dependencies/mfrc522/{\b mfrc522.cc}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b MFRC522.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
mfrc522::MFRC522::MIFARE_Key Struct Reference\par \pard\plain 
{\tc\tcl2 \v mfrc522::MFRC522::MIFARE_Key}
{\xe \v mfrc522::MFRC522::MIFARE_Key}
{\bkmkstart AAAAAAAAXW}
{\bkmkend AAAAAAAAXW}
\par
{
{\f2 #include <mfrc522.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b keyByte} [{\b MF_KEY_SIZE}]\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v keyByte\:mfrc522::MFRC522::MIFARE_Key}
{\xe \v mfrc522::MFRC522::MIFARE_Key\:keyByte}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::MIFARE_Key::keyByte}}
\par
{\bkmkstart AAAAAAAAXX}
{\bkmkend AAAAAAAAXX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/dependencies/mfrc522/{\b mfrc522.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b MFRC522.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MoodDetection Class Reference\par \pard\plain 
{\tc\tcl2 \v MoodDetection}
{\xe \v MoodDetection}
{\bkmkstart AAAAAAAAOY}
{\bkmkend AAAAAAAAOY}
\par
{
{\f2 #include <MoodDetection.h>}}\par
Inheritance diagram for MoodDetection:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mood_detection__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for MoodDetection:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mood_detection__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MoodDetection} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Initialize} (cv::VideoCapture camera)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setCameraId} (int id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setContrasts} (int low, int high)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setShutter} (int shutter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b checkCameraOpen} (cv::VideoCapture camera)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
cv::Mat {\b takePicture} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b savePicture} (cv::VideoCapture *, std::string filename)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v MoodDetection\:MoodDetection}
{\xe \v MoodDetection\:MoodDetection}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
MoodDetection::MoodDetection (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOZ}
{\bkmkend AAAAAAAAOZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v checkCameraOpen\:MoodDetection}
{\xe \v MoodDetection\:checkCameraOpen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int MoodDetection::checkCameraOpen (cv::VideoCapture  {\i camera})}}
\par
{\bkmkstart AAAAAAAAPA}
{\bkmkend AAAAAAAAPA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Checks if camera is open. Mainly used for debugging.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i camera} \cell }{{\b Camera} object.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Error Code \par
}}}}
{\xe \v Initialize\:MoodDetection}
{\xe \v MoodDetection\:Initialize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void MoodDetection::Initialize (cv::VideoCapture  {\i camera})}}
\par
{\bkmkstart AAAAAAAAPB}
{\bkmkend AAAAAAAAPB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes our Mood Detection\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i camera} \cell }{{\b Camera} object.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mood_detection_ae2d8fa4358b2105c4e862a041fddc9d2_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v savePicture\:MoodDetection}
{\xe \v MoodDetection\:savePicture}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void MoodDetection::savePicture (cv::VideoCapture * , std::string  {\i filename})}}
\par
{\bkmkstart AAAAAAAAPC}
{\bkmkend AAAAAAAAPC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setCameraId\:MoodDetection}
{\xe \v MoodDetection\:setCameraId}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void MoodDetection::setCameraId (int  {\i id})}}
\par
{\bkmkstart AAAAAAAAPD}
{\bkmkend AAAAAAAAPD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Camera} setup functions\par
Set the Mood Detection {\b Camera} ID object.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Set a {\b Camera} ID.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Updated MoodDetection::CameraID \par
}}}}
{\xe \v setContrasts\:MoodDetection}
{\xe \v MoodDetection\:setContrasts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void MoodDetection::setContrasts (int  {\i low}, int  {\i high})}}
\par
{\bkmkstart AAAAAAAAPE}
{\bkmkend AAAAAAAAPE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setShutter\:MoodDetection}
{\xe \v MoodDetection\:setShutter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void MoodDetection::setShutter (int  {\i shutter})}}
\par
{\bkmkstart AAAAAAAAPF}
{\bkmkend AAAAAAAAPF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v stop\:MoodDetection}
{\xe \v MoodDetection\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void MoodDetection::stop (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAPG}
{\bkmkend AAAAAAAAPG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handling class functions \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mood_detection_aba994443b5bd0c82346d4f546317b934_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mood_detection_aba994443b5bd0c82346d4f546317b934_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v takePicture\:MoodDetection}
{\xe \v MoodDetection\:takePicture}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
cv::Mat MoodDetection::takePicture ()}}
\par
{\bkmkstart AAAAAAAAPH}
{\bkmkend AAAAAAAAPH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Camera} functions \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/mood-detection/{\b MoodDetection.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/mood-detection/{\b MoodDetection.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MoodThread Class Reference\par \pard\plain 
{\tc\tcl2 \v MoodThread}
{\xe \v MoodThread}
{\bkmkstart AAAAAAAAPI}
{\bkmkend AAAAAAAAPI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Mood Thread to manage mood detection functionality. }}\par
{
{\f2 #include <MoodThread.h>}}\par
Inheritance diagram for MoodThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mood_thread__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for MoodThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mood_thread__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MoodThread} (cv::VideoCapture camera)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b join} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Mood Thread to manage mood detection functionality. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v MoodThread\:MoodThread}
{\xe \v MoodThread\:MoodThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
MoodThread::MoodThread (cv::VideoCapture  {\i camera}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAPJ}
{\bkmkend AAAAAAAAPJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Contructor for our mood thread.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i camera} \cell }{{\b Camera} Object. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v join\:MoodThread}
{\xe \v MoodThread\:join}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::join (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Waits for the thread to terminate. \par
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a8ff0fda6b913cc53764caef0e1200f3f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start\:MoodThread}
{\xe \v MoodThread\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::start (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts the thread. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v stop\:MoodThread}
{\xe \v MoodThread\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void MoodThread::stop (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAPK}
{\bkmkend AAAAAAAAPK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Stop our thread's inner functionality. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mood_thread_a59724b4a9d28c6ac2df6a55c1139bf71_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/mood-detection/{\b MoodThread.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/mood-detection/{\b MoodThread.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RelayBoard Class Reference\par \pard\plain 
{\tc\tcl2 \v RelayBoard}
{\xe \v RelayBoard}
{\bkmkstart AAAAAAAAPL}
{\bkmkend AAAAAAAAPL}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Relay Board class. }}\par
{
{\f2 #include <RelayBoard.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b RelayBoard} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~RelayBoard} (void)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Initialize} ({\b GPIODriver} &driver)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Lighting} (int state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Heating} (int state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Airflow} (int state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Watering} (int state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Turn_Relays_Off} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Close_Relay_Board} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetWateringState} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetAirflowState} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetHeatingState} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetLightingState} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_heaterGPIOState}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_lightsGPIOState}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_fanGPIOState}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_waterPumpGPIOState}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Relay Board class. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale\par
}}This is class is responsilbe for the Elego Relay Board. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v RelayBoard\:RelayBoard}
{\xe \v RelayBoard\:RelayBoard}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
RelayBoard::RelayBoard (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAPM}
{\bkmkend AAAAAAAAPM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~RelayBoard\:RelayBoard}
{\xe \v RelayBoard\:~RelayBoard}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
RelayBoard::~RelayBoard (void ){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAPN}
{\bkmkend AAAAAAAAPN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Airflow\:RelayBoard}
{\xe \v RelayBoard\:Airflow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::Airflow (int  {\i state})}}
\par
{\bkmkstart AAAAAAAAPO}
{\bkmkend AAAAAAAAPO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Changes the state of the Airflow GPIO pin\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else error number \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_relay_board_aa14251b65f8b4872cdf95c56951f0959_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Close_Relay_Board\:RelayBoard}
{\xe \v RelayBoard\:Close_Relay_Board}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::Close_Relay_Board ()}}
\par
{\bkmkstart AAAAAAAAPP}
{\bkmkend AAAAAAAAPP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v GetAirflowState\:RelayBoard}
{\xe \v RelayBoard\:GetAirflowState}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::GetAirflowState ()}}
\par
{\bkmkstart AAAAAAAAPQ}
{\bkmkend AAAAAAAAPQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Wrapper for reading airflow GPIO pin state\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Value of the lighting pin else negative error number \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_relay_board_a4b5cecaeadec360c688868a230a7d3a8_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetHeatingState\:RelayBoard}
{\xe \v RelayBoard\:GetHeatingState}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::GetHeatingState ()}}
\par
{\bkmkstart AAAAAAAAPR}
{\bkmkend AAAAAAAAPR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Wrapper for reading heating GPIO state\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Value of the lighting pin else negative error number \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_relay_board_a4725ac8db57d591dbe338f646cdda254_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetLightingState\:RelayBoard}
{\xe \v RelayBoard\:GetLightingState}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::GetLightingState ()}}
\par
{\bkmkstart AAAAAAAAPS}
{\bkmkend AAAAAAAAPS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Wrapper for reading Lighting GPIO pin state\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Value of the lighting pin, else negative error number \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_relay_board_a32270d45de9d23698cf85fd3224f88c6_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetWateringState\:RelayBoard}
{\xe \v RelayBoard\:GetWateringState}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::GetWateringState ()}}
\par
{\bkmkstart AAAAAAAAPT}
{\bkmkend AAAAAAAAPT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Wrapper for reading airflow GPIO pin state\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Value of the lighting pin else negative error number \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_relay_board_a2f9f8154a49a9d8ed3b7c54c39a5ed65_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Heating\:RelayBoard}
{\xe \v RelayBoard\:Heating}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::Heating (int  {\i state})}}
\par
{\bkmkstart AAAAAAAAPU}
{\bkmkend AAAAAAAAPU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Changes the state of the Heating GPIO pin\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i state} \cell }{State to change the Heating GPIO pin to.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else error number \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_relay_board_abdfd142dd723bda5fb961f2b83e04d98_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Initialize\:RelayBoard}
{\xe \v RelayBoard\:Initialize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::Initialize ({\b GPIODriver} &  {\i driver})}}
\par
{\bkmkstart AAAAAAAAPV}
{\bkmkend AAAAAAAAPV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes actuation gpio pins\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else negative error number \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_relay_board_aee18a60a8063ebc87331cbb8fbb1a42f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Lighting\:RelayBoard}
{\xe \v RelayBoard\:Lighting}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::Lighting (int  {\i state})}}
\par
{\bkmkstart AAAAAAAAPW}
{\bkmkend AAAAAAAAPW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Changes the state of the lighting GPIO pin\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i state} \cell }{State to change the lighting GPIO pin to.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else error number \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_relay_board_a0ce37124540bae0827a1b81e28841f70_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Turn_Relays_Off\:RelayBoard}
{\xe \v RelayBoard\:Turn_Relays_Off}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::Turn_Relays_Off ()}}
\par
{\bkmkstart AAAAAAAAPX}
{\bkmkend AAAAAAAAPX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turns each Relay off by setting the GPIO pin high\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else error number \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_relay_board_a2339920ca78f22d9bbab349056ca261a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Watering\:RelayBoard}
{\xe \v RelayBoard\:Watering}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::Watering (int  {\i state})}}
\par
{\bkmkstart AAAAAAAAPY}
{\bkmkend AAAAAAAAPY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Changes the state of the Watering GPIO pin\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i state} \cell }{State to change the watering GPIO pin to.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Zero on success else error number \par
}}}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_relay_board_ab9e7c87d94483e55053722ff0981ff8f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_fanGPIOState\:RelayBoard}
{\xe \v RelayBoard\:m_fanGPIOState}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::m_fanGPIOState}}
\par
{\bkmkstart AAAAAAAAPZ}
{\bkmkend AAAAAAAAPZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_heaterGPIOState\:RelayBoard}
{\xe \v RelayBoard\:m_heaterGPIOState}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::m_heaterGPIOState}}
\par
{\bkmkstart AAAAAAAAQA}
{\bkmkend AAAAAAAAQA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_lightsGPIOState\:RelayBoard}
{\xe \v RelayBoard\:m_lightsGPIOState}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::m_lightsGPIOState}}
\par
{\bkmkstart AAAAAAAAQB}
{\bkmkend AAAAAAAAQB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_waterPumpGPIOState\:RelayBoard}
{\xe \v RelayBoard\:m_waterPumpGPIOState}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RelayBoard::m_waterPumpGPIOState}}
\par
{\bkmkstart AAAAAAAAQC}
{\bkmkend AAAAAAAAQC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b RelayBoard.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b RelayBoard.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RFID Class Reference\par \pard\plain 
{\tc\tcl2 \v RFID}
{\xe \v RFID}
{\bkmkstart AAAAAAAAQD}
{\bkmkend AAAAAAAAQD}
\par
{
{\f2 #include <RFID.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b RFID} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Initialize} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setMfrc} ({\b mfrc522::MFRC522} *mfrc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v RFID\:RFID}
{\xe \v RFID\:RFID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
RFID::RFID (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAQE}
{\bkmkend AAAAAAAAQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_r_f_i_d_a91e8d4d6abb74ae099f9144d553db6ed_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Initialize\:RFID}
{\xe \v RFID\:Initialize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void RFID::Initialize ()}}
\par
{\bkmkstart AAAAAAAAQF}
{\bkmkend AAAAAAAAQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setMfrc\:RFID}
{\xe \v RFID\:setMfrc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void RFID::setMfrc ({\b mfrc522::MFRC522} *  {\i mfrc}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAQG}
{\bkmkend AAAAAAAAQG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v start\:RFID}
{\xe \v RFID\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void RFID::start (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAQH}
{\bkmkend AAAAAAAAQH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_r_f_i_d_a8a7a0e6133646a29c2102cc1b1633650_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b RFID.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b RFID.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RFIDThread Class Reference\par \pard\plain 
{\tc\tcl2 \v RFIDThread}
{\xe \v RFIDThread}
{\bkmkstart AAAAAAAAQI}
{\bkmkend AAAAAAAAQI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Rfid Thread to manage rfid detection functionality. }}\par
{
{\f2 #include <RFIDThread.h>}}\par
Inheritance diagram for RFIDThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_r_f_i_d_thread__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for RFIDThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_r_f_i_d_thread__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b RFIDThread} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b join} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Rfid Thread to manage rfid detection functionality. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v RFIDThread\:RFIDThread}
{\xe \v RFIDThread\:RFIDThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
RFIDThread::RFIDThread (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAQJ}
{\bkmkend AAAAAAAAQJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Contructor for our rfid thread.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i } \cell }{\cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v join\:RFIDThread}
{\xe \v RFIDThread\:join}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::join (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Waits for the thread to terminate. \par
}Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a8ff0fda6b913cc53764caef0e1200f3f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start\:RFIDThread}
{\xe \v RFIDThread\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CppThread::start (){\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts the thread. \par
}Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_thread_a1be46d1be000f41a763289300623c609_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v stop\:RFIDThread}
{\xe \v RFIDThread\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void RFIDThread::stop (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAQK}
{\bkmkend AAAAAAAAQK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Stop our thread's inner functionality. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/rfid/{\b RFIDThread.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/thread/rfid/{\b RFIDThread.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CppTimerCallback::Runnable Class Reference\par \pard\plain 
{\tc\tcl2 \v CppTimerCallback::Runnable}
{\xe \v CppTimerCallback::Runnable}
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
\par
{
{\f2 #include <CppTimerCallback.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b run} ()=0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v run\:CppTimerCallback::Runnable}
{\xe \v CppTimerCallback::Runnable\:run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void CppTimerCallback::Runnable::run (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_cpp_timer_callback_1_1_runnable_af8d11a3b580e76431151e76ac1886e6e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/utils/{\b CppTimerCallback.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ServoMotor Class Reference\par \pard\plain 
{\tc\tcl2 \v ServoMotor}
{\xe \v ServoMotor}
{\bkmkstart AAAAAAAAQL}
{\bkmkend AAAAAAAAQL}
\par
{
{\f2 #include <ServoMotor.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ServoMotor} (int pin)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ServoMotor} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b write} (int angle)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ServoMotor\:ServoMotor}
{\xe \v ServoMotor\:ServoMotor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ServoMotor::ServoMotor (int  {\i pin})}}
\par
{\bkmkstart AAAAAAAAQM}
{\bkmkend AAAAAAAAQM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~ServoMotor\:ServoMotor}
{\xe \v ServoMotor\:~ServoMotor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ServoMotor::~ServoMotor ()}}
\par
{\bkmkstart AAAAAAAAQN}
{\bkmkend AAAAAAAAQN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v write\:ServoMotor}
{\xe \v ServoMotor\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ServoMotor::write (int  {\i angle})}}
\par
{\bkmkstart AAAAAAAAQO}
{\bkmkend AAAAAAAAQO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b ServoMotor.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b ServoMotor.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
spidevpp::Spi Class Reference\par \pard\plain 
{\tc\tcl2 \v spidevpp::Spi}
{\xe \v spidevpp::Spi}
{\bkmkstart AAAAAAAAYO}
{\bkmkend AAAAAAAAYO}
\par
{
{\f2 #include <spi.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Spi} (const std::string &device)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBitsPerWord} (uint8_t bitsPerWord)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b getBitsPerWord} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setSpeed} (uint32_t speed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b getSpeed} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setMode} (uint32_t mode)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b getMode} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setDelay} (std::chrono::microseconds)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::chrono::microseconds {\b getDelay} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b write} (char *pData, size_t len)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b read} (char *pData, size_t len)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b writeRead} (char *pData, size_t len)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b writeRead} (char data)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class Stream > Stream & {\b operator<<} (Stream &out, const {\b Spi} &)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Spi\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:Spi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
spidevpp::Spi::Spi (const std::string &  {\i device}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAAAYP}
{\bkmkend AAAAAAAAYP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getBitsPerWord\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:getBitsPerWord}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t spidevpp::Spi::getBitsPerWord () const}}
\par
{\bkmkstart AAAAAAAAYQ}
{\bkmkend AAAAAAAAYQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getDelay\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:getDelay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::chrono::microseconds spidevpp::Spi::getDelay () const}}
\par
{\bkmkstart AAAAAAAAYR}
{\bkmkend AAAAAAAAYR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getMode\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:getMode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t spidevpp::Spi::getMode () const}}
\par
{\bkmkstart AAAAAAAAYS}
{\bkmkend AAAAAAAAYS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getSpeed\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:getSpeed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t spidevpp::Spi::getSpeed () const}}
\par
{\bkmkstart AAAAAAAAYT}
{\bkmkend AAAAAAAAYT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v read\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void spidevpp::Spi::read (char *  {\i pData}, size_t  {\i len})}}
\par
{\bkmkstart AAAAAAAAYU}
{\bkmkend AAAAAAAAYU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classspidevpp_1_1_spi_a4904e24513ca4bdeb3b1bfad23d49962_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v setBitsPerWord\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:setBitsPerWord}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void spidevpp::Spi::setBitsPerWord (uint8_t  {\i bitsPerWord})}}
\par
{\bkmkstart AAAAAAAAYV}
{\bkmkend AAAAAAAAYV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classspidevpp_1_1_spi_a11196eac443c99e4ff1aadfaab8e71c7_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v setDelay\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:setDelay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void spidevpp::Spi::setDelay (std::chrono::microseconds  {\i delay})}}
\par
{\bkmkstart AAAAAAAAYW}
{\bkmkend AAAAAAAAYW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setMode\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:setMode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void spidevpp::Spi::setMode (uint32_t  {\i mode})}}
\par
{\bkmkstart AAAAAAAAYX}
{\bkmkend AAAAAAAAYX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classspidevpp_1_1_spi_a86c0d72ac83f697168e200a13ed915b1_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v setSpeed\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:setSpeed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void spidevpp::Spi::setSpeed (uint32_t  {\i speed})}}
\par
{\bkmkstart AAAAAAAAYY}
{\bkmkend AAAAAAAAYY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classspidevpp_1_1_spi_af1876959b848c59a9a7ff5a8db5399cb_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v write\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void spidevpp::Spi::write (char *  {\i pData}, size_t  {\i len})}}
\par
{\bkmkstart AAAAAAAAYZ}
{\bkmkend AAAAAAAAYZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classspidevpp_1_1_spi_a43b2fea53e280e1a4bd6d29d969440a4_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v writeRead\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:writeRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void spidevpp::Spi::writeRead (char *  {\i pData}, size_t  {\i len})}}
\par
{\bkmkstart AAAAAAAAZA}
{\bkmkend AAAAAAAAZA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classspidevpp_1_1_spi_a4ba82061fa64e934b0fdc1a10bcfccd8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v writeRead\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:writeRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char spidevpp::Spi::writeRead (char  {\i data})}}
\par
{\bkmkstart AAAAAAAAZB}
{\bkmkend AAAAAAAAZB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classspidevpp_1_1_spi_a1979af4d7e1c36aefc7d5b011bcc2968_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends And Related Function Documentation\par
\pard\plain 
{\xe \v operator<<\:spidevpp::Spi}
{\xe \v spidevpp::Spi\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class Stream > Stream & operator<< (Stream &  {\i out}, const {\b Spi} &  {\i spi}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAZC}
{\bkmkend AAAAAAAAZC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/dependencies/spidevpp/libs/spidevpp/{\b spi.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/dependencies/spidevpp/libs/spidevpp/{\b spi.cc}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Spidev Class Reference\par \pard\plain 
{\tc\tcl2 \v Spidev}
{\xe \v Spidev}
{\bkmkstart AAAAAAAAQP}
{\bkmkend AAAAAAAAQP}
\par
{
{\f2 #include <spidev_impl.h>}}\par
Inheritance diagram for Spidev:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_spidev__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for Spidev:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_spidev__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Spidev} (const std::string &device)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b write} (char *pData, size_t len) final\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b read} (char *pData, size_t len) final\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b writeRead} (char *pData, size_t len) final\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b writeRead} (char data) final\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b spidevpp::Spi} {\b mSpi}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Spidev\:Spidev}
{\xe \v Spidev\:Spidev}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Spidev::Spidev (const std::string &  {\i device}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAQQ}
{\bkmkend AAAAAAAAQQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v read\:Spidev}
{\xe \v Spidev\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Spidev::read (char *  {\i pData}, size_t  {\i len}){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAQR}
{\bkmkend AAAAAAAAQR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::ISpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_spidev_a7832e3c327f0c0df825728f6aabe0a0b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v write\:Spidev}
{\xe \v Spidev\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Spidev::write (char *  {\i pData}, size_t  {\i len}){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAQS}
{\bkmkend AAAAAAAAQS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::ISpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_spidev_a40c147da19e908a2e8e76b8b586b1170_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v writeRead\:Spidev}
{\xe \v Spidev\:writeRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Spidev::writeRead (char *  {\i pData}, size_t  {\i len}){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAQT}
{\bkmkend AAAAAAAAQT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::ISpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIW \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_spidev_a38c616bb4143f726ce083c947d7a6956_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v writeRead\:Spidev}
{\xe \v Spidev\:writeRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char Spidev::writeRead (char  {\i data}){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAQU}
{\bkmkend AAAAAAAAQU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::ISpi} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIY \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_spidev_afccf95fa06e9ea6ef9629935d73d28f1_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v mSpi\:Spidev}
{\xe \v Spidev\:mSpi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b spidevpp::Spi} Spidev::mSpi}}
\par
{\bkmkstart AAAAAAAAQV}
{\bkmkend AAAAAAAAQV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/spi/{\b spidev_impl.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SysGpio Class Reference\par \pard\plain 
{\tc\tcl2 \v SysGpio}
{\xe \v SysGpio}
{\bkmkstart AAAAAAAAQW}
{\bkmkend AAAAAAAAQW}
\par
{
{\f2 #include <sys_gpio_impl.h>}}\par
Inheritance diagram for SysGpio:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_sys_gpio__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for SysGpio:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_sys_gpio__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Value} \{ {\b low} = 0
, {\b high} = 1
, {\b l} = 0
, {\b h} = 1
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Value} \{ {\b low} = 0
, {\b high} = 1
, {\b l} = 0
, {\b h} = 1
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SysGpio} (unsigned int pin, {\b spidevpp::Gpio::Direction} direction, {\b spidevpp::Gpio::Value} value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setValue} ({\b Value} value) final\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Value} {\b getValue} () final\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b spidevpp::Gpio} {\b mGpio}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Enumeration Documentation\par
\pard\plain 
{\xe \v Value\:SysGpio}
{\xe \v SysGpio\:Value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b mfrc522::IGpio::Value}{\f2 [strong]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v low\:SysGpio}
{\xe \v SysGpio\:low}
{\qr low{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
\cell }{\cell }{\row }
{\xe \v high\:SysGpio}
{\xe \v SysGpio\:high}
{\qr high{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
\cell }{\cell }{\row }
{\xe \v l\:SysGpio}
{\xe \v SysGpio\:l}
{\qr l{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
\cell }{\cell }{\row }
{\xe \v h\:SysGpio}
{\xe \v SysGpio\:h}
{\qr h{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
\cell }{\cell }{\row }
}
}
{\xe \v Value\:SysGpio}
{\xe \v SysGpio\:Value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b mfrc522::IGpio::Value}{\f2 [strong]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v low\:SysGpio}
{\xe \v SysGpio\:low}
{\qr low{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
\cell }{\cell }{\row }
{\xe \v high\:SysGpio}
{\xe \v SysGpio\:high}
{\qr high{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
\cell }{\cell }{\row }
{\xe \v l\:SysGpio}
{\xe \v SysGpio\:l}
{\qr l{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
\cell }{\cell }{\row }
{\xe \v h\:SysGpio}
{\xe \v SysGpio\:h}
{\qr h{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
\cell }{\cell }{\row }
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v SysGpio\:SysGpio}
{\xe \v SysGpio\:SysGpio}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SysGpio::SysGpio (unsigned int  {\i pin}, {\b spidevpp::Gpio::Direction}  {\i direction}, {\b spidevpp::Gpio::Value}  {\i value}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAQX}
{\bkmkend AAAAAAAAQX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getValue\:SysGpio}
{\xe \v SysGpio\:getValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Value} SysGpio::getValue (){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAQY}
{\bkmkend AAAAAAAAQY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::IGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_sys_gpio_a71909fb86a71f59b4263f39121dbe16b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v setValue\:SysGpio}
{\xe \v SysGpio\:setValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SysGpio::setValue ({\b Value}  {\i value}){\f2 [inline]}, {\f2 [final]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAQZ}
{\bkmkend AAAAAAAAQZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b mfrc522::IGpio} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIO \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_sys_gpio_a9baa7e752011933cbbdb85645038e7f9_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v mGpio\:SysGpio}
{\xe \v SysGpio\:mGpio}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b spidevpp::Gpio} SysGpio::mGpio}}
\par
{\bkmkstart AAAAAAAARA}
{\bkmkend AAAAAAAARA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/spi/{\b sys_gpio_impl.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Threads Class Reference\par \pard\plain 
{\tc\tcl2 \v Threads}
{\xe \v Threads}
{\bkmkstart AAAAAAAARB}
{\bkmkend AAAAAAAARB}
\par
{
{\f2 #include <Threads.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setIntruderThread} ({\b IntruderThread} *it)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IntruderThread} {\b getIntruderThread} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getIntruderThread\:Threads}
{\xe \v Threads\:getIntruderThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b IntruderThread} Threads::getIntruderThread (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAARC}
{\bkmkend AAAAAAAARC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setIntruderThread\:Threads}
{\xe \v Threads\:setIntruderThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Threads::setIntruderThread ({\b IntruderThread} *  {\i it}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAARD}
{\bkmkend AAAAAAAARD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/utils/{\b Threads.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
mfrc522::MFRC522::Uid Struct Reference\par \pard\plain 
{\tc\tcl2 \v mfrc522::MFRC522::Uid}
{\xe \v mfrc522::MFRC522::Uid}
{\bkmkstart AAAAAAAAXY}
{\bkmkend AAAAAAAAXY}
\par
{
{\f2 #include <mfrc522.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b size}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b uidByte} [10]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b sak}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v sak\:mfrc522::MFRC522::Uid}
{\xe \v mfrc522::MFRC522::Uid\:sak}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::Uid::sak}}
\par
{\bkmkstart AAAAAAAAXZ}
{\bkmkend AAAAAAAAXZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v size\:mfrc522::MFRC522::Uid}
{\xe \v mfrc522::MFRC522::Uid\:size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::Uid::size}}
\par
{\bkmkstart AAAAAAAAYA}
{\bkmkend AAAAAAAAYA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v uidByte\:mfrc522::MFRC522::Uid}
{\xe \v mfrc522::MFRC522::Uid\:uidByte}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t mfrc522::MFRC522::Uid::uidByte}}
\par
{\bkmkstart AAAAAAAAYB}
{\bkmkend AAAAAAAAYB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/dependencies/mfrc522/{\b mfrc522.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/peripherals/{\b MFRC522.h}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CODE_OF_CONDUCT.md File Reference\par \pard\plain 
{\tc\tcl2 \v CODE_OF_CONDUCT.md}
{\xe \v CODE_OF_CONDUCT.md}
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
hardware/README.md File Reference\par \pard\plain 
{\tc\tcl2 \v hardware/README.md}
{\xe \v hardware/README.md}
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
README.md File Reference\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dependencies/spidevpp/README.md File Reference\par \pard\plain 
{\tc\tcl2 \v src/dependencies/spidevpp/README.md}
{\xe \v src/dependencies/spidevpp/README.md}
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/clap-detection/ClapDetection.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/clap-detection/ClapDetection.cpp}
{\xe \v src/clap-detection/ClapDetection.cpp}
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ClapDetection.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ClapDetection.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_clap_detection_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal & Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions for Clap Detection. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/clap-detection/ClapDetection.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/clap-detection/ClapDetection.h}
{\xe \v src/clap-detection/ClapDetection.h}
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "CppTimer.h"}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <cmath>}\par
{\f2 #include <fstream>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <complex>}\par
{\f2 #include <limits>}\par
{\f2 #include <stdexcept>}\par
{\f2 #include <portaudio.h>}\par
{\f2 #include <cstring>}\par
{\f2 #include <stdio.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ClapDetection.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_clap_detection_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_clap_detection_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ClapDetection}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal & Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Header file for clap detection. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ClapDetection.h\par \pard\plain 
{\tc\tcl2 \v src/clap-detection/ClapDetection.h}
{\xe \v src/clap-detection/ClapDetection.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef CLAP_DETECTION_H}\par
9 {\cf21 #define CLAP_DETECTION_H}\par
10 \par
11 {\cf21 #include "CppTimer.h"}\par
12 {\cf20 // #include "../utils/Events.h"}\par
13 \par
14 {\cf21 #include <iostream>}\par
15 {\cf21 #include <vector>}\par
16 {\cf21 #include <cmath>}\par
17 {\cf21 #include <fstream>}\par
18 {\cf21 #include <algorithm>}\par
19 {\cf21 #include <complex>}\par
20 {\cf21 #include <limits>}\par
21 {\cf21 #include <stdexcept>}\par
22 {\cf21 #include <portaudio.h>}\par
23 {\cf21 #include <cstring>}\par
24 {\cf21 #include <stdio.h>}\par
25 \par
26 {\cf20 // enum SIGNAL_CODES \{}\par
27 {\cf20 //     CLAP_DETECTED = 1}\par
28 {\cf20 // \};}\par
29 \par
30 {\cf17 class }ClapDetection \{\par
31     {\cf17 public}:\par
32         ClapDetection() \{\par
33 \par
34         \}\par
35 \par
36         {\cf18 void} Initialize();\par
37         \par
38         {\cf18 void} openStream() \{\par
39             err = Pa_OpenStream(&stream,\par
40                                 &inputParameters,\par
41                                 {\cf17 nullptr}, {\cf20 // No output}\par
42                                 44100,   {\cf20 // Sample rate}\par
43                                 256,     {\cf20 // Frames per buffer}\par
44                                 paClipOff,\par
45                                 paCallback,\par
46                                 &audioData);\par
47             \par
48             {\cf19 if} (err != paNoError) \{\par
49                 std::cerr << {\cf22 "PortAudio error open stream: "} << Pa_GetErrorText(err) << std::endl;\par
50                 raise(SIGHUP);\par
51                 {\cf19 return};\par
52             \}\par
53 \par
54             err = Pa_StartStream(stream);\par
55             {\cf19 if} (err != paNoError) \{\par
56                 std::cerr << {\cf22 "PortAudio error start stream: "} << Pa_GetErrorText(err) << std::endl;\par
57                 Pa_CloseStream(stream);\par
58                 Pa_Terminate();\par
59                 raise(SIGHUP);\par
60                 {\cf19 return};\par
61             \}\par
62         \}\par
63         \par
64         {\cf18 void} closeStream() \{\par
65             {\cf20 // Stop audio stream}\par
66             err = Pa_AbortStream(stream);\par
67             {\cf19 if} (err != paNoError) \{\par
68                 std::cerr << {\cf22 "PortAudio error abort stream: "} << Pa_GetErrorText(err) << std::endl;\par
69                 raise(SIGHUP);\par
70                 {\cf19 return};\par
71             \}\par
72 \par
73             {\cf20 // Close audio stream}\par
74             err = Pa_CloseStream(stream);\par
75             {\cf19 if} (err != paNoError) \{\par
76                 std::cerr << {\cf22 "Portudio error close stream: "} << Pa_GetErrorText(err) << std::endl;\par
77                 raise(SIGHUP);\par
78                 {\cf19 return};\par
79             \}\par
80         \}\par
81 \par
82         {\cf18 void} start() \{\par
83             {\cf19 return};\par
84             {\cf19 while}({\cf17 true}) \{\par
85                 std::vector<float> audioData;\par
86             \par
87                 err = Pa_OpenStream(&stream,\par
88                                     &inputParameters,\par
89                                     {\cf17 nullptr}, {\cf20 // No output}\par
90                                     44100,   {\cf20 // Sample rate}\par
91                                     256,     {\cf20 // Frames per buffer}\par
92                                     paClipOff,\par
93                                     paCallback,\par
94                                     &audioData);\par
95                 \par
96                 {\cf19 if} (err != paNoError) \{\par
97                     std::cerr << {\cf22 "PortAudio error: "} << Pa_GetErrorText(err) << std::endl;\par
98                     raise(SIGHUP);\par
99                     {\cf19 return};\par
100                 \}\par
101 \par
102                 err = Pa_StartStream(stream);\par
103                 {\cf19 if} (err != paNoError) \{\par
104                     std::cerr << {\cf22 "PortAudio error: "} << Pa_GetErrorText(err) << std::endl;\par
105                     Pa_CloseStream(stream);\par
106                     Pa_Terminate();\par
107                     raise(SIGHUP);\par
108                     {\cf19 return};\par
109                 \}\par
110 \par
111                 {\cf20 // Record for 1 seconds}\par
112                 std::cout << {\cf22 "Recording audio for 1.0 seconds..."} << std::endl;\par
113                 Pa_Sleep(1000);\par
114 \par
115 \par
116                 {\cf20 // Run clap detection}\par
117                 std::cout << {\cf22 "Running clap detection on recorded audio..."} << std::endl;\par
118 \par
119                 std::vector<double> audioDataDouble(audioData.begin(), audioData.end());\par
120                 std::cout << audioData.size() << std::endl;\par
121                 {\cf18 double} per = find_per_data(audioDataDouble, y_find);\par
122 \par
123                 {\cf20 // double per = find_per("recorded_audio.wav", "sample4.wav");}\par
124                 {\cf18 bool} found = result(per, 0.5);\par
125                 \par
126                 {\cf20 // Stop audio stream}\par
127                 err = Pa_AbortStream(stream);\par
128                 {\cf19 if} (err != paNoError) \{\par
129                     std::cerr << {\cf22 "PortAudio error: "} << Pa_GetErrorText(err) << std::endl;\par
130                     raise(SIGHUP);\par
131                     {\cf19 return};\par
132                 \}\par
133 \par
134                 {\cf20 // Close audio stream}\par
135                 err = Pa_CloseStream(stream);\par
136                 {\cf19 if} (err != paNoError) \{\par
137                     std::cerr << {\cf22 "Portudio error: "} << Pa_GetErrorText(err) << std::endl;\par
138                     raise(SIGHUP);\par
139                     {\cf19 return};\par
140                 \}\par
141 \par
142                 {\cf19 if}(found)\{\par
143                     {\cf20 // eventHandler->dispatch(EVENT_CODES::CLAP_DETECTED);}\par
144                     Pa_Terminate();\par
145                     {\cf19 break};\par
146                 \}\par
147             \}\par
148         \}\par
149 \par
150         {\cf18 void} stop(){\cf17  const }\{\par
151             {\cf20 // Terminate PortAudio}\par
152             Pa_Terminate();\par
153         \}\par
154         \par
155         {\cf18 void} record() \{\par
156             {\cf20 // Record for 1 seconds}\par
157             std::cout << {\cf22 "Recording audio for 3.0 seconds..."} << std::endl;\par
158             Pa_Sleep(3000);\par
159             \par
160             {\cf19 if}(!recorded) recorded = {\cf17 true};\par
161         \}\par
162         \par
163         {\cf18 bool} detectClap() \{\par
164             {\cf19 if}(!recorded) {\cf19 return} {\cf17 false};\par
165             \par
166             std::vector<double> audioDataDouble(audioData.begin(), audioData.end());\par
167             std::cout << audioData.size() << std::endl;\par
168             {\cf18 double} per = find_per_data(audioDataDouble, y_find);\par
169             \par
170             std::cout << per << std::endl;\par
171             \par
172             {\cf20 // double per = find_per("recorded_audio.wav", "sample4.wav");}\par
173             {\cf18 bool} found = result(per, 0.5);\par
174             \par
175             std::cout << found << std::endl;\par
176             \par
177             {\cf19 if}(!found)\{\par
178                 audioData.clear();\par
179             \} {\cf19 else} \{\par
180                 closeStream();\par
181                 stop();\par
182             \}\par
183             \par
184             {\cf19 return} found;\par
185         \}\par
186         \par
187         {\cf20 // Helper function to reverse bits of a number}\par
188         {\cf17 static} {\cf18 int} reverse_bits({\cf18 int} num, {\cf18 int} bit_length) \{\par
189             {\cf18 int} result = 0;\par
190             {\cf19 for} ({\cf18 int} i = 0; i < bit_length; i++) \{\par
191                 result = (result << 1) | (num & 1);\par
192                 num >>= 1;\par
193             \}\par
194             {\cf19 return} result;\par
195         \}\par
196 \par
197         {\cf20 // Compute the iterative in-place FFT of a vector}\par
198         {\cf17 static} {\cf18 void} fft(std::vector<std::complex<double>>& a, {\cf18 bool} inverse) \{\par
199             {\cf18 int} n = a.size();\par
200             {\cf18 int} log_n = std::log2(n);\par
201 \par
202             {\cf20 // Bit-reverse permutation}\par
203             {\cf19 for} ({\cf18 int} i = 0; i < n; i++) \{\par
204                 {\cf18 int} j = reverse_bits(i, log_n);\par
205                 {\cf19 if} (i < j) \{\par
206                     std::swap(a[i], a[j]);\par
207                 \}\par
208             \}\par
209 \par
210             {\cf20 // Iterative FFT}\par
211             {\cf19 for} ({\cf18 int} len = 2; len <= n; len <<= 1) \{\par
212                 {\cf18 double} angle = 2 * M_PI / len * (inverse ? -1 : 1);\par
213                 std::complex<double> wn(std::cos(angle), std::sin(angle));\par
214                 {\cf19 for} ({\cf18 int} i = 0; i < n; i += len) \{\par
215                     std::complex<double> w(1);\par
216                     {\cf19 for} ({\cf18 int} j = 0; j < len / 2; j++) \{\par
217                         std::complex<double> u = a[i + j];\par
218                         std::complex<double> v = a[i + j + len / 2] * w;\par
219                         a[i + j] = u + v;\par
220                         a[i + j + len / 2] = u - v;\par
221                         w *= wn;\par
222                     \}\par
223                 \}\par
224             \}\par
225 \par
226             {\cf20 // If inverse FFT, divide by n}\par
227             {\cf19 if} (inverse) \{\par
228                 {\cf19 for} ({\cf17 auto}& x : a) \{\par
229                     x /= n;\par
230                 \}\par
231             \}\par
232         \}\par
233 \par
234         {\cf20 //Compute the circular convolution of two vectors using the DFT}\par
235         {\cf17 static} std::vector<double> convolve({\cf17 const} std::vector<double>& a, {\cf17 const} std::vector<double>& b) \{\par
236             {\cf18 int} n = a.size();\par
237             {\cf18 int} m = b.size();\par
238             {\cf18 int} l = n + m - 1;\par
239             {\cf18 int} p = 1;\par
240             {\cf19 while} (p < l) \{\par
241                 p <<= 1;\par
242             \}\par
243             std::vector<std::complex<double>> pa(p), pb(p), pc(p);\par
244             std::copy(a.begin(), a.end(), pa.begin());\par
245             std::copy(b.begin(), b.end(), pb.begin());\par
246             fft(pa, {\cf17 false});\par
247             fft(pb, {\cf17 false});\par
248             std::transform(pa.begin(), pa.end(), pb.begin(), pc.begin(),\par
249                     []({\cf17 const} std::complex<double>& a, {\cf17 const} std::complex<double>& b) \{ return a * b; \});\par
250             fft(pc, {\cf17 true});\par
251             std::vector<double> result(l);\par
252             {\cf20 // Use std::transform to compute the real part of each complex number}\par
253             std::transform(pc.begin(), pc.begin() + l, result.begin(),\par
254                     []({\cf17 const} std::complex<double>& cplx) \{ return std::real(cplx) * std::real(cplx); \});\par
255 \par
256             {\cf19 return} result;\par
257         \}\par
258 \par
259         {\cf20 // Load the audio file for sampling.}\par
260         {\cf17 static} std::vector<double> load_audio_file({\cf17 const} std::string& filename) \{\par
261             std::ifstream file(filename, std::ios::binary);\par
262             {\cf19 if} (!file) \{\par
263                 {\cf19 throw} std::runtime_error({\cf22 "Unable to open file!"});\par
264             \}\par
265             \par
266             {\cf20 // read the header}\par
267             {\cf18 char} header[44];\par
268             file.read(header, 44);\par
269             \par
270             {\cf20 // read data}\par
271             {\cf17 const} {\cf18 int} BUFFER_SIZE = 4096; {\cf20 // arbitrary buffer size}\par
272             std::vector<double> data;\par
273             {\cf18 short} buffer[BUFFER_SIZE];\par
274             {\cf19 while} (file.read({\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(&buffer[0]), BUFFER_SIZE * {\cf17 sizeof}({\cf18 short}))) \{\par
275                 {\cf19 for} ({\cf18 int} i = 0; i < BUFFER_SIZE; i++) \{\par
276                     data.push_back({\cf17 static_cast<}{\cf18 double}{\cf17 >}(buffer[i]) / std::numeric_limits<short>::max());\par
277                 \}\par
278             \}\par
279             \par
280             {\cf19 return} data;\par
281         \}\par
282 \par
283         {\cf20 // }\par
284         {\cf17 static} {\cf18 double} percentage_above_threshold({\cf17 const} std::vector<double>& a, {\cf18 double} threshold) \{\par
285             {\cf17 const} {\cf18 int} count = std::count_if(a.begin(), a.end(), [threshold]({\cf18 double} i) \{ return i > threshold; \});\par
286             {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(count) / {\cf17 static_cast<}{\cf18 double}{\cf17 >}(a.size()) * 100.0;\par
287         \}\par
288 \par
289         {\cf20 // }\par
290         {\cf17 static} {\cf18 double} find_per({\cf17 const} std::string& within_file, {\cf17 const} std::string& find_file) \{\par
291             std::vector<double> y_within = load_audio_file(within_file);\par
292             std::vector<double> y_find = load_audio_file(find_file);\par
293 \par
294             std::vector<double> c = convolve(y_within, y_find);\par
295             \par
296             {\cf18 double} thres = *std::max_element(c.begin(), c.end()) / 8.0;\par
297             {\cf18 double} count = percentage_above_threshold(c, thres);\par
298 \par
299 \par
300             {\cf19 return} count;\par
301         \}\par
302 \par
303         {\cf20 // }\par
304         {\cf17 static} {\cf18 double} find_per_data({\cf17 const} std::vector<double>& within_data, {\cf17 const} std::vector<double>& y_find) \{\par
305             std::vector<double> c = convolve(within_data, y_find);\par
306             \par
307             {\cf18 double} thres = *std::max_element(c.begin(), c.end()) / 8.0;\par
308             {\cf18 double} count = percentage_above_threshold(c, thres);\par
309 \par
310 \par
311             {\cf19 return} count;\par
312         \}\par
313 \par
314         {\cf20 // }\par
315         {\cf17 static} {\cf18 bool} result({\cf18 double} per, {\cf18 double} check)\{\par
316             {\cf19 if} (per <= check) \{\par
317                 {\cf19 return} {\cf17 true};\par
318             \}\par
319             {\cf19 return} {\cf17 false};\par
320         \}\par
321 \par
322         {\cf17 static} {\cf18 int} paCallback({\cf17 const} {\cf18 void} *inputBuffer, {\cf18 void} *outputBuffer,\par
323                {\cf18 unsigned} {\cf18 long} framesPerBuffer,\par
324                {\cf17 const} PaStreamCallbackTimeInfo *timeInfo,\par
325                PaStreamCallbackFlags statusFlags,\par
326                {\cf18 void} *userData) \{\par
327             std::vector<float> *audioData = {\cf17 reinterpret_cast<}std::vector<float> *{\cf17 >}(userData);\par
328             {\cf17 const} {\cf18 float} *readPtr = ({\cf17 const} {\cf18 float} *)inputBuffer;\par
329             audioData->insert(audioData->end(), readPtr, readPtr + framesPerBuffer);\par
330             {\cf19 return} paContinue;\par
331         \}\par
332 \par
333     {\cf17 private}:\par
334         \par
335         std::vector<double> y_find;\par
336         std::string clapSamplePath = {\cf22 "../src/resources/clap-detection/sample.wav"};\par
337         \par
338         std::vector<double> audioData = std::vector<double>(100,0.0);\par
339         {\cf17 static} std::vector<double>* y_findPtr;\par
340         \par
341         {\cf18 bool} recorded = {\cf17 false};\par
342         \par
343         PaError err;\par
344         PaStream *stream;\par
345         PaStreamParameters inputParameters;\par
346 \};\par
347 \par
348 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/controller/Controller.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/controller/Controller.cpp}
{\xe \v src/controller/Controller.cpp}
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Controller.h"}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Controller.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_controller_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}{\b Controller} functions for the controller class. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/controller/Controller.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/controller/Controller.h}
{\xe \v src/controller/Controller.h}
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_controller_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Controller}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}{\b Controller} class. There's not much to it. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Controller.h\par \pard\plain 
{\tc\tcl2 \v src/controller/Controller.h}
{\xe \v src/controller/Controller.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
9 {\cf21 #ifndef CONTROLLER_H}\par
10 {\cf21 #define CONTROLLER_H}\par
11 \par
12 {\cf17 class }Controller \{\par
13     {\cf17 public}:\par
14         Controller() \{\par
15 \par
16         \}\par
17     \par
18     {\cf17 private}:\par
19         {\cf18 void} RFIDHandler();\par
20 \};\par
21 \par
22 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dependencies/mfrc522/igpio.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/dependencies/mfrc522/igpio.h}
{\xe \v src/dependencies/mfrc522/igpio.h}
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <cstddef>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for igpio.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dependencies_2mfrc522_2igpio_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dependencies_2mfrc522_2igpio_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b mfrc522::IGpio}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b mfrc522}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
igpio.h\par \pard\plain 
{\tc\tcl2 \v src/dependencies/mfrc522/igpio.h}
{\xe \v src/dependencies/mfrc522/igpio.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include <cstddef>}\par
5 \par
6 {\cf17 namespace }mfrc522 \{\par
7 \par
8 {\cf17 struct }IGpio \{\par
9 \par
10     {\cf17 enum class} Value \{\par
11         low = 0,\par
12         high = 1\par
13     \};\par
14 \par
15     {\cf17 virtual} {\cf18 void} setValue(Value) = 0;\par
16     {\cf17 virtual} Value getValue() = 0;\par
17 \};\par
18 \par
19 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/bcm2835/igpio.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/bcm2835/igpio.h}
{\xe \v src/peripherals/bcm2835/igpio.h}
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <cstddef>}\par
{\f2 #include <cstdint>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for igpio.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "peripherals_2bcm2835_2igpio_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "peripherals_2bcm2835_2igpio_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b mfrc522::IGpio}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b mfrc522}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
igpio.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/bcm2835/igpio.h}
{\xe \v src/peripherals/bcm2835/igpio.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include <cstddef>}\par
5 {\cf21 #include <cstdint>}\par
6 \par
7 {\cf17 namespace }mfrc522 \{\par
8 \par
9     {\cf17 struct }IGpio \{\par
10 \par
11         {\cf17 enum class} Value \{\par
12             l = 0,\par
13             h = 1\par
14         \};\par
15 \par
16         {\cf17 virtual} {\cf18 void} setValue(Value) = 0;\par
17         {\cf17 virtual} Value getValue() = 0;\par
18     \};\par
19 \par
20 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dependencies/mfrc522/ispi.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/dependencies/mfrc522/ispi.h}
{\xe \v src/dependencies/mfrc522/ispi.h}
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <cstddef>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ispi.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dependencies_2mfrc522_2ispi_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dependencies_2mfrc522_2ispi_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b mfrc522::ISpi}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b mfrc522}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ispi.h\par \pard\plain 
{\tc\tcl2 \v src/dependencies/mfrc522/ispi.h}
{\xe \v src/dependencies/mfrc522/ispi.h}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include <cstddef>}\par
5 \par
6 {\cf17 namespace }mfrc522 \{\par
7 \par
8 {\cf17 struct }ISpi \{\par
9     {\cf17 virtual} {\cf18 void} write({\cf18 char}* pData, {\cf18 size_t} len) = 0;\par
10     {\cf17 virtual} {\cf18 void} read({\cf18 char}* pData, {\cf18 size_t} len) = 0;\par
11     {\cf17 virtual} {\cf18 void} writeRead({\cf18 char}* pData, {\cf18 size_t} len) = 0;\par
12     {\cf17 virtual} {\cf18 char} writeRead({\cf18 char} data) = 0;\par
13 \};\par
14 \par
15 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/bcm2835/ispi.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/bcm2835/ispi.h}
{\xe \v src/peripherals/bcm2835/ispi.h}
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <cstddef>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ispi.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "peripherals_2bcm2835_2ispi_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "peripherals_2bcm2835_2ispi_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b mfrc522::ISpi}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b mfrc522}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ispi.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/bcm2835/ispi.h}
{\xe \v src/peripherals/bcm2835/ispi.h}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include <cstddef>}\par
5 \par
6 {\cf17 namespace }mfrc522 \{\par
7 \par
8 {\cf17 struct }ISpi \{\par
9     {\cf17 virtual} {\cf18 void} write({\cf18 char}* pData, {\cf18 size_t} len) = 0;\par
10     {\cf17 virtual} {\cf18 void} read({\cf18 char}* pData, {\cf18 size_t} len) = 0;\par
11     {\cf17 virtual} {\cf18 void} writeRead({\cf18 char}* pData, {\cf18 size_t} len) = 0;\par
12     {\cf17 virtual} {\cf18 char} writeRead({\cf18 char} data) = 0;\par
13 \};\par
14 \par
15 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dependencies/mfrc522/mfrc522.cc File Reference\par \pard\plain 
{\tc\tcl2 \v src/dependencies/mfrc522/mfrc522.cc}
{\xe \v src/dependencies/mfrc522/mfrc522.cc}
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "mfrc522.h"}\par
{\f2 #include <linux/types.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <cstring>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <string>}\par
{\f2 #include <iostream>}\par
{\f2 #include <thread>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for mfrc522.cc:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "mfrc522_8cc__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b mfrc522}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dependencies/mfrc522/mfrc522.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/dependencies/mfrc522/mfrc522.h}
{\xe \v src/dependencies/mfrc522/mfrc522.h}
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ispi.h"}\par
{\f2 #include "igpio.h"}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <string>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for mfrc522.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dependencies_2mfrc522_2mfrc522_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dependencies_2mfrc522_2mfrc522_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b mfrc522::MFRC522}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b mfrc522::MFRC522::Uid}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b mfrc522::MFRC522::MIFARE_Key}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b mfrc522}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef uint16_t {\b mfrc522::word}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const uint8_t {\b mfrc522::MFRC522_firmware_referenceV1_0} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const uint8_t {\b mfrc522::MFRC522_firmware_referenceV2_0} []\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
mfrc522.h\par \pard\plain 
{\tc\tcl2 \v src/dependencies/mfrc522/mfrc522.h}
{\xe \v src/dependencies/mfrc522/mfrc522.h}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include "ispi.h"}\par
5 {\cf21 #include "igpio.h"}\par
6 \par
7 {\cf21 #include <stdint.h>}\par
8 {\cf21 #include <stdio.h>}\par
9 {\cf21 #include <string>}\par
10 \par
11 {\cf17 namespace }mfrc522 \{\par
12 \par
13 {\cf17 using namespace }std;\par
14 \par
15 {\cf17 typedef} uint16_t word;\par
16 \par
17 {\cf20 // Firmware data for self-test}\par
18 {\cf20 // Reference values based on firmware version; taken from 16.1.1 in spec.}\par
19 {\cf20 // Version 1.0}\par
20 \par
21 {\cf17 const} uint8_t MFRC522_firmware_referenceV1_0[]  = \{\par
22     0x00, 0xC6, 0x37, 0xD5, 0x32, 0xB7, 0x57, 0x5C,\par
23     0xC2, 0xD8, 0x7C, 0x4D, 0xD9, 0x70, 0xC7, 0x73,\par
24     0x10, 0xE6, 0xD2, 0xAA, 0x5E, 0xA1, 0x3E, 0x5A,\par
25     0x14, 0xAF, 0x30, 0x61, 0xC9, 0x70, 0xDB, 0x2E,\par
26     0x64, 0x22, 0x72, 0xB5, 0xBD, 0x65, 0xF4, 0xEC,\par
27     0x22, 0xBC, 0xD3, 0x72, 0x35, 0xCD, 0xAA, 0x41,\par
28     0x1F, 0xA7, 0xF3, 0x53, 0x14, 0xDE, 0x7E, 0x02,\par
29     0xD9, 0x0F, 0xB5, 0x5E, 0x25, 0x1D, 0x29, 0x79\par
30 \};\par
31 \par
32 {\cf20 // Version 2.0}\par
33 {\cf17 const} uint8_t MFRC522_firmware_referenceV2_0[] = \{\par
34     0x00, 0xEB, 0x66, 0xBA, 0x57, 0xBF, 0x23, 0x95,\par
35     0xD0, 0xE3, 0x0D, 0x3D, 0x27, 0x89, 0x5C, 0xDE,\par
36     0x9D, 0x3B, 0xA7, 0x00, 0x21, 0x5B, 0x89, 0x82,\par
37     0x51, 0x3A, 0xEB, 0x02, 0x0C, 0xA5, 0x00, 0x49,\par
38     0x7C, 0x84, 0x4D, 0xB3, 0xCC, 0xD2, 0x1B, 0x81,\par
39     0x5D, 0x48, 0x76, 0xD5, 0x71, 0x61, 0x21, 0xA9,\par
40     0x86, 0x96, 0x83, 0x38, 0xCF, 0x9D, 0x5B, 0x6D,\par
41     0xDC, 0x15, 0xBA, 0x3E, 0x7D, 0x95, 0x3B, 0x2F\par
42 \};\par
43 \par
44 \par
45 \par
46 {\cf17 class }MFRC522 \{\par
47 {\cf17 public}:\par
48     {\cf20 // MFRC522 registers. Described in chapter 9 of the datasheet.}\par
49     {\cf20 // When using SPI all addresses are shifted one bit left in the "SPI address uint8_t" (section 8.1.2.3)}\par
50     {\cf17 enum} PCD_Register \{\par
51         {\cf20 // Page 0: Command and status}\par
52         {\cf20 //                        0x00          // reserved for future use}\par
53         CommandReg              = 0x01 << 1,    {\cf20 // starts and stops command execution}\par
54         ComIEnReg               = 0x02 << 1,    {\cf20 // enable and disable interrupt request control bits}\par
55         DivIEnReg               = 0x03 << 1,    {\cf20 // enable and disable interrupt request control bits}\par
56         ComIrqReg               = 0x04 << 1,    {\cf20 // interrupt request bits}\par
57         DivIrqReg               = 0x05 << 1,    {\cf20 // interrupt request bits}\par
58         ErrorReg                = 0x06 << 1,    {\cf20 // error bits showing the error status of the last command executed}\par
59         Status1Reg              = 0x07 << 1,    {\cf20 // communication status bits}\par
60         Status2Reg              = 0x08 << 1,    {\cf20 // receiver and transmitter status bits}\par
61         FIFODataReg             = 0x09 << 1,    {\cf20 // input and output of 64 byte FIFO buffer}\par
62         FIFOLevelReg            = 0x0A << 1,    {\cf20 // number of bytes stored in the FIFO buffer}\par
63         WaterLevelReg           = 0x0B << 1,    {\cf20 // level for FIFO underflow and overflow warning}\par
64         ControlReg              = 0x0C << 1,    {\cf20 // miscellaneous control registers}\par
65         BitFramingReg           = 0x0D << 1,    {\cf20 // adjustments for bit-oriented frames}\par
66         CollReg                 = 0x0E << 1,    {\cf20 // bit position of the first bit-collision detected on the RF interface}\par
67         {\cf20 //                        0x0F          // reserved for future use}\par
68 \par
69         {\cf20 // Page 1: Command}\par
70         {\cf20 //                        0x10          // reserved for future use}\par
71         ModeReg                 = 0x11 << 1,    {\cf20 // defines general modes for transmitting and receiving}\par
72         TxModeReg               = 0x12 << 1,    {\cf20 // defines transmission data rate and framing}\par
73         RxModeReg               = 0x13 << 1,    {\cf20 // defines reception data rate and framing}\par
74         TxControlReg            = 0x14 << 1,    {\cf20 // controls the logical behavior of the antenna driver pins TX1 and TX2}\par
75         TxASKReg                = 0x15 << 1,    {\cf20 // controls the setting of the transmission modulation}\par
76         TxSelReg                = 0x16 << 1,    {\cf20 // selects the internal sources for the antenna driver}\par
77         RxSelReg                = 0x17 << 1,    {\cf20 // selects internal receiver settings}\par
78         RxThresholdReg          = 0x18 << 1,    {\cf20 // selects thresholds for the bit decoder}\par
79         DemodReg                = 0x19 << 1,    {\cf20 // defines demodulator settings}\par
80         {\cf20 //                        0x1A          // reserved for future use}\par
81         {\cf20 //                        0x1B          // reserved for future use}\par
82         MfTxReg                 = 0x1C << 1,    {\cf20 // controls some MIFARE communication transmit parameters}\par
83         MfRxReg                 = 0x1D << 1,    {\cf20 // controls some MIFARE communication receive parameters}\par
84         {\cf20 //                        0x1E          // reserved for future use}\par
85         SerialSpeedReg          = 0x1F << 1,    {\cf20 // selects the speed of the serial UART interface}\par
86 \par
87         {\cf20 // Page 2: Configuration}\par
88         {\cf20 //                        0x20          // reserved for future use}\par
89         CRCResultRegH           = 0x21 << 1,    {\cf20 // shows the MSB and LSB values of the CRC calculation}\par
90         CRCResultRegL           = 0x22 << 1,\par
91         {\cf20 //                        0x23          // reserved for future use}\par
92         ModWidthReg             = 0x24 << 1,    {\cf20 // controls the ModWidth setting?}\par
93         {\cf20 //                        0x25          // reserved for future use}\par
94         RFCfgReg                = 0x26 << 1,    {\cf20 // configures the receiver gain}\par
95         GsNReg                  = 0x27 << 1,    {\cf20 // selects the conductance of the antenna driver pins TX1 and TX2 for modulation}\par
96         CWGsPReg                = 0x28 << 1,    {\cf20 // defines the conductance of the p-driver output during periods of no modulation}\par
97         ModGsPReg               = 0x29 << 1,    {\cf20 // defines the conductance of the p-driver output during periods of modulation}\par
98         TModeReg                = 0x2A << 1,    {\cf20 // defines settings for the internal timer}\par
99         TPrescalerReg           = 0x2B << 1,    {\cf20 // the lower 8 bits of the TPrescaler value. The 4 high bits are in TModeReg.}\par
100         TReloadRegH             = 0x2C << 1,    {\cf20 // defines the 16-bit timer reload value}\par
101         TReloadRegL             = 0x2D << 1,\par
102         TCounterValueRegH       = 0x2E << 1,    {\cf20 // shows the 16-bit timer value}\par
103         TCounterValueRegL       = 0x2F << 1,\par
104 \par
105         {\cf20 // Page 3: Test Registers}\par
106         {\cf20 //                        0x30          // reserved for future use}\par
107         TestSel1Reg             = 0x31 << 1,    {\cf20 // general test signal configuration}\par
108         TestSel2Reg             = 0x32 << 1,    {\cf20 // general test signal configuration}\par
109         TestPinEnReg            = 0x33 << 1,    {\cf20 // enables pin output driver on pins D1 to D7}\par
110         TestPinValueReg         = 0x34 << 1,    {\cf20 // defines the values for D1 to D7 when it is used as an I/O bus}\par
111         TestBusReg              = 0x35 << 1,    {\cf20 // shows the status of the internal test bus}\par
112         AutoTestReg             = 0x36 << 1,    {\cf20 // controls the digital self test}\par
113         VersionReg              = 0x37 << 1,    {\cf20 // shows the software version}\par
114         AnalogTestReg           = 0x38 << 1,    {\cf20 // controls the pins AUX1 and AUX2}\par
115         TestDAC1Reg             = 0x39 << 1,    {\cf20 // defines the test value for TestDAC1}\par
116         TestDAC2Reg             = 0x3A << 1,    {\cf20 // defines the test value for TestDAC2}\par
117         TestADCReg              = 0x3B << 1     {\cf20 // shows the value of ADC I and Q channels}\par
118         {\cf20 //                        0x3C          // reserved for production tests}\par
119         {\cf20 //                        0x3D          // reserved for production tests}\par
120         {\cf20 //                        0x3E          // reserved for production tests}\par
121         {\cf20 //                        0x3F          // reserved for production tests}\par
122     \};\par
123 \par
124     {\cf20 // MFRC522 commands. Described in chapter 10 of the datasheet.}\par
125     {\cf17 enum} PCD_Command \{\par
126         PCD_Idle                = 0x00,     {\cf20 // no action, cancels current command execution}\par
127         PCD_Mem                 = 0x01,     {\cf20 // stores 25 bytes into the internal buffer}\par
128         PCD_GenerateRandomID    = 0x02,     {\cf20 // generates a 10-byte random ID number}\par
129         PCD_CalcCRC             = 0x03,     {\cf20 // activates the CRC coprocessor or performs a self test}\par
130         PCD_Transmit            = 0x04,     {\cf20 // transmits data from the FIFO buffer}\par
131         PCD_NoCmdChange         = 0x07,     {\cf20 // no command change, can be used to modify the CommandReg register bits without affecting the command, for example, the PowerDown bit}\par
132         PCD_Receive             = 0x08,     {\cf20 // activates the receiver circuits}\par
133         PCD_Transceive          = 0x0C,     {\cf20 // transmits data from FIFO buffer to antenna and automatically activates the receiver after transmission}\par
134         PCD_MFAuthent           = 0x0E,     {\cf20 // performs the MIFARE standard authentication as a reader}\par
135         PCD_SoftReset           = 0x0F      {\cf20 // resets the MFRC522}\par
136     \};\par
137 \par
138     {\cf20 // MFRC522 RxGain[2:0] masks, defines the receiver's signal voltage gain factor (on the PCD).}\par
139     {\cf20 // Described in 9.3.3.6 / table 98 of the datasheet at http://www.nxp.com/documents/data_sheet/MFRC522.pdf}\par
140     {\cf17 enum} PCD_RxGain \{\par
141         RxGain_18dB             = 0x00 << 4,    {\cf20 // 000b - 18 dB, minimum}\par
142         RxGain_23dB             = 0x01 << 4,    {\cf20 // 001b - 23 dB}\par
143         RxGain_18dB_2           = 0x02 << 4,    {\cf20 // 010b - 18 dB, it seems 010b is a duplicate for 000b}\par
144         RxGain_23dB_2           = 0x03 << 4,    {\cf20 // 011b - 23 dB, it seems 011b is a duplicate for 001b}\par
145         RxGain_33dB             = 0x04 << 4,    {\cf20 // 100b - 33 dB, average, and typical default}\par
146         RxGain_38dB             = 0x05 << 4,    {\cf20 // 101b - 38 dB}\par
147         RxGain_43dB             = 0x06 << 4,    {\cf20 // 110b - 43 dB}\par
148         RxGain_48dB             = 0x07 << 4,    {\cf20 // 111b - 48 dB, maximum}\par
149         RxGain_min              = 0x00 << 4,    {\cf20 // 000b - 18 dB, minimum, convenience for RxGain_18dB}\par
150         RxGain_avg              = 0x04 << 4,    {\cf20 // 100b - 33 dB, average, convenience for RxGain_33dB}\par
151         RxGain_max              = 0x07 << 4     {\cf20 // 111b - 48 dB, maximum, convenience for RxGain_48dB}\par
152     \};\par
153 \par
154     {\cf20 // Commands sent to the PICC.}\par
155     {\cf17 enum} PICC_Command \{\par
156         {\cf20 // The commands used by the PCD to manage communication with several PICCs (ISO 14443-3, Type A, section 6.4)}\par
157         PICC_CMD_REQA           = 0x26,     {\cf20 // REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame.}\par
158         PICC_CMD_WUPA           = 0x52,     {\cf20 // Wake-UP command, Type A. Invites PICCs in state IDLE and HALT to go to READY(*) and prepare for anticollision or selection. 7 bit frame.}\par
159         PICC_CMD_CT             = 0x88,     {\cf20 // Cascade Tag. Not really a command, but used during anti collision.}\par
160         PICC_CMD_SEL_CL1        = 0x93,     {\cf20 // Anti collision/Select, Cascade Level 1}\par
161         PICC_CMD_SEL_CL2        = 0x95,     {\cf20 // Anti collision/Select, Cascade Level 2}\par
162         PICC_CMD_SEL_CL3        = 0x97,     {\cf20 // Anti collision/Select, Cascade Level 3}\par
163         PICC_CMD_HLTA           = 0x50,     {\cf20 // HaLT command, Type A. Instructs an ACTIVE PICC to go to state HALT.}\par
164         {\cf20 // The commands used for MIFARE Classic (from http://www.nxp.com/documents/data_sheet/MF1S503x.pdf, Section 9)}\par
165         {\cf20 // Use PCD_MFAuthent to authenticate access to a sector, then use these commands to read/write/modify the blocks on the sector.}\par
166         {\cf20 // The read/write commands can also be used for MIFARE Ultralight.}\par
167         PICC_CMD_MF_AUTH_KEY_A  = 0x60,     {\cf20 // Perform authentication with Key A}\par
168         PICC_CMD_MF_AUTH_KEY_B  = 0x61,     {\cf20 // Perform authentication with Key B}\par
169         PICC_CMD_MF_READ        = 0x30,     {\cf20 // Reads one 16 byte block from the authenticated sector of the PICC. Also used for MIFARE Ultralight.}\par
170         PICC_CMD_MF_WRITE       = 0xA0,     {\cf20 // Writes one 16 byte block to the authenticated sector of the PICC. Called "COMPATIBILITY WRITE" for MIFARE Ultralight.}\par
171         PICC_CMD_MF_DECREMENT   = 0xC0,     {\cf20 // Decrements the contents of a block and stores the result in the internal data register.}\par
172         PICC_CMD_MF_INCREMENT   = 0xC1,     {\cf20 // Increments the contents of a block and stores the result in the internal data register.}\par
173         PICC_CMD_MF_RESTORE     = 0xC2,     {\cf20 // Reads the contents of a block into the internal data register.}\par
174         PICC_CMD_MF_TRANSFER    = 0xB0,     {\cf20 // Writes the contents of the internal data register to a block.}\par
175         {\cf20 // The commands used for MIFARE Ultralight (from http://www.nxp.com/documents/data_sheet/MF0ICU1.pdf, Section 8.6)}\par
176         {\cf20 // The PICC_CMD_MF_READ and PICC_CMD_MF_WRITE can also be used for MIFARE Ultralight.}\par
177         PICC_CMD_UL_WRITE       = 0xA2      {\cf20 // Writes one 4 byte page to the PICC.}\par
178     \};\par
179 \par
180     {\cf20 // MIFARE constants that does not fit anywhere else}\par
181     {\cf17 enum} MIFARE_Misc \{\par
182         MF_ACK                  = 0xA,      {\cf20 // The MIFARE Classic uses a 4 bit ACK/NAK. Any other value than 0xA is NAK.}\par
183         MF_KEY_SIZE             = 6         {\cf20 // A Mifare Crypto1 key is 6 bytes.}\par
184     \};\par
185 \par
186     {\cf20 // PICC types we can detect. Remember to update PICC_GetTypeName() if you add more.}\par
187     {\cf17 enum} PICC_Type \{\par
188         PICC_TYPE_UNKNOWN       = 0,\par
189         PICC_TYPE_ISO_14443_4   = 1,    {\cf20 // PICC compliant with ISO/IEC 14443-4}\par
190         PICC_TYPE_ISO_18092     = 2,    {\cf20 // PICC compliant with ISO/IEC 18092 (NFC)}\par
191         PICC_TYPE_MIFARE_MINI   = 3,    {\cf20 // MIFARE Classic protocol, 320 bytes}\par
192         PICC_TYPE_MIFARE_1K     = 4,    {\cf20 // MIFARE Classic protocol, 1KB}\par
193         PICC_TYPE_MIFARE_4K     = 5,    {\cf20 // MIFARE Classic protocol, 4KB}\par
194         PICC_TYPE_MIFARE_UL     = 6,    {\cf20 // MIFARE Ultralight or Ultralight C}\par
195         PICC_TYPE_MIFARE_PLUS   = 7,    {\cf20 // MIFARE Plus}\par
196         PICC_TYPE_TNP3XXX       = 8,    {\cf20 // Only mentioned in NXP AN 10833 MIFARE Type Identification Procedure}\par
197         PICC_TYPE_NOT_COMPLETE  = 255   {\cf20 // SAK indicates UID is not complete.}\par
198     \};\par
199 \par
200     {\cf20 // Return codes from the functions in this class. Remember to update GetStatusCodeName() if you add more.}\par
201     {\cf17 enum} StatusCode \{\par
202         STATUS_OK               = 1,    {\cf20 // Success}\par
203         STATUS_ERROR            = 2,    {\cf20 // Error in communication}\par
204         STATUS_COLLISION        = 3,    {\cf20 // Collission detected}\par
205         STATUS_TIMEOUT          = 4,    {\cf20 // Timeout in communication.}\par
206         STATUS_NO_ROOM          = 5,    {\cf20 // A buffer is not big enough.}\par
207         STATUS_INTERNAL_ERROR   = 6,    {\cf20 // Internal error in the code. Should not happen ;-)}\par
208         STATUS_INVALID          = 7,    {\cf20 // Invalid argument.}\par
209         STATUS_CRC_WRONG        = 8,    {\cf20 // The CRC_A does not match}\par
210         STATUS_MIFARE_NACK      = 9     {\cf20 // A MIFARE PICC responded with NAK.}\par
211     \};\par
212 \par
213     {\cf20 // A struct used for passing the UID of a PICC.}\par
214     {\cf17 typedef} {\cf17 struct }\{\par
215         uint8_t     size;           {\cf20 // Number of bytes in the UID. 4, 7 or 10.}\par
216         uint8_t     uidByte[10];\par
217         uint8_t     sak;            {\cf20 // The SAK (Select acknowledge) byte returned from the PICC after successful selection.}\par
218     \} Uid;\par
219 \par
220     {\cf20 // A struct used for passing a MIFARE Crypto1 key}\par
221     {\cf17 typedef} {\cf17 struct }\{\par
222         uint8_t     keyByte[MF_KEY_SIZE];\par
223     \} MIFARE_Key;\par
224 \par
225     {\cf20 // Member variables}\par
226     Uid uid;                                {\cf20 // Used by PICC_ReadCardSerial().}\par
227 \par
228     ISpi& mSpi;\par
229     IGpio& mResetPin;\par
230 \par
231     {\cf20 // Size of the MFRC522 FIFO}\par
232     {\cf17 static} {\cf17 const} uint8_t FIFO_SIZE = 64;        {\cf20 // The FIFO is 64 bytes.}\par
233 \par
235     {\cf20 // Functions for setting up the Raspberry Pi}\par
237 {\cf20 }    MFRC522(ISpi&, IGpio& resetPin);\par
239     {\cf20 // Basic interface functions for communicating with the MFRC522}\par
241 {\cf20 }    {\cf18 void} PCD_WriteRegister(uint8_t reg, uint8_t value);\par
242     {\cf18 void} PCD_WriteRegister(uint8_t reg, uint8_t count, uint8_t *values);\par
243     uint8_t PCD_ReadRegister(uint8_t reg);\par
244     {\cf18 void} PCD_ReadRegister(uint8_t reg, uint8_t count, uint8_t *values, uint8_t rxAlign = 0);\par
245     {\cf18 void} setBitMask({\cf18 unsigned} {\cf18 char} reg, {\cf18 unsigned} {\cf18 char} mask);\par
246     {\cf18 void} PCD_SetRegisterBitMask(uint8_t reg, uint8_t mask);\par
247     {\cf18 void} PCD_ClearRegisterBitMask(uint8_t reg, uint8_t mask);\par
248     uint8_t PCD_CalculateCRC(uint8_t *data, uint8_t length, uint8_t *result);\par
249 \par
251     {\cf20 // Functions for manipulating the MFRC522}\par
253 {\cf20 }    {\cf18 void} PCD_Init();\par
254     {\cf18 void} PCD_Reset();\par
255     {\cf18 void} PCD_AntennaOn();\par
256     {\cf18 void} PCD_AntennaOff();\par
257     uint8_t PCD_GetAntennaGain();\par
258     {\cf18 void} PCD_SetAntennaGain(uint8_t mask);\par
259     {\cf18 bool} PCD_PerformSelfTest();\par
260 \par
262     {\cf20 // Functions for communicating with PICCs}\par
264 {\cf20 }    uint8_t PCD_TransceiveData(uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen, uint8_t *validBits = NULL, uint8_t rxAlign = 0, {\cf18 bool} checkCRC = {\cf17 false});\par
265     uint8_t PCD_CommunicateWithPICC(uint8_t command, uint8_t waitIRq, uint8_t *sendData, uint8_t sendLen, uint8_t *backData = NULL, uint8_t *backLen = NULL, uint8_t *validBits = NULL, uint8_t rxAlign = 0, {\cf18 bool} checkCRC = {\cf17 false});\par
266     uint8_t PICC_RequestA(uint8_t *bufferATQA, uint8_t *bufferSize);\par
267     uint8_t PICC_WakeupA(uint8_t *bufferATQA, uint8_t *bufferSize);\par
268     uint8_t PICC_REQA_or_WUPA(uint8_t command, uint8_t *bufferATQA, uint8_t *bufferSize);\par
269     uint8_t PICC_Select(Uid *uid, uint8_t validBits = 0);\par
270     uint8_t PICC_HaltA();\par
271 \par
273     {\cf20 // Functions for communicating with MIFARE PICCs}\par
275 {\cf20 }    uint8_t PCD_Authenticate(uint8_t command, uint8_t blockAddr, MIFARE_Key *key, Uid *uid);\par
276     {\cf18 void} PCD_StopCrypto1();\par
277     uint8_t MIFARE_Read(uint8_t blockAddr, uint8_t *buffer, uint8_t *bufferSize);\par
278     uint8_t MIFARE_Write(uint8_t blockAddr, uint8_t *buffer, uint8_t bufferSize);\par
279     uint8_t MIFARE_Decrement(uint8_t blockAddr, {\cf18 long} delta);\par
280     uint8_t MIFARE_Increment(uint8_t blockAddr, {\cf18 long} delta);\par
281     uint8_t MIFARE_Restore(uint8_t blockAddr);\par
282     uint8_t MIFARE_Transfer(uint8_t blockAddr);\par
283     uint8_t MIFARE_Ultralight_Write(uint8_t page, uint8_t *buffer, uint8_t bufferSize);\par
284     uint8_t MIFARE_GetValue(uint8_t blockAddr, {\cf18 long} *value);\par
285     uint8_t MIFARE_SetValue(uint8_t blockAddr, {\cf18 long} value);\par
286 \par
288     {\cf20 // Support functions}\par
290 {\cf20 }    uint8_t PCD_MIFARE_Transceive(uint8_t *sendData, uint8_t sendLen, {\cf18 bool} acceptTimeout = {\cf17 false});\par
291     {\cf20 // old function used too much memory, now name moved to flash; if you need char, copy from flash to memory}\par
292     {\cf20 //const char *GetStatusCodeName(uint8_t code);}\par
293     {\cf17 const} {\cf18 string} GetStatusCodeName(uint8_t code);\par
294     uint8_t PICC_GetType(uint8_t sak);\par
295     {\cf20 // old function used too much memory, now name moved to flash; if you need char, copy from flash to memory}\par
296     {\cf20 //const char *PICC_GetTypeName(uint8_t type);}\par
297     {\cf17 const} {\cf18 string} PICC_GetTypeName(uint8_t type);\par
298     {\cf18 void} PICC_DumpToSerial(Uid *uid);\par
299     {\cf18 void} PICC_DumpMifareClassicToSerial(Uid *uid, uint8_t piccType, MIFARE_Key *key);\par
300     {\cf18 void} PICC_DumpMifareClassicSectorToSerial(Uid *uid, MIFARE_Key *key, uint8_t sector);\par
301     {\cf18 void} PICC_DumpMifareUltralightToSerial();\par
302     {\cf18 void} MIFARE_SetAccessBits(uint8_t *accessBitBuffer, uint8_t g0, uint8_t g1, uint8_t g2, uint8_t g3);\par
303     {\cf18 bool} MIFARE_OpenUidBackdoor({\cf18 bool} logErrors);\par
304     {\cf18 bool} MIFARE_SetUid(uint8_t *newUid, uint8_t uidSize, {\cf18 bool} logErrors);\par
305     {\cf18 bool} MIFARE_UnbrickUidSector({\cf18 bool} logErrors);\par
306 \par
308     {\cf20 // Convenience functions - does not add extra functionality}\par
310 {\cf20 }    {\cf18 bool} PICC_IsNewCardPresent();\par
311     {\cf18 bool} PICC_ReadCardSerial();\par
312 \par
313 {\cf17 private}:\par
314     uint8_t MIFARE_TwoStepHelper(uint8_t command, uint8_t blockAddr, {\cf18 long} data);\par
315 \};\par
316 \par
317 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/MFRC522.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/MFRC522.h}
{\xe \v src/peripherals/MFRC522.h}
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "bcm2835/ispi.h"}\par
{\f2 #include "bcm2835/igpio.h"}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <string>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for MFRC522.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "peripherals_2mfrc522_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "peripherals_2mfrc522_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b mfrc522::MFRC522}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b mfrc522::MFRC522::Uid}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b mfrc522::MFRC522::MIFARE_Key}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b mfrc522}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MFRC522.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/MFRC522.h}
{\xe \v src/peripherals/MFRC522.h}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include "bcm2835/ispi.h"}\par
5 {\cf21 #include "bcm2835/igpio.h"}\par
6 \par
7 {\cf21 #include <stdint.h>}\par
8 {\cf21 #include <stdio.h>}\par
9 {\cf21 #include <string>}\par
10 \par
11 {\cf17 namespace }mfrc522 \{\par
12 \par
13 {\cf17 using namespace }std;\par
14 \par
15 {\cf17 typedef} uint16_t word;\par
16 \par
17 {\cf20 // Firmware data for self-test}\par
18 {\cf20 // Reference values based on firmware version; taken from 16.1.1 in spec.}\par
19 {\cf20 // Version 1.0}\par
20 \par
21 {\cf17 const} uint8_t MFRC522_firmware_referenceV1_0[]  = \{\par
22     0x00, 0xC6, 0x37, 0xD5, 0x32, 0xB7, 0x57, 0x5C,\par
23     0xC2, 0xD8, 0x7C, 0x4D, 0xD9, 0x70, 0xC7, 0x73,\par
24     0x10, 0xE6, 0xD2, 0xAA, 0x5E, 0xA1, 0x3E, 0x5A,\par
25     0x14, 0xAF, 0x30, 0x61, 0xC9, 0x70, 0xDB, 0x2E,\par
26     0x64, 0x22, 0x72, 0xB5, 0xBD, 0x65, 0xF4, 0xEC,\par
27     0x22, 0xBC, 0xD3, 0x72, 0x35, 0xCD, 0xAA, 0x41,\par
28     0x1F, 0xA7, 0xF3, 0x53, 0x14, 0xDE, 0x7E, 0x02,\par
29     0xD9, 0x0F, 0xB5, 0x5E, 0x25, 0x1D, 0x29, 0x79\par
30 \};\par
31 \par
32 {\cf20 // Version 2.0}\par
33 {\cf17 const} uint8_t MFRC522_firmware_referenceV2_0[] = \{\par
34     0x00, 0xEB, 0x66, 0xBA, 0x57, 0xBF, 0x23, 0x95,\par
35     0xD0, 0xE3, 0x0D, 0x3D, 0x27, 0x89, 0x5C, 0xDE,\par
36     0x9D, 0x3B, 0xA7, 0x00, 0x21, 0x5B, 0x89, 0x82,\par
37     0x51, 0x3A, 0xEB, 0x02, 0x0C, 0xA5, 0x00, 0x49,\par
38     0x7C, 0x84, 0x4D, 0xB3, 0xCC, 0xD2, 0x1B, 0x81,\par
39     0x5D, 0x48, 0x76, 0xD5, 0x71, 0x61, 0x21, 0xA9,\par
40     0x86, 0x96, 0x83, 0x38, 0xCF, 0x9D, 0x5B, 0x6D,\par
41     0xDC, 0x15, 0xBA, 0x3E, 0x7D, 0x95, 0x3B, 0x2F\par
42 \};\par
43 \par
44 \par
45 \par
46 {\cf17 class }MFRC522 \{\par
47 {\cf17 public}:\par
48     {\cf20 // MFRC522 registers. Described in chapter 9 of the datasheet.}\par
49     {\cf20 // When using SPI all addresses are shifted one bit left in the "SPI address uint8_t" (section 8.1.2.3)}\par
50     {\cf17 enum} PCD_Register \{\par
51         {\cf20 // Page 0: Command and status}\par
52         {\cf20 //                        0x00          // reserved for future use}\par
53         CommandReg              = 0x01 << 1,    {\cf20 // starts and stops command execution}\par
54         ComIEnReg               = 0x02 << 1,    {\cf20 // enable and disable interrupt request control bits}\par
55         DivIEnReg               = 0x03 << 1,    {\cf20 // enable and disable interrupt request control bits}\par
56         ComIrqReg               = 0x04 << 1,    {\cf20 // interrupt request bits}\par
57         DivIrqReg               = 0x05 << 1,    {\cf20 // interrupt request bits}\par
58         ErrorReg                = 0x06 << 1,    {\cf20 // error bits showing the error status of the last command executed}\par
59         Status1Reg              = 0x07 << 1,    {\cf20 // communication status bits}\par
60         Status2Reg              = 0x08 << 1,    {\cf20 // receiver and transmitter status bits}\par
61         FIFODataReg             = 0x09 << 1,    {\cf20 // input and output of 64 byte FIFO buffer}\par
62         FIFOLevelReg            = 0x0A << 1,    {\cf20 // number of bytes stored in the FIFO buffer}\par
63         WaterLevelReg           = 0x0B << 1,    {\cf20 // level for FIFO underflow and overflow warning}\par
64         ControlReg              = 0x0C << 1,    {\cf20 // miscellaneous control registers}\par
65         BitFramingReg           = 0x0D << 1,    {\cf20 // adjustments for bit-oriented frames}\par
66         CollReg                 = 0x0E << 1,    {\cf20 // bit position of the first bit-collision detected on the RF interface}\par
67         {\cf20 //                        0x0F          // reserved for future use}\par
68 \par
69         {\cf20 // Page 1: Command}\par
70         {\cf20 //                        0x10          // reserved for future use}\par
71         ModeReg                 = 0x11 << 1,    {\cf20 // defines general modes for transmitting and receiving}\par
72         TxModeReg               = 0x12 << 1,    {\cf20 // defines transmission data rate and framing}\par
73         RxModeReg               = 0x13 << 1,    {\cf20 // defines reception data rate and framing}\par
74         TxControlReg            = 0x14 << 1,    {\cf20 // controls the logical behavior of the antenna driver pins TX1 and TX2}\par
75         TxASKReg                = 0x15 << 1,    {\cf20 // controls the setting of the transmission modulation}\par
76         TxSelReg                = 0x16 << 1,    {\cf20 // selects the internal sources for the antenna driver}\par
77         RxSelReg                = 0x17 << 1,    {\cf20 // selects internal receiver settings}\par
78         RxThresholdReg          = 0x18 << 1,    {\cf20 // selects thresholds for the bit decoder}\par
79         DemodReg                = 0x19 << 1,    {\cf20 // defines demodulator settings}\par
80         {\cf20 //                        0x1A          // reserved for future use}\par
81         {\cf20 //                        0x1B          // reserved for future use}\par
82         MfTxReg                 = 0x1C << 1,    {\cf20 // controls some MIFARE communication transmit parameters}\par
83         MfRxReg                 = 0x1D << 1,    {\cf20 // controls some MIFARE communication receive parameters}\par
84         {\cf20 //                        0x1E          // reserved for future use}\par
85         SerialSpeedReg          = 0x1F << 1,    {\cf20 // selects the speed of the serial UART interface}\par
86 \par
87         {\cf20 // Page 2: Configuration}\par
88         {\cf20 //                        0x20          // reserved for future use}\par
89         CRCResultRegH           = 0x21 << 1,    {\cf20 // shows the MSB and LSB values of the CRC calculation}\par
90         CRCResultRegL           = 0x22 << 1,\par
91         {\cf20 //                        0x23          // reserved for future use}\par
92         ModWidthReg             = 0x24 << 1,    {\cf20 // controls the ModWidth setting?}\par
93         {\cf20 //                        0x25          // reserved for future use}\par
94         RFCfgReg                = 0x26 << 1,    {\cf20 // configures the receiver gain}\par
95         GsNReg                  = 0x27 << 1,    {\cf20 // selects the conductance of the antenna driver pins TX1 and TX2 for modulation}\par
96         CWGsPReg                = 0x28 << 1,    {\cf20 // defines the conductance of the p-driver output during periods of no modulation}\par
97         ModGsPReg               = 0x29 << 1,    {\cf20 // defines the conductance of the p-driver output during periods of modulation}\par
98         TModeReg                = 0x2A << 1,    {\cf20 // defines settings for the internal timer}\par
99         TPrescalerReg           = 0x2B << 1,    {\cf20 // the lower 8 bits of the TPrescaler value. The 4 high bits are in TModeReg.}\par
100         TReloadRegH             = 0x2C << 1,    {\cf20 // defines the 16-bit timer reload value}\par
101         TReloadRegL             = 0x2D << 1,\par
102         TCounterValueRegH       = 0x2E << 1,    {\cf20 // shows the 16-bit timer value}\par
103         TCounterValueRegL       = 0x2F << 1,\par
104 \par
105         {\cf20 // Page 3: Test Registers}\par
106         {\cf20 //                        0x30          // reserved for future use}\par
107         TestSel1Reg             = 0x31 << 1,    {\cf20 // general test signal configuration}\par
108         TestSel2Reg             = 0x32 << 1,    {\cf20 // general test signal configuration}\par
109         TestPinEnReg            = 0x33 << 1,    {\cf20 // enables pin output driver on pins D1 to D7}\par
110         TestPinValueReg         = 0x34 << 1,    {\cf20 // defines the values for D1 to D7 when it is used as an I/O bus}\par
111         TestBusReg              = 0x35 << 1,    {\cf20 // shows the status of the internal test bus}\par
112         AutoTestReg             = 0x36 << 1,    {\cf20 // controls the digital self test}\par
113         VersionReg              = 0x37 << 1,    {\cf20 // shows the software version}\par
114         AnalogTestReg           = 0x38 << 1,    {\cf20 // controls the pins AUX1 and AUX2}\par
115         TestDAC1Reg             = 0x39 << 1,    {\cf20 // defines the test value for TestDAC1}\par
116         TestDAC2Reg             = 0x3A << 1,    {\cf20 // defines the test value for TestDAC2}\par
117         TestADCReg              = 0x3B << 1     {\cf20 // shows the value of ADC I and Q channels}\par
118         {\cf20 //                        0x3C          // reserved for production tests}\par
119         {\cf20 //                        0x3D          // reserved for production tests}\par
120         {\cf20 //                        0x3E          // reserved for production tests}\par
121         {\cf20 //                        0x3F          // reserved for production tests}\par
122     \};\par
123 \par
124     {\cf20 // MFRC522 commands. Described in chapter 10 of the datasheet.}\par
125     {\cf17 enum} PCD_Command \{\par
126         PCD_Idle                = 0x00,     {\cf20 // no action, cancels current command execution}\par
127         PCD_Mem                 = 0x01,     {\cf20 // stores 25 bytes into the internal buffer}\par
128         PCD_GenerateRandomID    = 0x02,     {\cf20 // generates a 10-byte random ID number}\par
129         PCD_CalcCRC             = 0x03,     {\cf20 // activates the CRC coprocessor or performs a self test}\par
130         PCD_Transmit            = 0x04,     {\cf20 // transmits data from the FIFO buffer}\par
131         PCD_NoCmdChange         = 0x07,     {\cf20 // no command change, can be used to modify the CommandReg register bits without affecting the command, for example, the PowerDown bit}\par
132         PCD_Receive             = 0x08,     {\cf20 // activates the receiver circuits}\par
133         PCD_Transceive          = 0x0C,     {\cf20 // transmits data from FIFO buffer to antenna and automatically activates the receiver after transmission}\par
134         PCD_MFAuthent           = 0x0E,     {\cf20 // performs the MIFARE standard authentication as a reader}\par
135         PCD_SoftReset           = 0x0F      {\cf20 // resets the MFRC522}\par
136     \};\par
137 \par
138     {\cf20 // MFRC522 RxGain[2:0] masks, defines the receiver's signal voltage gain factor (on the PCD).}\par
139     {\cf20 // Described in 9.3.3.6 / table 98 of the datasheet at http://www.nxp.com/documents/data_sheet/MFRC522.pdf}\par
140     {\cf17 enum} PCD_RxGain \{\par
141         RxGain_18dB             = 0x00 << 4,    {\cf20 // 000b - 18 dB, minimum}\par
142         RxGain_23dB             = 0x01 << 4,    {\cf20 // 001b - 23 dB}\par
143         RxGain_18dB_2           = 0x02 << 4,    {\cf20 // 010b - 18 dB, it seems 010b is a duplicate for 000b}\par
144         RxGain_23dB_2           = 0x03 << 4,    {\cf20 // 011b - 23 dB, it seems 011b is a duplicate for 001b}\par
145         RxGain_33dB             = 0x04 << 4,    {\cf20 // 100b - 33 dB, average, and typical default}\par
146         RxGain_38dB             = 0x05 << 4,    {\cf20 // 101b - 38 dB}\par
147         RxGain_43dB             = 0x06 << 4,    {\cf20 // 110b - 43 dB}\par
148         RxGain_48dB             = 0x07 << 4,    {\cf20 // 111b - 48 dB, maximum}\par
149         RxGain_min              = 0x00 << 4,    {\cf20 // 000b - 18 dB, minimum, convenience for RxGain_18dB}\par
150         RxGain_avg              = 0x04 << 4,    {\cf20 // 100b - 33 dB, average, convenience for RxGain_33dB}\par
151         RxGain_max              = 0x07 << 4     {\cf20 // 111b - 48 dB, maximum, convenience for RxGain_48dB}\par
152     \};\par
153 \par
154     {\cf20 // Commands sent to the PICC.}\par
155     {\cf17 enum} PICC_Command \{\par
156         {\cf20 // The commands used by the PCD to manage communication with several PICCs (ISO 14443-3, Type A, section 6.4)}\par
157         PICC_CMD_REQA           = 0x26,     {\cf20 // REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame.}\par
158         PICC_CMD_WUPA           = 0x52,     {\cf20 // Wake-UP command, Type A. Invites PICCs in state IDLE and HALT to go to READY(*) and prepare for anticollision or selection. 7 bit frame.}\par
159         PICC_CMD_CT             = 0x88,     {\cf20 // Cascade Tag. Not really a command, but used during anti collision.}\par
160         PICC_CMD_SEL_CL1        = 0x93,     {\cf20 // Anti collision/Select, Cascade Level 1}\par
161         PICC_CMD_SEL_CL2        = 0x95,     {\cf20 // Anti collision/Select, Cascade Level 2}\par
162         PICC_CMD_SEL_CL3        = 0x97,     {\cf20 // Anti collision/Select, Cascade Level 3}\par
163         PICC_CMD_HLTA           = 0x50,     {\cf20 // HaLT command, Type A. Instructs an ACTIVE PICC to go to state HALT.}\par
164         {\cf20 // The commands used for MIFARE Classic (from http://www.nxp.com/documents/data_sheet/MF1S503x.pdf, Section 9)}\par
165         {\cf20 // Use PCD_MFAuthent to authenticate access to a sector, then use these commands to read/write/modify the blocks on the sector.}\par
166         {\cf20 // The read/write commands can also be used for MIFARE Ultralight.}\par
167         PICC_CMD_MF_AUTH_KEY_A  = 0x60,     {\cf20 // Perform authentication with Key A}\par
168         PICC_CMD_MF_AUTH_KEY_B  = 0x61,     {\cf20 // Perform authentication with Key B}\par
169         PICC_CMD_MF_READ        = 0x30,     {\cf20 // Reads one 16 byte block from the authenticated sector of the PICC. Also used for MIFARE Ultralight.}\par
170         PICC_CMD_MF_WRITE       = 0xA0,     {\cf20 // Writes one 16 byte block to the authenticated sector of the PICC. Called "COMPATIBILITY WRITE" for MIFARE Ultralight.}\par
171         PICC_CMD_MF_DECREMENT   = 0xC0,     {\cf20 // Decrements the contents of a block and stores the result in the internal data register.}\par
172         PICC_CMD_MF_INCREMENT   = 0xC1,     {\cf20 // Increments the contents of a block and stores the result in the internal data register.}\par
173         PICC_CMD_MF_RESTORE     = 0xC2,     {\cf20 // Reads the contents of a block into the internal data register.}\par
174         PICC_CMD_MF_TRANSFER    = 0xB0,     {\cf20 // Writes the contents of the internal data register to a block.}\par
175         {\cf20 // The commands used for MIFARE Ultralight (from http://www.nxp.com/documents/data_sheet/MF0ICU1.pdf, Section 8.6)}\par
176         {\cf20 // The PICC_CMD_MF_READ and PICC_CMD_MF_WRITE can also be used for MIFARE Ultralight.}\par
177         PICC_CMD_UL_WRITE       = 0xA2      {\cf20 // Writes one 4 byte page to the PICC.}\par
178     \};\par
179 \par
180     {\cf20 // MIFARE constants that does not fit anywhere else}\par
181     {\cf17 enum} MIFARE_Misc \{\par
182         MF_ACK                  = 0xA,      {\cf20 // The MIFARE Classic uses a 4 bit ACK/NAK. Any other value than 0xA is NAK.}\par
183         MF_KEY_SIZE             = 6         {\cf20 // A Mifare Crypto1 key is 6 bytes.}\par
184     \};\par
185 \par
186     {\cf20 // PICC types we can detect. Remember to update PICC_GetTypeName() if you add more.}\par
187     {\cf17 enum} PICC_Type \{\par
188         PICC_TYPE_UNKNOWN       = 0,\par
189         PICC_TYPE_ISO_14443_4   = 1,    {\cf20 // PICC compliant with ISO/IEC 14443-4}\par
190         PICC_TYPE_ISO_18092     = 2,    {\cf20 // PICC compliant with ISO/IEC 18092 (NFC)}\par
191         PICC_TYPE_MIFARE_MINI   = 3,    {\cf20 // MIFARE Classic protocol, 320 bytes}\par
192         PICC_TYPE_MIFARE_1K     = 4,    {\cf20 // MIFARE Classic protocol, 1KB}\par
193         PICC_TYPE_MIFARE_4K     = 5,    {\cf20 // MIFARE Classic protocol, 4KB}\par
194         PICC_TYPE_MIFARE_UL     = 6,    {\cf20 // MIFARE Ultralight or Ultralight C}\par
195         PICC_TYPE_MIFARE_PLUS   = 7,    {\cf20 // MIFARE Plus}\par
196         PICC_TYPE_TNP3XXX       = 8,    {\cf20 // Only mentioned in NXP AN 10833 MIFARE Type Identification Procedure}\par
197         PICC_TYPE_NOT_COMPLETE  = 255   {\cf20 // SAK indicates UID is not complete.}\par
198     \};\par
199 \par
200     {\cf20 // Return codes from the functions in this class. Remember to update GetStatusCodeName() if you add more.}\par
201     {\cf17 enum} StatusCode \{\par
202         STATUS_OK               = 1,    {\cf20 // Success}\par
203         STATUS_ERROR            = 2,    {\cf20 // Error in communication}\par
204         STATUS_COLLISION        = 3,    {\cf20 // Collission detected}\par
205         STATUS_TIMEOUT          = 4,    {\cf20 // Timeout in communication.}\par
206         STATUS_NO_ROOM          = 5,    {\cf20 // A buffer is not big enough.}\par
207         STATUS_INTERNAL_ERROR   = 6,    {\cf20 // Internal error in the code. Should not happen ;-)}\par
208         STATUS_INVALID          = 7,    {\cf20 // Invalid argument.}\par
209         STATUS_CRC_WRONG        = 8,    {\cf20 // The CRC_A does not match}\par
210         STATUS_MIFARE_NACK      = 9     {\cf20 // A MIFARE PICC responded with NAK.}\par
211     \};\par
212 \par
213     {\cf20 // A struct used for passing the UID of a PICC.}\par
214     {\cf17 typedef} {\cf17 struct }\{\par
215         uint8_t     size;           {\cf20 // Number of bytes in the UID. 4, 7 or 10.}\par
216         uint8_t     uidByte[10];\par
217         uint8_t     sak;            {\cf20 // The SAK (Select acknowledge) byte returned from the PICC after successful selection.}\par
218     \} Uid;\par
219 \par
220     {\cf20 // A struct used for passing a MIFARE Crypto1 key}\par
221     {\cf17 typedef} {\cf17 struct }\{\par
222         uint8_t     keyByte[MF_KEY_SIZE];\par
223     \} MIFARE_Key;\par
224 \par
225     {\cf20 // Member variables}\par
226     Uid uid;                                {\cf20 // Used by PICC_ReadCardSerial().}\par
227 \par
228     ISpi& mSpi;\par
229     IGpio& mResetPin;\par
230 \par
231     {\cf20 // Size of the MFRC522 FIFO}\par
232     {\cf17 static} {\cf17 const} uint8_t FIFO_SIZE = 64;        {\cf20 // The FIFO is 64 bytes.}\par
233 \par
235     {\cf20 // Functions for setting up the Raspberry Pi}\par
237 {\cf20 }    MFRC522(ISpi&, IGpio& resetPin);\par
239     {\cf20 // Basic interface functions for communicating with the MFRC522}\par
241 {\cf20 }    {\cf18 void} PCD_WriteRegister(uint8_t reg, uint8_t value);\par
242     {\cf18 void} PCD_WriteRegister(uint8_t reg, uint8_t count, uint8_t *values);\par
243     uint8_t PCD_ReadRegister(uint8_t reg);\par
244     {\cf18 void} PCD_ReadRegister(uint8_t reg, uint8_t count, uint8_t *values, uint8_t rxAlign = 0);\par
245     {\cf18 void} setBitMask({\cf18 unsigned} {\cf18 char} reg, {\cf18 unsigned} {\cf18 char} mask);\par
246     {\cf18 void} PCD_SetRegisterBitMask(uint8_t reg, uint8_t mask);\par
247     {\cf18 void} PCD_ClearRegisterBitMask(uint8_t reg, uint8_t mask);\par
248     uint8_t PCD_CalculateCRC(uint8_t *data, uint8_t length, uint8_t *result);\par
249 \par
251     {\cf20 // Functions for manipulating the MFRC522}\par
253 {\cf20 }    {\cf18 void} PCD_Init();\par
254     {\cf18 void} PCD_Reset();\par
255     {\cf18 void} PCD_AntennaOn();\par
256     {\cf18 void} PCD_AntennaOff();\par
257     uint8_t PCD_GetAntennaGain();\par
258     {\cf18 void} PCD_SetAntennaGain(uint8_t mask);\par
259     {\cf18 bool} PCD_PerformSelfTest();\par
260 \par
262     {\cf20 // Functions for communicating with PICCs}\par
264 {\cf20 }    uint8_t PCD_TransceiveData(uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen, uint8_t *validBits = NULL, uint8_t rxAlign = 0, {\cf18 bool} checkCRC = {\cf17 false});\par
265     uint8_t PCD_CommunicateWithPICC(uint8_t command, uint8_t waitIRq, uint8_t *sendData, uint8_t sendLen, uint8_t *backData = NULL, uint8_t *backLen = NULL, uint8_t *validBits = NULL, uint8_t rxAlign = 0, {\cf18 bool} checkCRC = {\cf17 false});\par
266     uint8_t PICC_RequestA(uint8_t *bufferATQA, uint8_t *bufferSize);\par
267     uint8_t PICC_WakeupA(uint8_t *bufferATQA, uint8_t *bufferSize);\par
268     uint8_t PICC_REQA_or_WUPA(uint8_t command, uint8_t *bufferATQA, uint8_t *bufferSize);\par
269     uint8_t PICC_Select(Uid *uid, uint8_t validBits = 0);\par
270     uint8_t PICC_HaltA();\par
271 \par
273     {\cf20 // Functions for communicating with MIFARE PICCs}\par
275 {\cf20 }    uint8_t PCD_Authenticate(uint8_t command, uint8_t blockAddr, MIFARE_Key *key, Uid *uid);\par
276     {\cf18 void} PCD_StopCrypto1();\par
277     uint8_t MIFARE_Read(uint8_t blockAddr, uint8_t *buffer, uint8_t *bufferSize);\par
278     uint8_t MIFARE_Write(uint8_t blockAddr, uint8_t *buffer, uint8_t bufferSize);\par
279     uint8_t MIFARE_Decrement(uint8_t blockAddr, {\cf18 long} delta);\par
280     uint8_t MIFARE_Increment(uint8_t blockAddr, {\cf18 long} delta);\par
281     uint8_t MIFARE_Restore(uint8_t blockAddr);\par
282     uint8_t MIFARE_Transfer(uint8_t blockAddr);\par
283     uint8_t MIFARE_Ultralight_Write(uint8_t page, uint8_t *buffer, uint8_t bufferSize);\par
284     uint8_t MIFARE_GetValue(uint8_t blockAddr, {\cf18 long} *value);\par
285     uint8_t MIFARE_SetValue(uint8_t blockAddr, {\cf18 long} value);\par
286 \par
288     {\cf20 // Support functions}\par
290 {\cf20 }    uint8_t PCD_MIFARE_Transceive(uint8_t *sendData, uint8_t sendLen, {\cf18 bool} acceptTimeout = {\cf17 false});\par
291     {\cf20 // old function used too much memory, now name moved to flash; if you need char, copy from flash to memory}\par
292     {\cf20 //const char *GetStatusCodeName(uint8_t code);}\par
293     {\cf17 const} {\cf18 string} GetStatusCodeName(uint8_t code);\par
294     uint8_t PICC_GetType(uint8_t sak);\par
295     {\cf20 // old function used too much memory, now name moved to flash; if you need char, copy from flash to memory}\par
296     {\cf20 //const char *PICC_GetTypeName(uint8_t type);}\par
297     {\cf17 const} {\cf18 string} PICC_GetTypeName(uint8_t type);\par
298     {\cf18 void} PICC_DumpToSerial(Uid *uid);\par
299     {\cf18 void} PICC_DumpMifareClassicToSerial(Uid *uid, uint8_t piccType, MIFARE_Key *key);\par
300     {\cf18 void} PICC_DumpMifareClassicSectorToSerial(Uid *uid, MIFARE_Key *key, uint8_t sector);\par
301     {\cf18 void} PICC_DumpMifareUltralightToSerial();\par
302     {\cf18 void} MIFARE_SetAccessBits(uint8_t *accessBitBuffer, uint8_t g0, uint8_t g1, uint8_t g2, uint8_t g3);\par
303     {\cf18 bool} MIFARE_OpenUidBackdoor({\cf18 bool} logErrors);\par
304     {\cf18 bool} MIFARE_SetUid(uint8_t *newUid, uint8_t uidSize, {\cf18 bool} logErrors);\par
305     {\cf18 bool} MIFARE_UnbrickUidSector({\cf18 bool} logErrors);\par
306 \par
308     {\cf20 // Convenience functions - does not add extra functionality}\par
310 {\cf20 }    {\cf18 bool} PICC_IsNewCardPresent();\par
311     {\cf18 bool} PICC_ReadCardSerial();\par
312 \par
313 {\cf17 private}:\par
314     uint8_t MIFARE_TwoStepHelper(uint8_t command, uint8_t blockAddr, {\cf18 long} data);\par
315 \};\par
316 \par
317 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dependencies/spidevpp/apps/loopback_example_app/main.cc File Reference\par \pard\plain 
{\tc\tcl2 \v src/dependencies/spidevpp/apps/loopback_example_app/main.cc}
{\xe \v src/dependencies/spidevpp/apps/loopback_example_app/main.cc}
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <spidevpp/spi.h>}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for main.cc:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "main_8cc__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:main.cc}
{\xe \v main.cc\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "main_8cc_a0ddf1224851353fc92bfbff6f499fa97_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dependencies/spidevpp/libs/spidevpp/gpio.cc File Reference\par \pard\plain 
{\tc\tcl2 \v src/dependencies/spidevpp/libs/spidevpp/gpio.cc}
{\xe \v src/dependencies/spidevpp/libs/spidevpp/gpio.cc}
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "gpio.h"}\par
{\f2 #include <fstream>}\par
{\f2 #include <sstream>}\par
{\f2 #include <thread>}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for gpio.cc:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "gpio_8cc__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b spidevpp}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dependencies/spidevpp/libs/spidevpp/gpio.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/dependencies/spidevpp/libs/spidevpp/gpio.h}
{\xe \v src/dependencies/spidevpp/libs/spidevpp/gpio.h}
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for gpio.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "gpio_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "gpio_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b spidevpp::Gpio}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b spidevpp}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gpio.h\par \pard\plain 
{\tc\tcl2 \v src/dependencies/spidevpp/libs/spidevpp/gpio.h}
{\xe \v src/dependencies/spidevpp/libs/spidevpp/gpio.h}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include <string>}\par
5 \par
6 {\cf17 namespace }spidevpp \{\par
7 \par
8 {\cf17 class }Gpio \{\par
9 \par
10 {\cf17 public}:\par
11 \par
12     {\cf17 enum class} Direction \{\par
13         INPUT,\par
14         OUTPUT\par
15     \};\par
16 \par
17     {\cf17 enum class} Value \{\par
18         low = 0,\par
19         high = 1\par
20     \};\par
21 \par
22     Gpio({\cf18 unsigned} {\cf18 int} pin, Direction direction, Value initialValue = Value::low);\par
23 \par
24     {\cf18 void} setValue(Value);\par
25     Value getValue();\par
26 \par
27 {\cf17 private}:\par
28 \par
29     {\cf17 const} {\cf18 unsigned} {\cf18 int} mPin;\par
30     {\cf17 const} Direction mDirection;\par
31     {\cf17 const} std::string mDirectionFilePath;\par
32     {\cf17 const} std::string mValueFilePath;\par
33 \par
34     Value mValue;\par
35 \par
36 \};\par
37 \par
38 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dependencies/spidevpp/libs/spidevpp/spi.cc File Reference\par \pard\plain 
{\tc\tcl2 \v src/dependencies/spidevpp/libs/spidevpp/spi.cc}
{\xe \v src/dependencies/spidevpp/libs/spidevpp/spi.cc}
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "spi.h"}\par
{\f2 #include <fcntl.h>}\par
{\f2 #include <sys/ioctl.h>}\par
{\f2 #include <linux/spi/spidev.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for spi.cc:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "spi_8cc__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b spidevpp}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dependencies/spidevpp/libs/spidevpp/spi.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/dependencies/spidevpp/libs/spidevpp/spi.h}
{\xe \v src/dependencies/spidevpp/libs/spidevpp/spi.h}
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <linux/spi/spidev.h>}\par
{\f2 #include <chrono>}\par
{\f2 #include <string>}\par
{\f2 #include <cstdint>}\par
{\f2 #include <cstddef>}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for spi.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "spi_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "spi_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b spidevpp::Spi}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b spidevpp}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class Stream > Stream & {\b spidevpp::operator<<} (Stream &out, const Spi &spi)\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
spi.h\par \pard\plain 
{\tc\tcl2 \v src/dependencies/spidevpp/libs/spidevpp/spi.h}
{\xe \v src/dependencies/spidevpp/libs/spidevpp/spi.h}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include <linux/spi/spidev.h>}\par
5 \par
6 {\cf21 #include <chrono>}\par
7 {\cf21 #include <string>}\par
8 {\cf21 #include <cstdint>}\par
9 {\cf21 #include <cstddef>}\par
10 {\cf21 #include <iostream>}\par
11 \par
12 {\cf17 namespace }spidevpp \{\par
13 \par
14 {\cf17 class }Spi \{\par
15 \par
16 {\cf17 public}:\par
17 \par
18     {\cf17 explicit} Spi({\cf17 const} std::string& device);\par
19 \par
20     {\cf18 void} setBitsPerWord(uint8_t bitsPerWord);\par
21     uint8_t getBitsPerWord() {\cf17 const};\par
22 \par
23     {\cf18 void} setSpeed(uint32_t speed);\par
24     uint32_t getSpeed() {\cf17 const};\par
25 \par
26     {\cf18 void} setMode(uint32_t mode);\par
27     uint32_t getMode() {\cf17 const};\par
28 \par
29     {\cf18 void} setDelay(std::chrono::microseconds);\par
30     std::chrono::microseconds getDelay() {\cf17 const};\par
31 \par
32     {\cf18 void} write({\cf18 char}* pData, {\cf18 size_t} len);\par
33     {\cf18 void} read({\cf18 char}* pData, {\cf18 size_t} len);\par
34     {\cf18 void} writeRead({\cf18 char}* pData, {\cf18 size_t} len);\par
35     {\cf18 char} writeRead({\cf18 char} data);\par
36 \par
37     {\cf17 template} <{\cf17 class} Stream>\par
38     {\cf17 friend} Stream& operator<<(Stream& out, {\cf17 const} Spi&);\par
39 \par
40 {\cf17 private}:\par
41 \par
42     {\cf17 const} std::string mDevice;\par
43 \par
44     {\cf18 int} mFd;\par
45     uint8_t mBitsPerWord = 8;\par
46     std::chrono::microseconds mDelay = std::chrono::microseconds(0);\par
47     uint32_t mMode = 0;\par
48     uint32_t mSpeed = 500000;\par
49 \par
50 \};\par
51 \par
52 {\cf17 template} <{\cf17 class} Stream>\par
53 Stream& operator<<(Stream& out, {\cf17 const} Spi& spi)\par
54 \{\par
55     out << {\cf22 "SPI "} << spi.mDevice << std::endl;\par
56     out << {\cf22 "\\tMode: "} << spi.getMode() << std::endl;\par
57     out << {\cf22 "\\tSpeed [Hz]: "} << spi.getSpeed() << std::endl;\par
58     out << {\cf22 "\\tWord length [bits]: "} << {\cf17 static_cast<}{\cf18 int}{\cf17 >}(spi.getBitsPerWord()) << std::endl;\par
59     out << {\cf22 "\\tDelay [us]: "} << spi.getDelay().count() << std::endl;\par
60 \par
61     {\cf19 return} out;\par
62 \}\par
63 \par
64 \}\par
65 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/intruder-detection/DatasetCreator.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/intruder-detection/DatasetCreator.cpp}
{\xe \v src/intruder-detection/DatasetCreator.cpp}
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "DatasetCreator.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for DatasetCreator.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_dataset_creator_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal & Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions for Intruder Detection - Dataset Creator. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/intruder-detection/DatasetCreator.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/intruder-detection/DatasetCreator.h}
{\xe \v src/intruder-detection/DatasetCreator.h}
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "CppTimer.h"}\par
{\f2 #include "EventHandler.h"}\par
{\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <fstream>}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for DatasetCreator.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_dataset_creator_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_dataset_creator_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b IntruderDatasetCreator}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal & Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Header file for Intruder Detection - Dataset Creator. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DatasetCreator.h\par \pard\plain 
{\tc\tcl2 \v src/intruder-detection/DatasetCreator.h}
{\xe \v src/intruder-detection/DatasetCreator.h}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef DATASET_CREATOR_H}\par
9 {\cf21 #define DATASET_CREATOR_H}\par
10 \par
11 {\cf21 #include "CppTimer.h"}\par
12 {\cf21 #include "EventHandler.h"}\par
13 \par
14 {\cf21 #include <opencv2/opencv.hpp>}\par
15 {\cf21 #include <fstream>}\par
16 {\cf21 #include <iostream>}\par
17 \par
18 {\cf17 class }IntruderDatasetCreator : {\cf17 public} CppTimer \{\par
20     {\cf18 void} timerEvent() \{\par
21         {\cf20 // std::cout<<"Hi"<<std::endl;}\par
22 \par
23         EventHandler& eventHandler = EventHandler::getInstance();\par
24 \par
25         {\cf20 // break if the sample number is more than 200}\par
26         {\cf19 if} (samples > 200)\{\par
27             std::cout << {\cf22 "Exiting dataset creator..."} << std::endl;\par
28             eventHandler.emit(Event::DatasetCreatorComplete);\par
29             {\cf19 return};\par
30         \}\par
31 \par
32         {\cf19 if}(newUser.empty()) \{\par
33             std::cerr << {\cf22 "Error: No User ID found. Try to initialize the dataset creator first then start the loop."} << std::endl;\par
34             raise(SIGHUP);\par
35             {\cf19 return};\par
36         \}\par
37         \par
38         cv::Mat img;\par
39 \par
40         masterCamera >> img;\par
41         {\cf19 if}(img.empty()) {\cf19 return};\par
42 \par
43         cvtColor(img, gray, cv::COLOR_BGR2GRAY);\par
44 \par
45         detector.detectMultiScale(gray, faces, 1.2, 5);\par
46 \par
47         {\cf19 for} (cv::Rect face : faces) \{\par
48             cv::rectangle(img, face, cv::Scalar(255, 0, 0), 2);\par
49 \par
50             {\cf20 // incrementing sample number}\par
51             samples++;\par
52 \par
53             {\cf20 // saving the captured face in the dataset folder}\par
54             std::string filename = {\cf22 "../src/resources/intruder-detection/dataset/User."} + newUser + {\cf22 "."} + std::to_string(samples) + {\cf22 ".jpg"};\par
55             imwrite(filename, gray(face));\par
56 \par
57             imshow({\cf22 "frame"}, img);\par
58 \par
59             std::cout << {\cf22 "Sample #"} << std::to_string(samples) << std::endl;\par
60 \par
61             {\cf20 // wait for 10 milliseconds}\par
62             cv::waitKey(10);\par
63         \}\par
64     \}\par
65 \par
66     {\cf17 public}:\par
68         IntruderDatasetCreator() \{\par
69 \par
70         \}\par
71 \par
72         {\cf18 void} Initialize(cv::VideoCapture camera);\par
73 \par
74         {\cf18 void} stop() \{\par
75             masterCamera.release();\par
76             cv::destroyAllWindows();\par
77 \par
78             stop();\par
79         \}\par
80 \par
81         std::string trim({\cf17 const} std::string &str) \{\par
82             std::size_t start = str.find_first_not_of({\cf23 ' '});\par
83             std::size_t end = str.find_last_not_of({\cf23 ' '});\par
84         \par
85             {\cf19 if} (start == std::string::npos || end == std::string::npos) \{\par
86                 {\cf19 return} {\cf22 ""};\par
87             \}\par
88         \par
89             {\cf19 return} str.substr(start, end - start + 1);\par
90         \}\par
91 \par
92         {\cf18 int} count_name({\cf17 const} std::string &str) \{\par
93             {\cf18 int} count = 0;\par
94             {\cf19 for} ({\cf17 const} {\cf18 char} &c : str) \{\par
95                 count += 1;\par
96             \}\par
97             std::cout << count << std::endl;\par
98             {\cf19 return} count;\par
99         \}\par
100 \par
101         std::string replace_spaces_with_underscores({\cf17 const} std::string &str) \{\par
102             std::string result = str;\par
103             {\cf19 for} ({\cf18 char} &c : result) \{\par
104                 {\cf19 if} (c == {\cf23 ' '}) \{\par
105                     c = {\cf23 '_'};\par
106                 \}\par
107             \}\par
108             {\cf19 return} result;\par
109         \}\par
110 \par
111         {\cf18 bool} is_valid_name({\cf17 const} std::string &name) \{\par
112             {\cf19 if} (name.empty()) \{\par
113                 {\cf19 return} {\cf17 false};\par
114             \}\par
115         \par
116             {\cf18 bool} has_alpha = {\cf17 false};\par
117             {\cf19 for} ({\cf18 char} c : name) \{\par
118                 {\cf19 if} (!std::isalpha(c) && !std::isspace(c)) \{\par
119                     {\cf19 return} {\cf17 false};\par
120                 \}\par
121                 {\cf19 if} (std::isalpha(c)) \{\par
122                     has_alpha = {\cf17 true};\par
123                 \}\par
124             \}\par
125         \par
126             {\cf19 return} has_alpha;\par
127         \}\par
128 \par
129         {\cf18 bool} findStringInFile({\cf17 const} std::string& fileName, {\cf17 const} std::string& searchString) \{\par
130             std::ifstream file(fileName);\par
131             std::string line;\par
132 \par
133             {\cf19 while} (std::getline(file, line)) \{\par
134                 std::istringstream iss(line);\par
135                 std::string name;\par
136                 std::getline(iss, name, {\cf23 ','});\par
137                 {\cf19 if} (name == searchString) \{\par
138                     {\cf19 return} {\cf17 true};\par
139                 \}\par
140             \}\par
141 \par
142             {\cf19 return} {\cf17 false};\par
143         \}\par
144 \par
145         {\cf18 int} getLastIntegerInFile({\cf17 const} std::string& fileName) \{\par
146             std::ifstream file(fileName);\par
147             std::string line;\par
148             {\cf18 int} lastInteger = 0;\par
149 \par
150             {\cf19 while} (std::getline(file, line)) \{\par
151                 std::istringstream iss(line);\par
152                 std::string name;\par
153                 std::string numStr;\par
154                 std::getline(iss, name, {\cf23 ','});\par
155                 std::getline(iss, numStr);\par
156                 \par
157                 {\cf19 if}(numStr == {\cf22 ""}) \{\par
158                     {\cf19 break};\par
159                 \}\par
160                 \par
161                 {\cf18 int} num = std::stoi(numStr);\par
162                 lastInteger = num;\par
163             \}\par
164 \par
165             {\cf19 return} lastInteger;\par
166         \}\par
167 \par
168         {\cf18 void} appendLineToFile({\cf17 const} std::string& fileName, {\cf17 const} std::string& line) \{\par
169             std::ofstream file(fileName, std::ios_base::app);\par
170             file << line << std::endl;\par
171         \}\par
172         \par
173         {\cf18 int} checkCameraOpen(cv::VideoCapture camera);\par
174 \par
175     {\cf17 private}:\par
176         cv::VideoCapture masterCamera;\par
177 \par
178         cv::CascadeClassifier detector;\par
179         std::string cascadePath = {\cf22 "../src/resources/haarcascade_frontalface_default.xml"};\par
180         {\cf20 // EventHandler& eventHandler = EventHandler::getInstance();}\par
181 \par
182 \par
183         {\cf20 // Events& eventHandler = Events::getInstance();}\par
184         {\cf20 // using EVENT_CODES = Events::EVENT_CODES;}\par
185 \par
186         std::string fileName = {\cf22 "../src/resources/intruder-detection/Users.txt"};\par
187         std::string newUser;\par
188 \par
189         {\cf18 int} samples = 0;\par
190         {\cf18 int} CameraID = 0;\par
191 \par
192         cv::Mat gray;\par
193 \par
194         std::vector<cv::Rect> faces;\par
195 \};\par
196 \par
197 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/intruder-detection/DatasetTrainer.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/intruder-detection/DatasetTrainer.cpp}
{\xe \v src/intruder-detection/DatasetTrainer.cpp}
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "DatasetTrainer.h"}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for DatasetTrainer.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_dataset_trainer_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal & Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions for Intruder Detection - Dataset Trainer. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/intruder-detection/DatasetTrainer.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/intruder-detection/DatasetTrainer.h}
{\xe \v src/intruder-detection/DatasetTrainer.h}
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <opencv2/face.hpp>}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <string>}\par
{\f2 #include <map>}\par
{\f2 #include <fstream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for DatasetTrainer.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_dataset_trainer_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_dataset_trainer_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b IntruderDatasetTrainer}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal & Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Header file for Intruder Detection - Trainer. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DatasetTrainer.h\par \pard\plain 
{\tc\tcl2 \v src/intruder-detection/DatasetTrainer.h}
{\xe \v src/intruder-detection/DatasetTrainer.h}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef DATASET_TRAINER_H}\par
9 {\cf21 #define DATASET_TRAINER_H}\par
10 \par
11 {\cf21 #include <opencv2/opencv.hpp>}\par
12 {\cf21 #include <opencv2/face.hpp>}\par
13 {\cf21 #include <iostream>}\par
14 {\cf21 #include <vector>}\par
15 {\cf21 #include <string>}\par
16 {\cf21 #include <map>}\par
17 {\cf21 #include <fstream>}\par
18 \par
19 {\cf17 class }IntruderDatasetTrainer \{\par
20     {\cf17 public}:\par
21         IntruderDatasetTrainer() \{\par
22         \}\par
23 \par
24         {\cf18 void} Initialize();\par
25 \par
26         std::string extract_username(std::string &input) \{\par
27             input = input.substr(2);\par
28             std::size_t first_dot = input.find({\cf23 '.'});\par
29             std::size_t second_dot = input.find({\cf23 '.'}, first_dot + 1);\par
30 \par
31             {\cf19 return} input.substr(first_dot + 1, second_dot - first_dot - 1);\par
32         \}\par
33 \par
34         std::map<std::string, int> readFileToMap({\cf17 const} std::string& fileName) \{\par
35             std::ifstream file(fileName);\par
36             std::string line;\par
37             std::map<std::string, int> users;\par
38 \par
39             {\cf19 while} (std::getline(file, line)) \{\par
40                 std::istringstream iss(line);\par
41                 std::string name;\par
42                 std::getline(iss, name, {\cf23 ','});\par
43                 std::string numStr;\par
44                 std::getline(iss, numStr);\par
45                 {\cf18 int} num = std::stoi(numStr);\par
46                 users[name] = num;\par
47             \}\par
48 \par
49             {\cf19 return} users;\par
50         \}\par
51 \par
52         {\cf18 void} generateModel()\{\par
53             std::cout << {\cf22 "Started model trainer..."} << std::endl;\par
54 \par
55             cv::glob(base_path + {\cf22 "/dataset/*.jpg"}, imagePaths, {\cf17 false});\par
56 \par
57             users = readFileToMap(fileName);\par
58 \par
59             {\cf19 for} (std::string imagePath : imagePaths) \{\par
60                 cv::Mat image = cv::imread(imagePath, cv::IMREAD_GRAYSCALE);\par
61                 std::cout << imagePath << std::endl;\par
62                 std::string extracted_username = extract_username(imagePath);\par
63                 {\cf17 auto} it = users.find(extracted_username);\par
64                 {\cf18 int} Id = it->second;\par
65 \par
66                 std::cout << extracted_username << {\cf22 ", "} << Id << std::endl;\par
67 \par
68                 std::vector<cv::Rect> faces;\par
69                 detector.detectMultiScale(image, faces, 1.3, 5);\par
70 \par
71                 {\cf19 for} (cv::Rect face : faces) \{\par
72                     faceSamples.push_back(image(face));\par
73                     Ids.push_back(Id);\par
74                 \}\par
75             \}\par
76 \par
77             std::cout << {\cf22 "Completed training. Storing model to file storage..."} << std::endl;\par
78 \par
79             recognizer->train(faceSamples, Ids);\par
80             recognizer->save(base_path + {\cf22 "/trainer/trainer.yml"});\par
81 \par
82             std::cout << {\cf22 "Done..."} << std::endl;\par
83         \}\par
84     \par
85     {\cf17 private}:\par
86         cv::CascadeClassifier detector;\par
87         std::string cascadePath = {\cf22 "../src/resources/haarcascade_frontalface_default.xml"};\par
88         \par
89         cv::Ptr<cv::face::LBPHFaceRecognizer> recognizer = cv::face::LBPHFaceRecognizer::create();\par
90 \par
91         std::vector<cv::Mat> faceSamples;\par
92         std::vector<int> Ids;\par
93 \par
94         std::string base_path = {\cf22 "../src/resources/intruder-detection"};\par
95         std::vector<std::string> imagePaths;\par
96 \par
97         std::string fileName = {\cf22 "../src/resources/intruder-detection/Users.txt"};\par
98         std::map<std::string, int> users;\par
99 \par
100 \};\par
101 \par
102 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/intruder-detection/IntruderDetection.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/intruder-detection/IntruderDetection.cpp}
{\xe \v src/intruder-detection/IntruderDetection.cpp}
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "IntruderDetection.h"}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for IntruderDetection.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_detection_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal & Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions for Intruder Detection. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/intruder-detection/IntruderDetection.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/intruder-detection/IntruderDetection.h}
{\xe \v src/intruder-detection/IntruderDetection.h}
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "CppTimer.h"}\par
{\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <opencv2/face.hpp>}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <string>}\par
{\f2 #include <fstream>}\par
{\f2 #include <sstream>}\par
{\f2 #include <map>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for IntruderDetection.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_detection_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_detection_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b IntruderDetection}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal & Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Header file for Intruder Detection. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntruderDetection.h\par \pard\plain 
{\tc\tcl2 \v src/intruder-detection/IntruderDetection.h}
{\xe \v src/intruder-detection/IntruderDetection.h}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef INTRUDER_DETECTION_H}\par
9 {\cf21 #define INTRUDER_DETECTION_H}\par
10 \par
11 {\cf21 #include "CppTimer.h"}\par
12 \par
13 {\cf21 #include <opencv2/opencv.hpp>}\par
14 {\cf21 #include <opencv2/face.hpp>}\par
15 {\cf21 #include <iostream>}\par
16 {\cf21 #include <vector>}\par
17 {\cf21 #include <string>}\par
18 {\cf21 #include <fstream>}\par
19 {\cf21 #include <sstream>}\par
20 {\cf21 #include <map>}\par
21 \par
22 {\cf17 class }IntruderDetection : {\cf17 public} CppTimer \{\par
23     {\cf18 void} timerEvent () \{\par
24         {\cf19 if} (!masterCamera.isOpened()) \{\par
25             std::cerr << {\cf22 "Error opening camera."} << std::endl;\par
26             {\cf19 return};\par
27         \}\par
28 \par
29         users = readFileToMap(fileName);\par
30 \par
31         masterCamera >> im;\par
32         {\cf19 if}(im.empty()) {\cf19 return};\par
33 \par
34         cv::namedWindow({\cf22 "Face Recognition"}, cv::WINDOW_NORMAL);\par
35 \par
36         cvtColor(im, gray, cv::COLOR_BGR2GRAY);\par
37 \par
38         std::vector<cv::Rect> faces;\par
39         \par
40         detector.detectMultiScale(gray, faces, 1.2, 5);\par
41 \par
42         {\cf19 for} ({\cf18 size_t} i = 0; i < faces.size(); i++) \{\par
43             cv::rectangle(im, faces[i], cv::Scalar(225, 0, 0), 2);\par
44             {\cf18 int} predictedLabel = -1;\par
45             {\cf18 double} confidence = 0.0;\par
46             recognizer->predict(gray(faces[i]), predictedLabel, confidence);\par
47 \par
48             std::string label = {\cf22 "Intruder"};\par
49             {\cf17 auto} it = users.find(predictedLabel);\par
50             {\cf19 if} (confidence < 55 && it != users.end()) \{\par
51             {\cf20 //if (confidence < 55 ) \{}\par
52                 label = it->second;\par
53                 {\cf20 //label = predictedLabel;}\par
54             \} {\cf19 else} \{\par
55                 label = {\cf22 "Intruder"};\par
56             \}\par
57 \par
58             std::cout << {\cf22 "Predicted label: "} << predictedLabel << {\cf22 ", Name: "} << label << {\cf22 ", Confidence: "} << confidence << std::endl;\par
59             putText(im, label, cv::Point(faces[i].x, faces[i].y - 10), cv::FONT_HERSHEY_SIMPLEX, 0.8, cv::Scalar(225, 0, 0), 2);\par
60         \}\par
61         \par
62         {\cf19 try} \{\par
63             imshow({\cf22 "Face Recognition"}, im);\par
64         \} {\cf19 catch} (cv::Exception e) \{\par
65             std::cout << {\cf22 "Expect a segmentation fault to stop intruder detection."} << std::endl;\par
66             raise(SIGHUP);\par
67         \}\par
68         \par
69         {\cf20 // wait for 10 milliseconds}\par
70         cv::waitKey(10);\par
71     \}\par
72 \par
73     {\cf17 public}:\par
74         IntruderDetection() \{\}\par
75 \par
76         {\cf18 void} Initialize(cv::VideoCapture camera);\par
77 \par
78         {\cf18 void} stop() \{\par
79             masterCamera.release();\par
80             cv::destroyAllWindows();\par
81 \par
82             stop();\par
83         \}\par
84 \par
85         std::map<int, std::string> readFileToMap({\cf17 const} std::string& fileName) \{\par
86             std::ifstream file(fileName);\par
87             std::string line;\par
88             std::map<int, std::string> users;\par
89 \par
90             {\cf19 while} (std::getline(file, line)) \{\par
91                 std::istringstream iss(line);\par
92                 std::string name;\par
93                 std::getline(iss, name, {\cf23 ','});\par
94                 std::string numStr;\par
95                 std::getline(iss, numStr);\par
96                 {\cf18 int} num = std::stoi(numStr);\par
97                 users[num] = name;\par
98             \}\par
99 \par
100             {\cf19 return} users;\par
101         \}\par
102 \par
103     {\cf17 private}:\par
104         cv::VideoCapture masterCamera;\par
105 \par
106         cv::Mat im, gray;\par
107 \par
108         cv::CascadeClassifier detector;\par
109         std::string cascadePath = {\cf22 "../src/resources/haarcascade_frontalface_default.xml"};\par
110         std::string trainedModelPath = {\cf22 "../src/resources/intruder-detection/trainer/trainer.yml"};\par
111 \par
112         cv::Ptr<cv::face::LBPHFaceRecognizer> recognizer = cv::face::LBPHFaceRecognizer::create();\par
113 \par
114         std::string fileName = {\cf22 "../src/resources/intruder-detection/Users.txt"};\par
115         std::map<int, std::string> users;\par
116 \};\par
117 \par
118 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/intruder-mood-detection/IntruderMoodDetection.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/intruder-mood-detection/IntruderMoodDetection.cpp}
{\xe \v src/intruder-mood-detection/IntruderMoodDetection.cpp}
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "IntruderMoodDetection.h"}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for IntruderMoodDetection.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_mood_detection_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions for Intruder and Mood Detection Combined.\par
{\f2 https://opencv.org/} \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/intruder-mood-detection/IntruderMoodDetection.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/intruder-mood-detection/IntruderMoodDetection.h}
{\xe \v src/intruder-mood-detection/IntruderMoodDetection.h}
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "CppTimer.h"}\par
{\f2 #include "../utils/Globals.h"}\par
{\f2 #include "EventHandler.h"}\par
{\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <opencv2/face.hpp>}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <string>}\par
{\f2 #include <fstream>}\par
{\f2 #include <sstream>}\par
{\f2 #include <map>}\par
{\f2 #include <deque>}\par
{\f2 #include <algorithm>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for IntruderMoodDetection.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_mood_detection_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_mood_detection_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b IntruderMoodDetection}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntruderMoodDetection.h\par \pard\plain 
{\tc\tcl2 \v src/intruder-mood-detection/IntruderMoodDetection.h}
{\xe \v src/intruder-mood-detection/IntruderMoodDetection.h}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // /**}\par
2 {\cf20 //  * @file IntruderMoodDetection.cpp}\par
3 {\cf20 //  * @author Savan Agrawal}\par
4 {\cf20 //  * @version 0.1}\par
5 {\cf20 //  * }\par
6 {\cf20 //  * Header file for Intruder and Mood Detection Combined.}\par
7 {\cf20 //   *}\par
8 {\cf20 //  * https://opencv.org/}\par
9 {\cf20 // */}\par
10 \par
11 {\cf21 #ifndef INTRUDER_MOOD_DETECTION_H}\par
12 {\cf21 #define INTRUDER_MOOD_DETECTION_H}\par
13 \par
14 {\cf21 #include "CppTimer.h"}\par
15 {\cf21 #include "../utils/Globals.h"}\par
16 {\cf21 #include "EventHandler.h"}\par
17 {\cf21 #include <opencv2/opencv.hpp>}\par
18 {\cf21 #include <opencv2/face.hpp>}\par
19 {\cf21 #include <iostream>}\par
20 {\cf21 #include <vector>}\par
21 {\cf21 #include <string>}\par
22 {\cf21 #include <fstream>}\par
23 {\cf21 #include <sstream>}\par
24 {\cf21 #include <map>}\par
25 {\cf21 #include <deque>}\par
26 {\cf21 #include <algorithm>}\par
27 \par
28 \par
29 {\cf17 class }IntruderMoodDetection : {\cf17 public} CppTimer \{\par
30     {\cf18 void} timerEvent () \{\par
31         {\cf19 if} (!masterCamera.isOpened()) \{\par
32             std::cerr << {\cf22 "Error opening camera."} << std::endl;\par
33             {\cf19 return};\par
34         \}\par
35     \par
36         EventHandler& eventHandler = EventHandler::getInstance();\par
37 \par
38         users = readFileToMap(fileName);\par
39 \par
40         masterCamera >> im;\par
41         {\cf19 if}(im.empty()) {\cf19 return};\par
42 \par
43         cv::namedWindow({\cf22 "Face & Mood Recognition"}, cv::WINDOW_NORMAL);\par
44 \par
45         cvtColor(im, gray, cv::COLOR_BGR2GRAY);\par
46 \par
47         std::vector<cv::Rect> faces;\par
48         \par
49         detector.detectMultiScale(gray, faces, 1.2, 5);\par
50 \par
51         {\cf20 // Initialize queues}\par
52         {\cf20 //std::deque<std::string> intruderValue;}\par
53         {\cf20 //std::deque<int> predValue;}\par
54 \par
55         {\cf19 for} ({\cf17 auto}& face : faces) \{\par
56             cv::rectangle(im, face, cv::Scalar(225, 0, 0), 2);\par
57             {\cf18 int} predictedLabel = -1;\par
58             {\cf18 double} confidence = 0.0;\par
59             recognizer->predict(gray(face), predictedLabel, confidence);\par
60 \par
61             std::string label;\par
62             {\cf17 auto} it = users.find(predictedLabel);\par
63 \par
64             this->roi = gray(face);\par
65 \par
66             {\cf20 //resize(this->roi, this->roi, cv::Size(64, 128));}\par
67             \par
68             {\cf20 //std::vector<float> hog_features;}\par
69             \par
70             {\cf20 //hog.compute(roi, hog_features);}\par
71             {\cf18 float} pred = -1;\par
72 \par
73             {\cf20 // Update intruderValue queue}\par
74             {\cf20 //if (intruderValue.size() == 10) \{}\par
75             {\cf20 //    intruderValue.pop_front();}\par
76             {\cf20 //\}}\par
77 \par
78             {\cf20 // Update predValue queue}\par
79             {\cf20 //if (predValue.size() == 10) \{}\par
80             {\cf20 //    predValue.pop_front();}\par
81             {\cf20 //\}}\par
82             \par
83                                                 \par
84             {\cf19 if} (confidence < 90 && it != users.end()) \{\par
85                 label = it->second;\par
86 \par
87                 {\cf20 //hog.compute(roi, hog_features);}\par
88                 {\cf20 //float prediction = svm->predict(hog_features);}\par
89                 \par
90                 {\cf20 //pred = static_cast<int>(prediction);}\par
91                 \par
92                 {\cf20 //intruderValue.push_back(label);}\par
93                 {\cf20 //predValue.push_back(pred);}\par
94                 eventHandler.emit<{\cf18 int}>(Event::OpenMainDoor, 0);\par
95                 eventHandler.emit(Event::IntruderMoodThreadKill);\par
96             \} {\cf19 else} \{        \par
97                 label = {\cf22 "Intruder"};\par
98             \}\par
99 \par
100             {\cf20 // Calculate the percentage of "Intruder" values in intruderValue queue}\par
101             {\cf20 //int intruderCount = std::count(intruderValue.begin(), intruderValue.end(), "Intruder");}\par
102             {\cf20 //double intruderPercentage = (static_cast<double>(intruderCount) / intruderValue.size()) * 100;}\par
103 \par
104             {\cf20 //if (intruderPercentage <= 20) \{}\par
105             {\cf20 //    std::cout << "User Welcome" << std::endl;}\par
106             {\cf20 //\}}\par
107 \par
108             {\cf20 // Find the most frequent integer in the predValue queue}\par
109             {\cf20 //std::map<int, int> predFrequency;}\par
110             {\cf20 //for (int p : predValue) \{}\par
111             {\cf20 //    predFrequency[p]++;}\par
112             {\cf20 //\}}\par
113 \par
114             {\cf20 //int maxRepetitiveInteger = std::max_element(}\par
115             {\cf20 //    predFrequency.begin(), predFrequency.end(),}\par
116             {\cf20 //    [](const std::pair<int, int>& a, const std::pair<int, int>& b) \{}\par
117             {\cf20 //       return a.second < b.second;}\par
118             {\cf20 //    \}}\par
119             {\cf20 //)->first;}\par
120 \par
121             {\cf20 //std::cout << "Max repetitive emotion: " << emotion[maxRepetitiveInteger] << std::endl;}\par
122 \par
123 \par
124             std::cout << {\cf22 "Predicted label: "} << predictedLabel << {\cf22 ", Name: "} << label << {\cf22 ", Confidence: "} << confidence << std::endl;\par
125             {\cf20 //std::cout << "Emotion: " << emotion[pred] << std::endl;}\par
126             putText(im, label, cv::Point(face.x, face.y - 10), cv::FONT_HERSHEY_SIMPLEX, 0.8, cv::Scalar(225, 0, 0), 2);\par
127         \}\par
128         {\cf20 // Clean up the memory}\par
129         {\cf20 //intruderValue.clear();}\par
130         {\cf20 //predValue.clear();}\par
131         \par
132         {\cf19 try} \{\par
133             imshow({\cf22 "Face & Mood Recognition"}, im);\par
134         \} {\cf19 catch} (cv::Exception e) \{\par
135             std::cout << {\cf22 "Expect a segmentation fault to stop intruder detection."} << std::endl;\par
136             raise(SIGHUP);\par
137         \}\par
138         \par
139         {\cf20 // wait for 10 milliseconds}\par
140         cv::waitKey(10);\par
141     \}\par
142 \par
143     {\cf17 public}:\par
144         IntruderMoodDetection() \{\par
145             cv::Size win_size(64, 128);\par
146             cv::Size block_size(16, 16);\par
147             cv::Size block_stride(8, 8);\par
148             cv::Size cell_size(8, 8);\par
149             \par
150             cv::HOGDescriptor hog(win_size, block_size, block_stride, cell_size, nbins);\par
151             \par
152         \}\par
153 \par
154         {\cf18 void} Initialize(cv::VideoCapture camera);\par
155 \par
156         {\cf18 void} stop() \{\par
157             masterCamera.release();\par
158             cv::destroyAllWindows();\par
159             \par
160             running = {\cf17 false};\par
161             stop();\par
162         \}\par
163         \par
164         {\cf18 void} start() \{\par
165             {\cf19 while}(running) \{\par
166                 {\cf19 if} (!masterCamera.isOpened()) \{\par
167                     std::cerr << {\cf22 "Error opening camera."} << std::endl;\par
168                     {\cf19 break};\par
169                 \}\par
170             \par
171                 EventHandler& eventHandler = EventHandler::getInstance();\par
172 \par
173                 users = readFileToMap(fileName);\par
174 \par
175                 masterCamera >> im;\par
176                 {\cf19 if}(im.empty()) {\cf19 break};\par
177 \par
178                 cv::namedWindow({\cf22 "Face & Mood Recognition"}, cv::WINDOW_NORMAL);\par
179 \par
180                 cvtColor(im, gray, cv::COLOR_BGR2GRAY);\par
181 \par
182                 std::vector<cv::Rect> faces;\par
183                 \par
184                 detector.detectMultiScale(gray, faces, 1.2, 5);\par
185 \par
186                 {\cf19 for} ({\cf17 auto}& face : faces) \{\par
187                     cv::rectangle(im, face, cv::Scalar(225, 0, 0), 2);\par
188                     {\cf18 int} predictedLabel = -1;\par
189                     {\cf18 double} confidence = 0.0;\par
190                     recognizer->predict(gray(face), predictedLabel, confidence);\par
191 \par
192                     std::string label;\par
193                     {\cf17 auto} it = users.find(predictedLabel);\par
194 \par
195                     this->roi = gray(face);\par
196 \par
197                     resize(this->roi, this->roi, cv::Size(64, 128));\par
198                     \par
199                     std::vector<float> hog_features;\par
200                     \par
201                     hog.compute(roi, hog_features);\par
202                     {\cf18 float} pred = -1;\par
203                                                         \par
204                     {\cf19 if} (confidence < 90 && it != users.end()) \{\par
205                         label = it->second;\par
206 \par
207                         hog.compute(roi, hog_features);\par
208                         {\cf18 float} prediction = svm->predict(hog_features);\par
209                         \par
210                         pred = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(prediction);\par
211                         \par
212                         {\cf20 //ledControllerPtr->setRGBColor(emotion.at(pred));}\par
213                         {\cf20 //sleep(3);}\par
214                         {\cf20 //ledControllerPtr->turnOffRGBLED();}\par
215                         running = {\cf17 false};\par
216 \par
217                         std::cout << {\cf22 "Predicted label: "} << predictedLabel << {\cf22 ", Name: "} << label << {\cf22 ", Confidence: "} << confidence << std::endl;\par
218                         std::cout << {\cf22 "Emotion: "} << emotion[pred] << std::endl;\par
219                         putText(im, label+{\cf22 ", "}+emotion[pred], cv::Point(face.x, face.y - 10), cv::FONT_HERSHEY_SIMPLEX, 0.8, cv::Scalar(225, 0, 0), 2);\par
220                 \par
221                         {\cf19 try} \{\par
222                             imshow({\cf22 "Face & Mood Recognition"}, im);\par
223                         \} {\cf19 catch} (cv::Exception e) \{\par
224                             std::cout << {\cf22 "Expect a segmentation fault to stop intruder detection."} << std::endl;\par
225                             raise(SIGHUP);\par
226                         \}\par
227                 \par
228                         {\cf20 // wait for 10 milliseconds}\par
229                         cv::waitKey(10);\par
230                         \par
231                         eventHandler.emit<{\cf18 int}>(Event::OpenMainDoor, pred);\par
232                         {\cf20 //sleep(2);}\par
233                         {\cf20 //eventHandler.emit(Event::IntruderMoodThreadKill);}\par
234                         {\cf20 //return;}\par
235                     \} {\cf19 else} \{\par
236                         label = {\cf22 "Intruder"};\par
237 \par
238                         std::cout << {\cf22 "Predicted label: "} << predictedLabel << {\cf22 ", Name: "} << label << {\cf22 ", Confidence: "} << confidence << std::endl;\par
239                         std::cout << {\cf22 "Emotion: "} << emotion[pred] << std::endl;\par
240                         putText(im, label+{\cf22 ", "}+emotion[pred], cv::Point(face.x, face.y - 10), cv::FONT_HERSHEY_SIMPLEX, 0.8, cv::Scalar(225, 0, 0), 2);\par
241                 \par
242                         {\cf19 try} \{\par
243                             imshow({\cf22 "Face & Mood Recognition"}, im);\par
244                         \} {\cf19 catch} (cv::Exception e) \{\par
245                             std::cout << {\cf22 "Expect a segmentation fault to stop intruder detection."} << std::endl;\par
246                             raise(SIGHUP);\par
247                         \}\par
248                 \par
249                         {\cf20 // wait for 10 milliseconds}\par
250                         cv::waitKey(10);\par
251                     \}\par
252 \par
253                     {\cf20 //std::cout << "Predicted label: " << predictedLabel << ", Name: " << label << ", Confidence: " << confidence << std::endl;}\par
254                     {\cf20 //std::cout << "Emotion: " << emotion[pred] << std::endl;}\par
255                     {\cf20 //putText(im, label+", "+emotion[pred], cv::Point(face.x, face.y - 10), cv::FONT_HERSHEY_SIMPLEX, 0.8, cv::Scalar(225, 0, 0), 2);}\par
256                 \}\par
257             \}\par
258         \}\par
259         \par
260         {\cf18 void} unlock() \{\par
261             running = {\cf17 true};\par
262             start();\par
263         \}\par
264         \par
265         std::map<int, std::string> readFileToMap({\cf17 const} std::string& fileName) \{\par
266             std::ifstream file(fileName);\par
267             std::string line;\par
268             std::map<int, std::string> users;\par
269 \par
270             {\cf19 while} (std::getline(file, line)) \{\par
271                 std::istringstream iss(line);\par
272                 std::string name;\par
273                 std::getline(iss, name, {\cf23 ','});\par
274                 std::string numStr;\par
275                 std::getline(iss, numStr);\par
276                 {\cf18 int} num = std::stoi(numStr);\par
277                 users[num] = name;\par
278             \}\par
279 \par
280             {\cf19 return} users;\par
281         \}\par
282         \par
283         {\cf18 void} restart() \{\par
284             masterCamera.open(CameraID);\par
285         \}\par
286         \par
288         {\cf18 void} setCameraId({\cf18 int} {\cf18 id});\par
289 \par
290         {\cf18 void} setContrasts({\cf18 int} low, {\cf18 int} high);\par
291 \par
292         {\cf18 void} setShutter({\cf18 int} shutter);\par
293 \par
294         {\cf18 int} checkCameraOpen(cv::VideoCapture camera);\par
295 \par
297         cv::Mat takePicture();\par
298 \par
299         {\cf18 void} savePicture(cv::VideoCapture*, std::string filename);\par
300 \par
301     {\cf17 private}:\par
303         {\cf18 int} CameraID = 0;\par
304         {\cf18 int} nbins = 9;\par
305 \par
306         Globals globals;\par
307         cv::VideoCapture masterCamera;\par
308         \par
309         cv::Mat im, gray, roi;\par
310 \par
311         cv::CascadeClassifier detector;\par
312         std::string cascadePath = {\cf22 "../src/resources/haarcascade_frontalface_default.xml"};\par
313         std::string trainedModelPath = {\cf22 "../src/resources/intruder-detection/trainer/trainer.yml"};\par
314 \par
315         cv::Ptr<cv::face::LBPHFaceRecognizer> recognizer = cv::face::LBPHFaceRecognizer::create();\par
316 \par
317         std::string fileName = {\cf22 "../src/resources/intruder-detection/Users.txt"};\par
318         std::map<int, std::string> users;\par
319 \par
320         cv::Ptr<cv::ml::SVM> svm;\par
321 \par
322         cv::Size block_size;\par
323         cv::Size block_stride;\par
324         cv::Size cell_size;\par
325 \par
326         cv::HOGDescriptor hog;\par
327         \par
328         {\cf18 bool} running = {\cf17 true};\par
329         \par
330         {\cf18 bool} locked = {\cf17 false};\par
331         \par
332         {\cf18 int} emits = 0;\par
333         \par
334         {\cf20 // LEDController* ledControllerPtr;}\par
335 \par
336         std::vector<cv::Rect> faces;\par
337         std::map<int, std::string> emotion = \{\par
338             \{0, {\cf22 "Angry"}\},\par
339             \{1, {\cf22 "Disgust"}\},\par
340             \{2, {\cf22 "Fear"}\},\par
341             \{3, {\cf22 "Happy"}\},\par
342             \{4, {\cf22 "Neutral"}\},\par
343             \{5, {\cf22 "Sad"}\},\par
344             \{6, {\cf22 "Surprise"}\}\par
345         \};\par
346 \};\par
347 \par
348 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/main.cpp}
{\xe \v src/main.cpp}
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ControllerThread.h"}\par
{\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <string>}\par
{\f2 #include <boost/filesystem.hpp>}\par
{\f2 #include <pigpio.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for main.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "src_2main_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, const char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}This is main entry for the program. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, const char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "src_2main_8cpp_ac0f2228420376f4db7e1274f2b41667c_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/utils/EventTest/main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/utils/EventTest/main.cpp}
{\xe \v src/utils/EventTest/main.cpp}
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "EventHandler.h"}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for main.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "src_2utils_2_event_test_2main_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "src_2utils_2_event_test_2main_8cpp_ae66f6b31b5ad750f1fe042a706a4e3d4_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/main.cpp}
{\xe \v test/main.cpp}
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/mood-detection/MoodDetection.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/mood-detection/MoodDetection.cpp}
{\xe \v src/mood-detection/MoodDetection.cpp}
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "MoodDetection.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for MoodDetection.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_mood_detection_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal & Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions for mood detection.\par
{\f2 https://opencv.org/} \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/mood-detection/MoodDetection.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/mood-detection/MoodDetection.h}
{\xe \v src/mood-detection/MoodDetection.h}
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "CppTimer.h"}\par
{\f2 #include "../utils/Globals.h"}\par
{\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for MoodDetection.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_mood_detection_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_mood_detection_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b MoodDetection}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal & Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Header file for mood detection. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MoodDetection.h\par \pard\plain 
{\tc\tcl2 \v src/mood-detection/MoodDetection.h}
{\xe \v src/mood-detection/MoodDetection.h}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef MOOD_DETECTION_H}\par
9 {\cf21 #define MOOD_DETECTION_H}\par
10 \par
11 {\cf21 #include "CppTimer.h"}\par
12 {\cf20 // #include "Camera.h"}\par
13 \par
14 {\cf21 #include "../utils/Globals.h"}\par
15 \par
16 {\cf21 #include <opencv2/opencv.hpp>}\par
17 {\cf21 #include <iostream>}\par
18 \par
19 {\cf17 class }MoodDetection : {\cf17 public} CppTimer \{\par
21     {\cf18 void} timerEvent() \{\par
22         {\cf20 // Color values}\par
23         cv::Scalar color(255, 0, 255);\par
24 \par
25         {\cf20 // Take input from camera and return if no image could be found.}\par
26         masterCamera >> im;\par
27         {\cf19 if}(im.empty()) {\cf19 return};\par
28 \par
29         {\cf20 // Set color to grayscale for easier detection.}\par
30         cvtColor(im, gray, cv::COLOR_BGR2GRAY);\par
31 \par
32         {\cf20 // Try to detect faces for multiple people.}\par
33         faceCascade.detectMultiScale(gray, faces, 1.2, 5);\par
34 \par
35         {\cf20 // Set some neutral value for mood detection.}\par
36         {\cf18 int} pred = 4;\par
37 \par
38         {\cf20 // Go through all faces and detect the emotion.}\par
39         {\cf19 for} ({\cf17 auto}& face : faces) \{\par
40             cv::rectangle(im, face, cv::Scalar(225, 0, 0), 2);\par
41 \par
42             this->roi = gray(face);\par
43 \par
44             resize(this->roi, this->roi, cv::Size(64, 128));\par
45             \par
46             std::vector<float> hog_features;\par
47             \par
48             hog.compute(roi, hog_features);\par
49             {\cf18 float} prediction = svm->predict(hog_features);\par
50             \par
51             pred = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(prediction);\par
52             \par
53             std::cout << emotion[pred] << std::endl;\par
54             putText(im, emotion[pred], cv::Point(face.x, face.y - 5), cv::FONT_HERSHEY_SIMPLEX, 1, color, 2);\par
55         \}\par
56 \par
57         {\cf19 try} \{\par
58             imshow({\cf22 "im"}, im);\par
59         \} {\cf19 catch} (cv::Exception e) \{\par
60             std::cout << {\cf22 "Expect a segmentation fault to stop mood detection."} << std::endl;\par
61             raise(SIGHUP);\par
62         \}\par
63 \par
64         {\cf20 // wait for 10 milliseconds}\par
65         cv::waitKey(10);\par
66         {\cf20 // char c = (char)cv::waitKey(10);}\par
67         {\cf20 // if (c == 'q') raise(SIGHUP);}\par
68     \}\par
69 \par
70     {\cf17 public}:\par
72         MoodDetection() \{\par
73             cv::Size win_size(64, 128);\par
74             cv::Size block_size(16, 16);\par
75             cv::Size block_stride(8, 8);\par
76             cv::Size cell_size(8, 8);\par
77 \par
78             cv::HOGDescriptor hog(win_size, block_size, block_stride, cell_size, nbins);\par
79         \}\par
80 \par
82         {\cf18 void} stop() \{\par
83             masterCamera.release();\par
84             cv::destroyAllWindows();\par
85 \par
86             stop();\par
87         \}\par
88 \par
89         {\cf18 void} Initialize(cv::VideoCapture camera);\par
90 \par
92         {\cf18 void} setCameraId({\cf18 int} {\cf18 id});\par
93 \par
94         {\cf18 void} setContrasts({\cf18 int} low, {\cf18 int} high);\par
95 \par
96         {\cf18 void} setShutter({\cf18 int} shutter);\par
97 \par
98         {\cf18 int} checkCameraOpen(cv::VideoCapture camera);\par
99 \par
101         cv::Mat takePicture();\par
102 \par
103         {\cf18 void} savePicture(cv::VideoCapture*, std::string filename);\par
104 \par
108     {\cf17 private}:\par
110         {\cf18 int} CameraID = 0;\par
111         {\cf18 int} nbins = 9;\par
112 \par
113         Globals globals;\par
114 \par
115         cv::VideoCapture masterCamera;\par
116 \par
118         cv::CascadeClassifier faceCascade;\par
119         cv::Mat im;\par
120         cv::Mat gray;\par
121         cv::Mat roi;\par
122 \par
123         cv::Scalar color;\par
124 \par
125         std::string cascadePath = {\cf22 "../src/resources/haarcascade_frontalface_default.xml"};\par
126         cv::Ptr<cv::ml::SVM> svm;\par
127 \par
128         cv::Size block_size;\par
129         cv::Size block_stride;\par
130         cv::Size cell_size;\par
131 \par
132         cv::HOGDescriptor hog;\par
133 \par
134         std::vector<cv::Rect> faces;\par
135         std::map<int, std::string> emotion = \{\par
136             \{0, {\cf22 "Angry"}\},\par
137             \{1, {\cf22 "Disgust"}\},\par
138             \{2, {\cf22 "Fear"}\},\par
139             \{3, {\cf22 "Happy"}\},\par
140             \{4, {\cf22 "Neutral"}\},\par
141             \{5, {\cf22 "Sad"}\},\par
142             \{6, {\cf22 "Surprise"}\}\par
143         \};\par
144 \};\par
145 \par
146 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/bcm2835/bcm2835_gpio_impl.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/bcm2835/bcm2835_gpio_impl.h}
{\xe \v src/peripherals/bcm2835/bcm2835_gpio_impl.h}
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "igpio.h"}\par
{\f2 #include "bcm2835.h"}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for bcm2835_gpio_impl.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "bcm2835__gpio__impl_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b BcmGpio}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
bcm2835_gpio_impl.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/bcm2835/bcm2835_gpio_impl.h}
{\xe \v src/peripherals/bcm2835/bcm2835_gpio_impl.h}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include "igpio.h"}\par
5 \par
6 {\cf21 #include "bcm2835.h"}\par
7 \par
8 {\cf21 #include <iostream>}\par
9 \par
10 {\cf17 class }BcmGpio : {\cf17 public} mfrc522::IGpio \{\par
11 \par
12 {\cf17 public}:\par
13     BcmGpio({\cf18 unsigned} {\cf18 int} pin)\par
14         : mPin(pin)\par
15     \{\par
16         bcm2835_gpio_fsel(pin, BCM2835_GPIO_FSEL_OUTP);\par
17         bcm2835_gpio_write(pin, 0x00);\par
18     \}\par
19 \par
20     {\cf18 void} setValue(Value value) {\cf17 final} \{\par
21         {\cf19 switch} (value) \{\par
22         {\cf19 case} mfrc522::IGpio::Value::l:\par
23             bcm2835_gpio_write(mPin, 0x00);\par
24             {\cf19 break};\par
25         {\cf19 case} mfrc522::IGpio::Value::h:\par
26             bcm2835_gpio_write(mPin, 0x01);\par
27             {\cf19 break};\par
28         \}\par
29 \par
30     \}\par
31 \par
32     Value getValue() final \{\par
33         {\cf19 return} mfrc522::IGpio::Value::l;\par
34     \}\par
35 \par
36 {\cf17 private}:\par
37 \par
38     {\cf17 const} {\cf18 unsigned} {\cf18 int} mPin;\par
39 \par
40 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/bcm2835/bcm2835_spi_impl.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/bcm2835/bcm2835_spi_impl.h}
{\xe \v src/peripherals/bcm2835/bcm2835_spi_impl.h}
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ispi.h"}\par
{\f2 #include "bcm2835.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for bcm2835_spi_impl.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "bcm2835__spi__impl_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b BcmSpi}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
bcm2835_spi_impl.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/bcm2835/bcm2835_spi_impl.h}
{\xe \v src/peripherals/bcm2835/bcm2835_spi_impl.h}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include "ispi.h"}\par
5 \par
6 {\cf21 #include "bcm2835.h"}\par
7 \par
8 {\cf17 class }BcmSpi : {\cf17 public} mfrc522::ISpi\{\par
9 \par
10 {\cf17 public}:\par
11     BcmSpi() \{\par
12         bcm2835_spi_begin();\par
13         bcm2835_spi_setBitOrder(BCM2835_SPI_BIT_ORDER_MSBFIRST);      {\cf20 // The default}\par
14         bcm2835_spi_setDataMode(BCM2835_SPI_MODE0);                   {\cf20 // The default}\par
15         bcm2835_spi_setClockDivider(BCM2835_SPI_CLOCK_DIVIDER_64);    {\cf20 // ~ 4 MHz}\par
16         bcm2835_spi_chipSelect(BCM2835_SPI_CS0);                      {\cf20 // The default}\par
17         bcm2835_spi_setChipSelectPolarity(BCM2835_SPI_CS0, 0x00);      {\cf20 // the default}\par
18     \}\par
19 \par
20     {\cf18 void} write({\cf18 char}* pData, {\cf18 size_t} len) {\cf17 final} \{\par
21         bcm2835_spi_writenb(pData, len);\par
22     \}\par
23 \par
24     {\cf18 void} read({\cf18 char}* pData, {\cf18 size_t} len) {\cf17 final} \{\par
25         bcm2835_spi_transfern(pData, len);\par
26     \}\par
27 \par
28     {\cf18 void} writeRead({\cf18 char}* pData, {\cf18 size_t} len) {\cf17 final} \{\par
29         bcm2835_spi_transfern(pData, len);\par
30     \}\par
31 \par
32     {\cf18 char} writeRead({\cf18 char} data) {\cf17 final} \{\par
33         {\cf19 return} bcm2835_spi_transfer(data);\par
34     \}\par
35 \par
36 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/Camera.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/Camera.cpp}
{\xe \v src/peripherals/Camera.cpp}
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Camera.h"}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Camera.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_camera_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/Camera.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/Camera.h}
{\xe \v src/peripherals/Camera.h}
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Camera.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_camera_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_camera_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Camera}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Support for camera as a class \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Camera.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/Camera.h}
{\xe \v src/peripherals/Camera.h}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef CAMERA_H}\par
9 {\cf21 #define CAMERA_H}\par
10 {\cf21 #include <opencv2/opencv.hpp>}\par
11 {\cf21 #include <iostream>}\par
12 \par
13 {\cf17 class }Camera : {\cf17 public} cv::VideoCapture \{\par
14     {\cf17 public}:\par
15         Camera({\cf18 int} {\cf18 id}) \{\par
16             cv::VideoCapture cam({\cf18 id});\par
17         \}\par
18 \par
19         cv::VideoCapture getCamera() \{\par
20             {\cf19 return} cam;\par
21         \}\par
22 \par
23 \par
24     \par
25     {\cf17 private}:\par
26         cv::VideoCapture cam;\par
27 \};\par
28 \par
29 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/GPIODriver.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/GPIODriver.cpp}
{\xe \v src/peripherals/GPIODriver.cpp}
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "GPIODriver.h"}\par
{\f2 #include "RelayBoard.h"}\par
{\f2 #include <errno.h>}\par
{\f2 #include <fcntl.h>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <sys/stat.h>}\par
{\f2 #include <sys/types.h>}\par
{\f2 #include <unistd.h>}\par
{\f2 #include <string>}\par
{\f2 #include <iostream>}\par
{\f2 #include <sys/mman.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for GPIODriver.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_g_p_i_o_driver_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b IN}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b OUT}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b LOW}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b HIGH}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b GPIO_STRING_LENGTH}\~ 3\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define B. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DIRECTION_STRING_MAX_LENGTH}\~ 35\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b VALUE_STRING_MAX_LENGTH}\~ 30\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}This file contains the functions for GPIO driver class. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DIRECTION_STRING_MAX_LENGTH\:GPIODriver.cpp}
{\xe \v GPIODriver.cpp\:DIRECTION_STRING_MAX_LENGTH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DIRECTION_STRING_MAX_LENGTH\~ 35}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v GPIO_STRING_LENGTH\:GPIODriver.cpp}
{\xe \v GPIODriver.cpp\:GPIO_STRING_LENGTH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GPIO_STRING_LENGTH\~ 3}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define B. }}\par
}
{\xe \v HIGH\:GPIODriver.cpp}
{\xe \v GPIODriver.cpp\:HIGH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define HIGH\~ 1}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v IN\:GPIODriver.cpp}
{\xe \v GPIODriver.cpp\:IN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define IN\~ 0}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v LOW\:GPIODriver.cpp}
{\xe \v GPIODriver.cpp\:LOW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define LOW\~ 0}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v OUT\:GPIODriver.cpp}
{\xe \v GPIODriver.cpp\:OUT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define OUT\~ 1}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v VALUE_STRING_MAX_LENGTH\:GPIODriver.cpp}
{\xe \v GPIODriver.cpp\:VALUE_STRING_MAX_LENGTH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define VALUE_STRING_MAX_LENGTH\~ 30}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/GPIODriver.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/GPIODriver.h}
{\xe \v src/peripherals/GPIODriver.h}
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_g_p_i_o_driver_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GPIODriver}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
GPIO Driver Class. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}This header file contains the class for the GPIO Driver. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GPIODriver.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/GPIODriver.h}
{\xe \v src/peripherals/GPIODriver.h}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
9 {\cf21 #ifndef GPIO_DRIVER_H}\par
10 {\cf21 #define GPIO_DRIVER_H}\par
11 \par
19 {\cf17 class }GPIODriver \{\par
20 \par
21     {\cf17 public}:\par
22         GPIODriver({\cf18 void}) \{\}\par
23 \par
24         {\cf18 int} SetGPIOState({\cf18 int} gpioPinNumber, {\cf18 int} value);\par
25         {\cf18 int} GPIORead({\cf18 int} gpioPinNumber);\par
26         {\cf18 int} SetUpPin({\cf18 int} gpioPinNumber);\par
27         \par
28     {\cf17 private}:\par
29         {\cf18 int} ExportGPIO({\cf18 int} gpioPinNumber);\par
30         {\cf18 int} UnexportGPIO({\cf18 int} gpioPinNumber); \par
31         {\cf18 int} SetGPIODirection({\cf18 int} gpioPinNumber, {\cf18 int} direction);\par
32 \};\par
33 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/I2CDriver.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/I2CDriver.cpp}
{\xe \v src/peripherals/I2CDriver.cpp}
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "I2CDriver.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <unistd.h>}\par
{\f2 #include <time.h>}\par
{\f2 #include <fcntl.h>}\par
{\f2 #include <sys/ioctl.h>}\par
{\f2 #include <errno.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include "i2c/smbus.h"}\par
{\f2 #include <linux/i2c-dev.h>}\par
{\f2 #include <linux/i2c.h>}\par
{\f2 #include "utils.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for I2CDriver.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_i2_c_driver_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CLOCKID}\~ CLOCK_MONOTONIC\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}This file contains the functions for I2C Driver Class. Essentially this is a wrapper for the API provided for I2C Linux Driver. Conatins functions for plain I2C and SMBUS\par
{\f2 https://www.kernel.org/doc/html/latest/driver-api/i2c}. {\f2 https://www.i2c-bus.org/smbus/} \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v CLOCKID\:I2CDriver.cpp}
{\xe \v I2CDriver.cpp\:CLOCKID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CLOCKID\~ CLOCK_MONOTONIC}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/I2CDriver.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/I2CDriver.h}
{\xe \v src/peripherals/I2CDriver.h}
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdint.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for I2CDriver.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_i2_c_driver_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_i2_c_driver_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b I2CDriver}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
I2C Driver class. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b I2C_Return} \{ {\b I2C_OK} = 0
, {\b I2C_IOCTL_FAILED} = -1
, {\b I2C_WRITE_FAILED} = -2
, {\b I2C_READ_FAILED} = -3
, {\b I2C_CRC_FAILED} = -4
, {\b I2C_FAIL} = -5
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}This file contains the class for the I2C Driver \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v I2C_Return\:I2CDriver.h}
{\xe \v I2CDriver.h\:I2C_Return}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b I2C_Return}}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return Status Enumeration \par
}{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v I2C_OK\:I2CDriver.h}
{\xe \v I2CDriver.h\:I2C_OK}
{\qr I2C_OK{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
\cell }{\cell }{\row }
{\xe \v I2C_IOCTL_FAILED\:I2CDriver.h}
{\xe \v I2CDriver.h\:I2C_IOCTL_FAILED}
{\qr I2C_IOCTL_FAILED{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
\cell }{\cell }{\row }
{\xe \v I2C_WRITE_FAILED\:I2CDriver.h}
{\xe \v I2CDriver.h\:I2C_WRITE_FAILED}
{\qr I2C_WRITE_FAILED{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
\cell }{\cell }{\row }
{\xe \v I2C_READ_FAILED\:I2CDriver.h}
{\xe \v I2CDriver.h\:I2C_READ_FAILED}
{\qr I2C_READ_FAILED{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
\cell }{\cell }{\row }
{\xe \v I2C_CRC_FAILED\:I2CDriver.h}
{\xe \v I2CDriver.h\:I2C_CRC_FAILED}
{\qr I2C_CRC_FAILED{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
\cell }{\cell }{\row }
{\xe \v I2C_FAIL\:I2CDriver.h}
{\xe \v I2CDriver.h\:I2C_FAIL}
{\qr I2C_FAIL{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
I2CDriver.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/I2CDriver.h}
{\xe \v src/peripherals/I2CDriver.h}
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
9 {\cf21 #ifndef I2C_DRIVER_H}\par
10 {\cf21 #define I2C_DRIVER_H}\par
11 \par
12 {\cf21 #include <stdint.h>}\par
13 \par
14 \par
18 {\cf17 typedef} {\cf17 enum} \{\par
19     I2C_OK              = 0,\par
20     I2C_IOCTL_FAILED    = -1,\par
21     I2C_WRITE_FAILED    = -2,\par
22     I2C_READ_FAILED     = -3,\par
23     I2C_CRC_FAILED      = -4, \par
24     I2C_FAIL            = -5\par
25 \} I2C_Return;\par
26 \par
27 \par
35 {\cf17 class }I2CDriver \{\par
36     {\cf17 public}:\par
37         {\cf20 /* Setup I2C fd*/}\par
38         {\cf18 int} I2C_Setup_File({\cf18 int} addres);\par
39         {\cf18 int} I2C_Close_File({\cf18 int} fd);\par
40 \par
41         {\cf20 /* Plain I2C Functions*/}\par
42         I2C_Return Plain_I2C_Write_Read({\cf18 int} fd, uint16_t command, uint8_t *buffer, uint8_t readLength, uint16_t delay=10);\par
43         I2C_Return Plain_I2C_Write_Read_CRC8({\cf18 int} fd, uint16_t command, uint16_t *buffer, uint8_t readlen, uint16_t delay=10);\par
44         {\cf20 //I2C_Return Plain_I2C_Write_CRC8(int fd, uint16_t *command, uint8_t writelength, uint16_t *buffer, uint8_t readlength, uint16_t delay=10);}\par
45 \par
46         {\cf18 void} Delay({\cf18 unsigned} {\cf18 int} timeMs);\par
47 \par
48         {\cf20 /* SMBUS Functions*/}\par
49         {\cf18 int} I2C_Read_Byte({\cf18 int} fd);\par
50         {\cf18 int} I2C_Read_8bitReg({\cf18 int} fd, {\cf18 int} command);\par
51         {\cf18 int} I2C_Read_16bitReg({\cf18 int} fd, {\cf18 int} command);\par
52         {\cf18 int} I2C_Write_Byte({\cf18 int} fd, {\cf18 int} data);\par
53         {\cf18 int} I2C_Write_8bitReg({\cf18 int} fd, {\cf18 int} command, {\cf18 int} data);\par
54         {\cf18 int} I2C_Write_16bitReg({\cf18 int} fd, {\cf18 int} command, {\cf18 int} data);\par
55         {\cf18 int} I2C_Write_Block({\cf18 int} fd, {\cf18 int} command, uint8_t length, uint8_t *buff);\par
56         {\cf18 int} I2C_Read_Block({\cf18 int} fd, {\cf18 int} command, uint8_t *buff);\par
57         {\cf20 //int I2C_Write_Read_Blocks(int fd, int command, uint8_t writeLength, uint8_t *writeBuff, uint8_t readLength, uint8_t *readBuff);}\par
58 \};\par
59 \par
60 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/I2CSensor.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/I2CSensor.h}
{\xe \v src/peripherals/I2CSensor.h}
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdlib.h>}\par
{\f2 #include <unistd.h>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include "I2CDriver.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for I2CSensor.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_i2_c_sensor_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b I2CSensor}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}This file contains the class for the I2C Sensor \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
I2CSensor.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/I2CSensor.h}
{\xe \v src/peripherals/I2CSensor.h}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
10 {\cf21 #ifndef __GENERIC_I2C_SENSOR_H_}\par
11 {\cf21 #define __GENERIC_I2C_SENSOR_H_}\par
12 \par
13 {\cf21 #include <stdlib.h>}\par
14 {\cf21 #include <unistd.h>}\par
15 {\cf21 #include <stdio.h>}\par
16 {\cf21 #include "I2CDriver.h"}\par
17 \par
18 \par
22 {\cf17 class }I2CSensor \{\par
23     {\cf17 public}:\par
24 \par
31         {\cf17 virtual} {\cf18 int} Initialize(I2CDriver &i2c) = 0;\par
32 \par
33 \par
37         {\cf17 virtual} {\cf18 int} Reset() = 0;\par
38 \par
39 \par
43         {\cf20 //virtual int Get_Data() = 0;}\par
44 \par
45 \par
50         {\cf17 virtual} {\cf18 int} Close_Device() = 0;\par
51 \par
52 \par
53     {\cf17 private}:\par
54 \par
55       {\cf20 //m_pDriver = nullptr;}\par
56 \};\par
57 \par
58 \par
59 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/LEDController.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/LEDController.cpp}
{\xe \v src/peripherals/LEDController.cpp}
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "LEDController.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for LEDController.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_l_e_d_controller_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}LED {\b Controller} CPP file to control normal and RGB ligth \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/LEDController.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/LEDController.h}
{\xe \v src/peripherals/LEDController.h}
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <wiringPi.h>}\par
{\f2 #include <string>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for LEDController.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_l_e_d_controller_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_l_e_d_controller_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b LEDController}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}LED {\b Controller} header file to control normal and RGB ligth \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
LEDController.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/LEDController.h}
{\xe \v src/peripherals/LEDController.h}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
9 {\cf21 #ifndef LED_CONTROLLER_H}\par
10 {\cf21 #define LED_CONTROLLER_H}\par
11 \par
12 {\cf21 #include <wiringPi.h>}\par
13 {\cf21 #include <string>}\par
14 \par
15 {\cf17 class }LEDController \{\par
16     {\cf17 public}:\par
17         LEDController({\cf18 int} ledPin, {\cf18 int} redPin, {\cf18 int} greenPin, {\cf18 int} bluePin);\par
18         {\cf18 void} turnOnLED();\par
19         {\cf18 void} turnOffLED();\par
20         {\cf18 void} setRGBColor({\cf17 const} std::string& color);\par
21         {\cf18 void} turnOffRGBLED();\par
22 \par
23     {\cf17 private}:\par
24         {\cf18 int} ledPin;\par
25         {\cf18 int} redPin;\par
26         {\cf18 int} greenPin;\par
27         {\cf18 int} bluePin;\par
28         {\cf18 void} setColor({\cf18 int} red, {\cf18 int} green, {\cf18 int} blue);\par
29 \};\par
30 \par
31 {\cf21 #endif }{\cf20 // LEDCONTROLLER_H}\par
32 \par
33 \par
34 {\cf20 //g++ -o led_test LEDMain.cpp LEDController.cpp -lwiringPi}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/MFRC522.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/MFRC522.cpp}
{\xe \v src/peripherals/MFRC522.cpp}
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "MFRC522.h"}\par
{\f2 #include <linux/types.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <cstring>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <string>}\par
{\f2 #include <iostream>}\par
{\f2 #include <thread>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for MFRC522.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_m_f_r_c522_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b mfrc522}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/RelayBoard.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/RelayBoard.cpp}
{\xe \v src/peripherals/RelayBoard.cpp}
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "RelayBoard.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <stdlib.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for RelayBoard.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_relay_board_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}This file contains the functions for the Relay Board class. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/RelayBoard.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/RelayBoard.h}
{\xe \v src/peripherals/RelayBoard.h}
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "GPIODriver.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for RelayBoard.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_relay_board_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_relay_board_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b RelayBoard}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Relay Board class. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}This header file contains the Elego relay board class. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RelayBoard.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/RelayBoard.h}
{\xe \v src/peripherals/RelayBoard.h}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
9 {\cf21 #ifndef RELAY_H}\par
10 {\cf21 #define RELAY_H}\par
11 {\cf21 #include "GPIODriver.h"}\par
12 \par
20 {\cf17 class }RelayBoard \{\par
21 \par
22     {\cf17 public}:\par
23         RelayBoard() \{\par
24             {\cf20 // Change this list to enum or defines}\par
25             m_heaterGPIO = 17;\par
26             m_lightsGPIO = 27;\par
27             m_fanGPIO = 22;\par
28             m_waterPumpGPIO = 23;\par
29             m_heaterGPIOState = 1;\par
30             m_lightsGPIOState = 1;\par
31             m_fanGPIOState = 1;\par
32             m_waterPumpGPIOState = 1;\par
33         \}\par
34 \par
35         ~RelayBoard({\cf18 void}) \{\par
36             {\cf20 //Close_Device();}\par
37         \}\par
38 \par
39         {\cf18 int} Initialize(GPIODriver &driver);\par
40         {\cf18 int} Lighting({\cf18 int} state);\par
41         {\cf18 int} Heating({\cf18 int} state);\par
42         {\cf18 int} Airflow({\cf18 int} state);\par
43         {\cf18 int} Watering({\cf18 int} state);\par
44         {\cf18 int} Turn_Relays_Off();\par
45         {\cf18 int} Close_Relay_Board();\par
46 \par
47         {\cf18 int} GetWateringState();\par
48         {\cf18 int} GetAirflowState();\par
49         {\cf18 int} GetHeatingState();\par
50         {\cf18 int} GetLightingState();\par
51 \par
52         {\cf18 int} m_heaterGPIOState;\par
53         {\cf18 int} m_lightsGPIOState;\par
54         {\cf18 int} m_fanGPIOState;\par
55         {\cf18 int} m_waterPumpGPIOState;\par
56 \par
57     {\cf17 private}:\par
58         {\cf18 int} m_heaterGPIO;\par
59         {\cf18 int} m_lightsGPIO;\par
60         {\cf18 int} m_fanGPIO;\par
61         {\cf18 int} m_waterPumpGPIO;\par
62         GPIODriver* m_pGPIODriver = {\cf17 nullptr};\par
63 \};\par
64 \par
65 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/RFID.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/RFID.cpp}
{\xe \v src/peripherals/RFID.cpp}
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "RFID.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for RFID.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_r_f_i_d_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/RFID.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/RFID.h}
{\xe \v src/peripherals/RFID.h}
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "EventHandler.h"}\par
{\f2 #include "spi/spidev_impl.h"}\par
{\f2 #include "spi/sys_gpio_impl.h"}\par
{\f2 #include <mfrc522/mfrc522.h>}\par
{\f2 #include <spidevpp/gpio.h>}\par
{\f2 #include <iostream>}\par
{\f2 #include <thread>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for RFID.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_r_f_i_d_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_r_f_i_d_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b RFID}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RFID.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/RFID.h}
{\xe \v src/peripherals/RFID.h}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
2 {\cf21 #ifndef RFID_H}\par
3 {\cf21 #define RFID_H}\par
4 \par
5 {\cf21 #include "EventHandler.h"}\par
6 \par
7 {\cf21 #include "spi/spidev_impl.h"}\par
8 {\cf21 #include "spi/sys_gpio_impl.h"}\par
9 \par
10 {\cf21 #include <mfrc522/mfrc522.h>}\par
11 {\cf21 #include <spidevpp/gpio.h>}\par
12 \par
13 {\cf21 #include <iostream>}\par
14 {\cf21 #include <thread>}\par
15 \par
16 {\cf17 class }RFID \{\par
17     {\cf17 public}:\par
18         RFID() : spi({\cf22 "/dev/spidev0.0"}) \{\par
19             spi.mSpi.setBitsPerWord(8);\par
20             spi.mSpi.setSpeed(488000);\par
21             spi.mSpi.setMode(0);\par
22 \par
23             std::cout << spi.mSpi << std::endl;\par
24 \par
25             SysGpio resetPin(25, spidevpp::Gpio::Direction::OUTPUT, spidevpp::Gpio::Value::low);\par
26 \par
27             mfrc522::MFRC522 mfrc(spi, resetPin);\par
28             mfrc.PCD_Init();\par
29             \par
30             std::cout << {\cf22 "Start read loop!"} << std::endl;\par
31             \par
32             {\cf19 while}({\cf17 true}) \{\par
33                 EventHandler& eventHandler = EventHandler::getInstance();\par
34                 \par
35                 {\cf20 // Look for a card}\par
36                 {\cf19 if} (!mfrc.PICC_IsNewCardPresent()) \{\par
37                     std::this_thread::sleep_for(std::chrono::milliseconds(100));\par
38                     {\cf19 continue};\par
39                 \}\par
40 \par
41                 {\cf19 if} (!mfrc.PICC_ReadCardSerial()) \{\par
42                     {\cf19 continue};\par
43                 \}\par
44                 \par
45                 {\cf20 // Print UID}\par
46                 std::string UID = {\cf22 ""};\par
47                 {\cf19 for} (uint8_t i = 0; i < mfrc.uid.size; ++i) \{\par
48                     UID += std::to_string(mfrc.uid.uidByte[i]);\par
49                 \}\par
50 \par
51                 {\cf19 if}(UID == {\cf22 "249240189176"}) \{\par
52                     {\cf20 // Emit event.}\par
53                     printf({\cf22 "Welcome...\\n"});\par
54                     eventHandler.emit(Event::RfidAuthenticated);\par
55                     {\cf20 //std::this_thread::sleep_for(std::chrono::seconds(3));}\par
56                     {\cf20 //return;}\par
57                 \} {\cf19 else} \{\par
58                     {\cf20 // Emit fail event.}\par
59                     printf({\cf22 "Invalid rfid! Try again in few seconds...\\n"});\par
60                     std::this_thread::sleep_for(std::chrono::seconds(3));\par
61                 \}\par
62 \par
63             \}\par
64         \}\par
65         \par
66         {\cf18 void} Initialize();\par
67         \par
68         {\cf18 void} setMfrc(mfrc522::MFRC522* mfrc) \{\par
69             mfrcptr = mfrc;\par
70         \}\par
71 \par
72         {\cf18 void} start() \{\par
73             {\cf19 return};\par
74             std::cout << {\cf22 "Start read loop!"} << std::endl;\par
75             {\cf20 // return;}\par
76             {\cf19 while}({\cf17 true}) \{\par
77                 EventHandler& eventHandler = EventHandler::getInstance();\par
78                 \par
79                 std::cout << std::to_string(mfrcptr->PICC_IsNewCardPresent()) << std::endl;\par
80                 {\cf19 return};\par
81                 \par
82                 {\cf20 // Look for a card}\par
83                 {\cf19 if} (!mfrcptr->PICC_IsNewCardPresent()) \{\par
84                     std::this_thread::sleep_for(std::chrono::seconds(1));\par
85                     {\cf19 continue};\par
86                 \}\par
87 \par
88                 {\cf19 if} (!mfrcptr->PICC_ReadCardSerial()) \{\par
89                     {\cf19 continue};\par
90                 \}\par
91                 \par
92                 {\cf20 // Print UID}\par
93                 std::string UID = {\cf22 ""};\par
94                 {\cf19 for} (uint8_t i = 0; i < mfrcptr->uid.size; ++i) \{\par
95                     UID += std::to_string(mfrcptr->uid.uidByte[i]);\par
96                 \}\par
97 \par
98                 {\cf19 if}(UID == {\cf22 "249240189176"}) \{\par
99                     {\cf20 // Emit event.}\par
100                     printf({\cf22 "Welcome..."});\par
101                     eventHandler.emit(Event::RfidAuthenticated);\par
102                     {\cf19 return};\par
103                 \} {\cf19 else} \{\par
104                     {\cf20 // Emit fail event.}\par
105                     printf({\cf22 "Invalid rfid!"});\par
106                 \}\par
107                 printf({\cf22 "\\n"});\par
108 \par
109             \}\par
110         \}\par
111         \par
112     {\cf17 private}:\par
113         mfrc522::MFRC522* mfrcptr;\par
114         Spidev spi;\par
115 \};\par
116 \par
117 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/ServoMotor.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/ServoMotor.cpp}
{\xe \v src/peripherals/ServoMotor.cpp}
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ServoMotor.h"}\par
{\f2 #include <iostream>}\par
{\f2 #include <unistd.h>}\par
{\f2 #include <pigpio.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ServoMotor.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_servo_motor_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Servo Moto cpp file to take pin and angle of motor \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/ServoMotor.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/ServoMotor.h}
{\xe \v src/peripherals/ServoMotor.h}
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_servo_motor_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ServoMotor}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Servo Moto Header file to take pin and angle of motor \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ServoMotor.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/ServoMotor.h}
{\xe \v src/peripherals/ServoMotor.h}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef SERVO_MOTOR_H}\par
9 {\cf21 #define SERVO_MOTOR_H}\par
10 \par
11 {\cf17 class }ServoMotor \{\par
12     {\cf17 public}:\par
13         ServoMotor({\cf18 int} pin);\par
14         ~ServoMotor();\par
15         {\cf18 void} write({\cf18 int} angle);\par
16 \par
17     {\cf17 private}:\par
18         {\cf18 int} _pin;\par
19         {\cf18 int} _angle;\par
20 \};\par
21 \par
22 {\cf21 #endif}\par
23 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/spi/spidev_impl.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/spi/spidev_impl.h}
{\xe \v src/peripherals/spi/spidev_impl.h}
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <mfrc522/ispi.h>}\par
{\f2 #include <spidevpp/spi.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for spidev_impl.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "spidev__impl_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "spidev__impl_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Spidev}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
spidev_impl.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/spi/spidev_impl.h}
{\xe \v src/peripherals/spi/spidev_impl.h}
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include <mfrc522/ispi.h>}\par
5 {\cf21 #include <spidevpp/spi.h>}\par
6 \par
7 {\cf17 class }Spidev : {\cf17 public} mfrc522::ISpi \{\par
8 \par
9 {\cf17 public}:\par
10     Spidev({\cf17 const} std::string& device)\par
11         :  mSpi(device)\par
12     \{\}\par
13 \par
14     {\cf18 void} write({\cf18 char}* pData, {\cf18 size_t} len) {\cf17 final} \{\par
15         mSpi.write(pData, len);\par
16     \}\par
17 \par
18     {\cf18 void} read({\cf18 char}* pData, {\cf18 size_t} len) {\cf17 final} \{\par
19         mSpi.read(pData, len);\par
20     \}\par
21 \par
22     {\cf18 void} writeRead({\cf18 char}* pData, {\cf18 size_t} len) {\cf17 final} \{\par
23         mSpi.writeRead(pData, len);\par
24     \}\par
25 \par
26     {\cf18 char} writeRead({\cf18 char} data) {\cf17 final} \{\par
27         {\cf19 return} mSpi.writeRead(data);\par
28     \}\par
29 \par
30     spidevpp::Spi mSpi;\par
31 \par
32 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/peripherals/spi/sys_gpio_impl.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/peripherals/spi/sys_gpio_impl.h}
{\xe \v src/peripherals/spi/sys_gpio_impl.h}
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <mfrc522/igpio.h>}\par
{\f2 #include <spidevpp/gpio.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for sys_gpio_impl.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "sys__gpio__impl_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "sys__gpio__impl_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b SysGpio}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
sys_gpio_impl.h\par \pard\plain 
{\tc\tcl2 \v src/peripherals/spi/sys_gpio_impl.h}
{\xe \v src/peripherals/spi/sys_gpio_impl.h}
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright (C) 2021 twyleg}\par
2 {\cf21 #pragma once}\par
3 \par
4 {\cf21 #include <mfrc522/igpio.h>}\par
5 {\cf21 #include <spidevpp/gpio.h>}\par
6 \par
7 {\cf17 class }SysGpio : {\cf17 public} mfrc522::IGpio \{\par
8 \par
9 {\cf17 public}:\par
10     SysGpio({\cf18 unsigned} {\cf18 int} pin, spidevpp::Gpio::Direction direction, spidevpp::Gpio::Value value)\par
11         :  mGpio(pin, direction, value)\par
12     \{\}\par
13 \par
14     {\cf18 void} setValue(Value value) {\cf17 final} \{\par
15         mGpio.setValue({\cf17 static_cast<}spidevpp::Gpio::Value{\cf17 >}(value));\par
16     \}\par
17 \par
18     Value getValue() final \{\par
19         {\cf19 return} {\cf17 static_cast<}mfrc522::IGpio::Value{\cf17 >}(mGpio.getValue());\par
20     \}\par
21 \par
22     spidevpp::Gpio mGpio;\par
23 \par
24 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/clap-detection/AudioRecordThread.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/clap-detection/AudioRecordThread.cpp}
{\xe \v src/thread/clap-detection/AudioRecordThread.cpp}
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ClapDetection.h"}\par
{\f2 #include "AudioRecordThread.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <iostream>}\par
{\f2 #include <chrono>}\par
{\f2 #include <thread>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for AudioRecordThread.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_audio_record_thread_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b EVENT_OP_CODES} \{ {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions related to audio recording thread. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v EVENT_OP_CODES\:AudioRecordThread.cpp}
{\xe \v AudioRecordThread.cpp\:EVENT_OP_CODES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b EVENT_OP_CODES}}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v EXIT_APPLICATION\:AudioRecordThread.cpp}
{\xe \v AudioRecordThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:AudioRecordThread.cpp}
{\xe \v AudioRecordThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:AudioRecordThread.cpp}
{\xe \v AudioRecordThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:AudioRecordThread.cpp}
{\xe \v AudioRecordThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:AudioRecordThread.cpp}
{\xe \v AudioRecordThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:AudioRecordThread.cpp}
{\xe \v AudioRecordThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:AudioRecordThread.cpp}
{\xe \v AudioRecordThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:AudioRecordThread.cpp}
{\xe \v AudioRecordThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/clap-detection/AudioRecordThread.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/clap-detection/AudioRecordThread.h}
{\xe \v src/thread/clap-detection/AudioRecordThread.h}
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../CppThread.h"}\par
{\f2 #include "../../utils/Globals.h"}\par
{\f2 #include "ClapDetection.h"}\par
{\f2 #include <string>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for AudioRecordThread.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_audio_record_thread_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_audio_record_thread_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b AudioRecordThread}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Handle our audio record thread. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioRecordThread.h\par \pard\plain 
{\tc\tcl2 \v src/thread/clap-detection/AudioRecordThread.h}
{\xe \v src/thread/clap-detection/AudioRecordThread.h}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef AUDIO_RECORD_THREAD_H}\par
9 {\cf21 #define AUDIO_RECORD_THREAD_H}\par
10 \par
11 {\cf21 #include "../CppThread.h"}\par
12 {\cf21 #include "../../utils/Globals.h"}\par
13 \par
14 {\cf21 #include "ClapDetection.h"}\par
15 {\cf21 #include <string>}\par
16 \par
17 {\cf17 class }AudioRecordThread : {\cf17 public} CppThread \{\par
18     {\cf17 public}:\par
19         AudioRecordThread(ClapDetection* clapDetection) \{\par
20             AudioRecordThread::clapDetection = clapDetection;\par
21         \}\par
22 \par
23     {\cf17 private}:\par
24         {\cf18 void} run();\par
25 \par
26     {\cf17 private}:\par
27         Globals globals;\par
28 \par
29         ClapDetection* clapDetection;\par
30 \};\par
31 \par
32 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/clap-detection/ClapThread.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/clap-detection/ClapThread.cpp}
{\xe \v src/thread/clap-detection/ClapThread.cpp}
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ClapDetection.h"}\par
{\f2 #include "ClapThread.h"}\par
{\f2 #include "EventHandler.h"}\par
{\f2 #include "ServoMotor.h"}\par
{\f2 #include "LEDController.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <thread>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ClapThread.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_clap_thread_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b EVENT_OP_CODES} \{ {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v EVENT_OP_CODES\:ClapThread.cpp}
{\xe \v ClapThread.cpp\:EVENT_OP_CODES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b EVENT_OP_CODES}}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v EXIT_APPLICATION\:ClapThread.cpp}
{\xe \v ClapThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ClapThread.cpp}
{\xe \v ClapThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ClapThread.cpp}
{\xe \v ClapThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ClapThread.cpp}
{\xe \v ClapThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ClapThread.cpp}
{\xe \v ClapThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ClapThread.cpp}
{\xe \v ClapThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ClapThread.cpp}
{\xe \v ClapThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ClapThread.cpp}
{\xe \v ClapThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/clap-detection/ClapThread.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/clap-detection/ClapThread.h}
{\xe \v src/thread/clap-detection/ClapThread.h}
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../CppThread.h"}\par
{\f2 #include "../../utils/Globals.h"}\par
{\f2 #include "ClapDetection.h"}\par
{\f2 #include <string>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ClapThread.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_clap_thread_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_clap_thread_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ClapThread}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Handle our clap detection thread. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ClapThread.h\par \pard\plain 
{\tc\tcl2 \v src/thread/clap-detection/ClapThread.h}
{\xe \v src/thread/clap-detection/ClapThread.h}
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef CLAP_THREAD_H}\par
9 {\cf21 #define CLAP_THREAD_H}\par
10 \par
11 {\cf21 #include "../CppThread.h"}\par
12 {\cf21 #include "../../utils/Globals.h"}\par
13 \par
14 {\cf21 #include "ClapDetection.h"}\par
15 {\cf21 #include <string>}\par
16 \par
17 {\cf17 class }ClapThread : {\cf17 public} CppThread \{\par
18     {\cf17 public}:\par
19         ClapThread(ClapDetection* clapDetection) \{\par
20             ClapThread::clapDetection = clapDetection;\par
21         \}\par
22 \par
23     {\cf17 private}:\par
24         {\cf18 void} run();\par
25 \par
26     {\cf17 private}:\par
27         Globals globals;\par
28   \par
29         ClapDetection* clapDetection;\par
30 \};\par
31 \par
32 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/ControllerThread.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/ControllerThread.cpp}
{\xe \v src/thread/ControllerThread.cpp}
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "intruder-detection/IntruderThread.h"}\par
{\f2 #include "intruder-mood-detection/IntruderMoodThread.h"}\par
{\f2 #include "clap-detection/ClapThread.h"}\par
{\f2 #include "rfid/RFIDThread.h"}\par
{\f2 #include "doors/DoorsThread.h"}\par
{\f2 #include "ServoMotor.h"}\par
{\f2 #include "LEDController.h"}\par
{\f2 #include "../utils/Globals.h"}\par
{\f2 #include "EventHandler.h"}\par
{\f2 #include "ControllerThread.h"}\par
{\f2 #include "ClapDetection.h"}\par
{\f2 #include "Controller.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <thread>}\par
{\f2 #include <typeinfo>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ControllerThread.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_controller_thread_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b EVENT_OP_CODES} \{ {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sigHandler} (int sig)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setHUPHandler} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b running} = 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions related to controller thread. We will initialize more child threads from here. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v EVENT_OP_CODES\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:EVENT_OP_CODES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b EVENT_OP_CODES}}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v EXIT_APPLICATION\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
\cell }{\cell }{\row }
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v setHUPHandler\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:setHUPHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setHUPHandler ()}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_controller_thread_8cpp_a20a45737018ec41ab19cb4f5164b26ac_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v sigHandler\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:sigHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sigHandler (int  {\i sig})}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_controller_thread_8cpp_a844160e16f1a3e514df9ce65683e17bd_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v running\:ControllerThread.cpp}
{\xe \v ControllerThread.cpp\:running}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int running = 1}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/ControllerThread.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/ControllerThread.h}
{\xe \v src/thread/ControllerThread.h}
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "CppThread.h"}\par
{\f2 #include <vector>}\par
{\f2 #include <iostream>}\par
{\f2 #include <map>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for ControllerThread.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_controller_thread_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_controller_thread_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ControllerThread}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Controller} Thread to manage all child threads. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale & Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Create a controller thread for whole program. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ControllerThread.h\par \pard\plain 
{\tc\tcl2 \v src/thread/ControllerThread.h}
{\xe \v src/thread/ControllerThread.h}
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef CONTROLLER_THREAD_H}\par
9 {\cf21 #define CONTROLLER_THREAD_H}\par
10 \par
11 {\cf21 #include "CppThread.h"}\par
12 {\cf21 #include <vector>}\par
13 {\cf21 #include <iostream>}\par
14 {\cf21 #include <map>}\par
15 {\cf20 // #include "Controller.h"}\par
16 \par
21 {\cf17 class }ControllerThread : {\cf17 public} CppThread \{\par
22     {\cf17 public}:\par
26         ControllerThread() \{\}\par
27 \par
28         {\cf18 void} setArgs({\cf18 int} ac, std::vector<std::string> av) \{\par
29             ControllerThread::argc = ac;\par
30 \par
31             {\cf19 if}(ac > 1) \{\par
32                 {\cf19 for}({\cf18 int} i = 0; i < ac; i++)\{\par
33                     ControllerThread::argv.push_back(av[i]);\par
34                 \}\par
35             \}\par
36         \}\par
37     {\cf17 private}:\par
38         {\cf18 void} run();\par
39     \par
40     {\cf17 private}:\par
41         {\cf18 int} argc = 1;\par
42 \par
43         std::vector<std::string> argv;\par
44 \par
45         {\cf17 enum} argvEnum \{\par
46             CreateIntruderDataset,\par
47             TrainIntruderModel,\par
48             DetectIntruder,\par
49             DetectClap,\par
50             RfidStart,\par
51             Debug,\par
52             IntruderMoodDetectionStart\par
53         \};\par
54 \par
55         std::map<std::string, argvEnum> argvValues = \{\par
56             \{{\cf22 "--create-intruder-dataset"}, CreateIntruderDataset\},\par
57             \{{\cf22 "--cid"}, CreateIntruderDataset\},\par
58             \{{\cf22 "--train-intruder-model"}, TrainIntruderModel\},\par
59             \{{\cf22 "--tim"}, TrainIntruderModel\},\par
60             \{{\cf22 "--detect-intruder"}, DetectIntruder\},\par
61             \{{\cf22 "--di"}, DetectIntruder\},\par
62             \{{\cf22 "--detect-clap"}, DetectClap\},\par
63             \{{\cf22 "--dc"}, DetectClap\},\par
64             \{{\cf22 "--rfid"}, RfidStart\},\par
65             \{{\cf22 "--d"}, Debug\},\par
66             \{{\cf22 "--imd"}, IntruderMoodDetectionStart\}\par
67         \};\par
68 \};\par
69 \par
70 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/CppThread.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/CppThread.h}
{\xe \v src/thread/CppThread.h}
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <thread>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CppThread.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_cpp_thread_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_cpp_thread_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b CppThread}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CppThread.h\par \pard\plain 
{\tc\tcl2 \v src/thread/CppThread.h}
{\xe \v src/thread/CppThread.h}
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef __CPP_THREAD_H_}\par
2 {\cf21 #define __CPP_THREAD_H_}\par
3 \par
11 {\cf21 #include <thread>}\par
12 \par
20 {\cf17 class }CppThread \{\par
21 \par
22 {\cf17 public}:\par
26     {\cf17 inline} {\cf18 void} start() \{\par
27         uthread = std::thread(&CppThread::run, {\cf17 this});\par
28     \}\par
29 \par
33     {\cf17 inline} {\cf18 void} join() \{\par
34         uthread.join();\par
35     \}\par
36 \par
37 {\cf17 protected}:\par
43     {\cf17 virtual} {\cf18 void} run() = 0; \par
44 \par
45 {\cf17 private}:\par
46     {\cf20 // pointer to the thread}\par
47     std::thread uthread;\par
48 \};\par
49 \par
50 \par
51 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/doors/DoorsThread.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/doors/DoorsThread.cpp}
{\xe \v src/thread/doors/DoorsThread.cpp}
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "EventHandler.h"}\par
{\f2 #include "../../utils/Globals.h"}\par
{\f2 #include "ServoMotor.h"}\par
{\f2 #include "LEDController.h"}\par
{\f2 #include "DoorsThread.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <thread>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for DoorsThread.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_doors_thread_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b EVENT_OP_CODES} \{ {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v EVENT_OP_CODES\:DoorsThread.cpp}
{\xe \v DoorsThread.cpp\:EVENT_OP_CODES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b EVENT_OP_CODES}}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v EXIT_APPLICATION\:DoorsThread.cpp}
{\xe \v DoorsThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:DoorsThread.cpp}
{\xe \v DoorsThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:DoorsThread.cpp}
{\xe \v DoorsThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:DoorsThread.cpp}
{\xe \v DoorsThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:DoorsThread.cpp}
{\xe \v DoorsThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:DoorsThread.cpp}
{\xe \v DoorsThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:DoorsThread.cpp}
{\xe \v DoorsThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:DoorsThread.cpp}
{\xe \v DoorsThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/doors/DoorsThread.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/doors/DoorsThread.h}
{\xe \v src/thread/doors/DoorsThread.h}
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../CppThread.h"}\par
{\f2 #include "ServoMotor.h"}\par
{\f2 #include "../../utils/Globals.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for DoorsThread.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_doors_thread_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_doors_thread_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b DoorsThread}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Doors Thread to manage doors detection functionality. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Handle our doors detection thread. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DoorsThread.h\par \pard\plain 
{\tc\tcl2 \v src/thread/doors/DoorsThread.h}
{\xe \v src/thread/doors/DoorsThread.h}
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef DOORS_THREAD_H}\par
9 {\cf21 #define DOORS_THREAD_H}\par
10 \par
11 {\cf21 #include "../CppThread.h"}\par
12 {\cf21 #include "ServoMotor.h"}\par
13 {\cf21 #include "../../utils/Globals.h"}\par
14 \par
19 {\cf17 class }DoorsThread : {\cf17 public} CppThread \{\par
20     {\cf17 public}:\par
26         DoorsThread() \{\par
27         \}\par
28 \par
32         {\cf18 void} stop()\{\}\par
33         \par
34     {\cf17 private}:\par
35         {\cf18 void} run();\par
36     \par
37     {\cf17 private}:\par
38         Globals globals;\par
39 \};\par
40 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/intruder-detection/IntruderThread.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/intruder-detection/IntruderThread.cpp}
{\xe \v src/thread/intruder-detection/IntruderThread.cpp}
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "EventHandler.h"}\par
{\f2 #include "DatasetCreator.h"}\par
{\f2 #include "DatasetTrainer.h"}\par
{\f2 #include "IntruderThread.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <thread>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for IntruderThread.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_thread_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b EVENT_OP_CODES} \{ {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions related to intruder detection thread.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale & Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions related to intruder detection thread. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v EVENT_OP_CODES\:IntruderThread.cpp}
{\xe \v IntruderThread.cpp\:EVENT_OP_CODES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b EVENT_OP_CODES}}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v EXIT_APPLICATION\:IntruderThread.cpp}
{\xe \v IntruderThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderThread.cpp}
{\xe \v IntruderThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderThread.cpp}
{\xe \v IntruderThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderThread.cpp}
{\xe \v IntruderThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderThread.cpp}
{\xe \v IntruderThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderThread.cpp}
{\xe \v IntruderThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderThread.cpp}
{\xe \v IntruderThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderThread.cpp}
{\xe \v IntruderThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/intruder-detection/IntruderThread.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/intruder-detection/IntruderThread.h}
{\xe \v src/thread/intruder-detection/IntruderThread.h}
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../CppThread.h"}\par
{\f2 #include "../../utils/Globals.h"}\par
{\f2 #include "EventHandler.h"}\par
{\f2 #include "IntruderDetection.h"}\par
{\f2 #include "DatasetCreator.h"}\par
{\f2 #include "DatasetTrainer.h"}\par
{\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <memory>}\par
{\f2 #include <string>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for IntruderThread.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_thread_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_thread_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b IntruderThread}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Intruder Thread to manage intruder detection functionality. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale & Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Handle our intruder detection thread. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntruderThread.h\par \pard\plain 
{\tc\tcl2 \v src/thread/intruder-detection/IntruderThread.h}
{\xe \v src/thread/intruder-detection/IntruderThread.h}
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef INTRUDER_THREAD_H}\par
9 {\cf21 #define INTRUDER_THREAD_H}\par
10 \par
11 {\cf21 #include "../CppThread.h"}\par
12 {\cf21 #include "../../utils/Globals.h"}\par
13 {\cf21 #include "EventHandler.h"}\par
14 \par
15 {\cf21 #include "IntruderDetection.h"}\par
16 {\cf21 #include "DatasetCreator.h"}\par
17 {\cf21 #include "DatasetTrainer.h"}\par
18 {\cf21 #include <opencv2/opencv.hpp>}\par
19 {\cf21 #include <memory>}\par
20 {\cf21 #include <string>}\par
21 \par
26 {\cf17 class }IntruderThread : {\cf17 public} CppThread \{\par
27     {\cf17 public}:\par
31         IntruderThread(cv::VideoCapture camera) \{\par
32             IntruderThread::camera = camera;\par
33         \}\par
34 \par
35         {\cf18 void} setModule(std::string module) \{\par
36             {\cf19 if}(modules.find(module) == modules.end()) \{\par
37                 std::cerr << {\cf22 "Invalid argument for module passed!"} << std::endl;\par
38                 raise(SIGHUP);\par
39             \} {\cf19 else} \{\par
40                 IntruderThread::module = module;\par
41             \}\par
42         \}\par
43 \par
44         {\cf18 void} stop()\{\par
45             {\cf20 // intruderDetection.stop();}\par
46             intruderDetection.stop();\par
47             datasetCreator.stop();\par
48             \par
49             camera.release();\par
50         \}\par
51 \par
52     {\cf17 private}:\par
53         {\cf20 // void run();}\par
54         {\cf18 void} run({\cf18 void});\par
55     \par
56     {\cf17 private}:\par
57         Globals globals;\par
58   \par
59         cv::VideoCapture camera;\par
60 \par
61         IntruderDetection intruderDetection;\par
62         IntruderDatasetCreator datasetCreator;\par
63         IntruderDatasetTrainer datasetTrainer;\par
64 \par
65         std::string module = {\cf22 "create-dataset"};\par
66 \par
67         std::map<std::string, int> modules = \{\par
68             \{{\cf22 "create-dataset"}, 1\},\par
69             \{{\cf22 "train-model"}, 2\},\par
70             \{{\cf22 "detect-intruder"}, 3\}\par
71         \};\par
72 \};\par
73 \par
74 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/intruder-mood-detection/IntruderMoodThread.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/intruder-mood-detection/IntruderMoodThread.cpp}
{\xe \v src/thread/intruder-mood-detection/IntruderMoodThread.cpp}
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../utils/EventHandler.h"}\par
{\f2 #include "IntruderMoodThread.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <thread>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for IntruderMoodThread.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_mood_thread_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b EVENT_OP_CODES} \{ {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale & Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions related to intruder detection thread. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v EVENT_OP_CODES\:IntruderMoodThread.cpp}
{\xe \v IntruderMoodThread.cpp\:EVENT_OP_CODES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b EVENT_OP_CODES}}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v EXIT_APPLICATION\:IntruderMoodThread.cpp}
{\xe \v IntruderMoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderMoodThread.cpp}
{\xe \v IntruderMoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderMoodThread.cpp}
{\xe \v IntruderMoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderMoodThread.cpp}
{\xe \v IntruderMoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderMoodThread.cpp}
{\xe \v IntruderMoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderMoodThread.cpp}
{\xe \v IntruderMoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderMoodThread.cpp}
{\xe \v IntruderMoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:IntruderMoodThread.cpp}
{\xe \v IntruderMoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/intruder-mood-detection/IntruderMoodThread.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/intruder-mood-detection/IntruderMoodThread.h}
{\xe \v src/thread/intruder-mood-detection/IntruderMoodThread.h}
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../CppThread.h"}\par
{\f2 #include "IntruderMoodDetection.h"}\par
{\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <memory>}\par
{\f2 #include <string>}\par
{\f2 #include "../utils/EventHandler.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for IntruderMoodThread.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_mood_thread_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_intruder_mood_thread_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b IntruderMoodThread}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale & Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Handle our intruder detection thread. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntruderMoodThread.h\par \pard\plain 
{\tc\tcl2 \v src/thread/intruder-mood-detection/IntruderMoodThread.h}
{\xe \v src/thread/intruder-mood-detection/IntruderMoodThread.h}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef INTRUDER_MOOD_THREAD_H}\par
9 {\cf21 #define INTRUDER_MOOD_THREAD_H}\par
10 \par
11 {\cf21 #include "../CppThread.h"}\par
12 {\cf20 // #include "../../utils/Globals.h"}\par
13 {\cf20 // #include "../../utils/Events.h"}\par
14 \par
15 {\cf21 #include "IntruderMoodDetection.h"}\par
16 {\cf21 #include <opencv2/opencv.hpp>}\par
17 {\cf21 #include <memory>}\par
18 {\cf21 #include <string>}\par
19 {\cf21 #include "../utils/EventHandler.h"}\par
20 \par
21 \par
22 {\cf17 class }IntruderMoodThread : {\cf17 public} CppThread \{\par
23     {\cf17 public}:\par
27         IntruderMoodThread(cv::VideoCapture camera) \{\par
28             IntruderMoodThread::camera = camera;\par
29         \}\par
30 \par
31         {\cf18 void} stop()\{\par
32             {\cf20 // intruderDetection.stop();}\par
33             intruderMoodDetection.stop();\par
34             \par
35             camera.release();\par
36         \}\par
37         \par
38         {\cf18 void} unlock() \{\par
39             intruderMoodDetection.unlock();\par
40         \}\par
41         \par
42         {\cf18 void} restart() \{\par
43             camera.open(0);\par
44             \par
45             intruderMoodDetection.restart();\par
46             intruderMoodDetection.start();\par
47         \}\par
48 \par
49     {\cf17 private}:\par
50         {\cf20 // void run();}\par
51         {\cf18 void} run({\cf18 void});\par
52     \par
53     {\cf17 private}:\par
54         {\cf20 // Globals globals;}\par
55 \par
56 \par
57         cv::VideoCapture camera;\par
58 \par
59         IntruderMoodDetection intruderMoodDetection;\par
60 \par
61 \par
62 \};\par
63 \par
64 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/mood-detection/MoodThread.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/mood-detection/MoodThread.cpp}
{\xe \v src/thread/mood-detection/MoodThread.cpp}
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "MoodDetection.h"}\par
{\f2 #include "MoodThread.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <thread>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for MoodThread.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_mood_thread_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b EVENT_OP_CODES} \{ {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions related to mood detection thread. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v EVENT_OP_CODES\:MoodThread.cpp}
{\xe \v MoodThread.cpp\:EVENT_OP_CODES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b EVENT_OP_CODES}}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v EXIT_APPLICATION\:MoodThread.cpp}
{\xe \v MoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:MoodThread.cpp}
{\xe \v MoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:MoodThread.cpp}
{\xe \v MoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:MoodThread.cpp}
{\xe \v MoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:MoodThread.cpp}
{\xe \v MoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:MoodThread.cpp}
{\xe \v MoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:MoodThread.cpp}
{\xe \v MoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:MoodThread.cpp}
{\xe \v MoodThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/mood-detection/MoodThread.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/mood-detection/MoodThread.h}
{\xe \v src/thread/mood-detection/MoodThread.h}
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../CppThread.h"}\par
{\f2 #include "MoodDetection.h"}\par
{\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <memory>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for MoodThread.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_mood_thread_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_mood_thread_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b MoodThread}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Mood Thread to manage mood detection functionality. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Handle our mood detection thread. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MoodThread.h\par \pard\plain 
{\tc\tcl2 \v src/thread/mood-detection/MoodThread.h}
{\xe \v src/thread/mood-detection/MoodThread.h}
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef MOOD_THREAD_H}\par
9 {\cf21 #define MOOD_THREAD_H}\par
10 \par
11 {\cf21 #include "../CppThread.h"}\par
12 {\cf21 #include "MoodDetection.h"}\par
13 {\cf21 #include <opencv2/opencv.hpp>}\par
14 {\cf21 #include <memory>}\par
15 \par
20 {\cf17 class }MoodThread : {\cf17 public} CppThread \{\par
21     {\cf17 public}:\par
27         MoodThread(cv::VideoCapture camera) \{\par
28             MoodThread::camera = camera;\par
29         \}\par
30 \par
34         {\cf18 void} stop()\{\par
35             moodDetection.stop();\par
36         \}\par
37 \par
38     {\cf17 private}:\par
39         {\cf18 void} run();\par
40     \par
41     {\cf17 private}:\par
42         cv::VideoCapture camera;\par
43 \par
44         MoodDetection moodDetection;\par
45 \};\par
46 \par
47 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/rfid/RFIDThread.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/rfid/RFIDThread.cpp}
{\xe \v src/thread/rfid/RFIDThread.cpp}
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "EventHandler.h"}\par
{\f2 #include "RFID.h"}\par
{\f2 #include "RFIDThread.h"}\par
{\f2 #include "LEDController.h"}\par
{\f2 #include "../utils/Globals.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <thread>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for RFIDThread.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_r_f_i_d_thread_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b EVENT_OP_CODES} \{ {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
, {\b EXIT_APPLICATION} = 255
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions related to doors thread.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Functions related to rfid detection thread. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v EVENT_OP_CODES\:RFIDThread.cpp}
{\xe \v RFIDThread.cpp\:EVENT_OP_CODES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b EVENT_OP_CODES}}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v EXIT_APPLICATION\:RFIDThread.cpp}
{\xe \v RFIDThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:RFIDThread.cpp}
{\xe \v RFIDThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:RFIDThread.cpp}
{\xe \v RFIDThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:RFIDThread.cpp}
{\xe \v RFIDThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:RFIDThread.cpp}
{\xe \v RFIDThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:RFIDThread.cpp}
{\xe \v RFIDThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:RFIDThread.cpp}
{\xe \v RFIDThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
\cell }{\cell }{\row }
{\xe \v EXIT_APPLICATION\:RFIDThread.cpp}
{\xe \v RFIDThread.cpp\:EXIT_APPLICATION}
{\qr EXIT_APPLICATION{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread/rfid/RFIDThread.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread/rfid/RFIDThread.h}
{\xe \v src/thread/rfid/RFIDThread.h}
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../CppThread.h"}\par
{\f2 #include "RFID.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for RFIDThread.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_r_f_i_d_thread_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_r_f_i_d_thread_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b RFIDThread}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Rfid Thread to manage rfid detection functionality. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Handle our rfid detection thread. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RFIDThread.h\par \pard\plain 
{\tc\tcl2 \v src/thread/rfid/RFIDThread.h}
{\xe \v src/thread/rfid/RFIDThread.h}
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef RFID_THREAD_H}\par
9 {\cf21 #define RFID_THREAD_H}\par
10 \par
11 {\cf21 #include "../CppThread.h"}\par
12 {\cf21 #include "RFID.h"}\par
13 \par
18 {\cf17 class }RFIDThread : {\cf17 public} CppThread \{\par
19     {\cf17 public}:\par
25         RFIDThread() \{\par
26         \}\par
27 \par
31         {\cf18 void} stop()\{\}\par
32 \par
33     {\cf17 private}:\par
34         {\cf18 void} run();\par
35 \};\par
36 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/utils/CircularQueue.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/utils/CircularQueue.h}
{\xe \v src/utils/CircularQueue.h}
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CircularQueue.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_circular_queue_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b CircularQueue}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Circular Queue Class \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CircularQueue.h\par \pard\plain 
{\tc\tcl2 \v src/utils/CircularQueue.h}
{\xe \v src/utils/CircularQueue.h}
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef CIRCULAR_QUEUE_H}\par
9 {\cf21 #define CIRCULAR_QUEUE_H}\par
10 \par
11 {\cf21 #include <iostream>}\par
12 \par
13 \par
14 {\cf17 class }CircularQueue \{\par
15     {\cf17 private}:\par
16         {\cf18 int} front, rear;\par
17         {\cf18 int} size;\par
18         {\cf18 int} *queue;\par
19 \par
20     {\cf17 public}:\par
21         CircularQueue({\cf18 int} size) : front(0), rear(-1), size(size) \{\par
22             queue = {\cf17 new} {\cf18 int}[size];\par
23         \}\par
24 \par
25         ~CircularQueue() \{\par
26             {\cf17 delete}[] queue;\par
27         \}\par
28 \par
29         {\cf18 void} enqueue({\cf18 int} value) \{\par
30             rear = (rear + 1) % size;\par
31             queue[rear] = value;\par
32             \par
33             {\cf20 // If the queue is full, update the front to overwrite the oldest element.}\par
34             {\cf19 if} ((rear + 1) % size == front) \{\par
35                 front = (front + 1) % size;\par
36             \}\par
37         \}\par
38 \par
39         {\cf18 int} dequeue() \{\par
40             {\cf19 if} (front == (rear + 1) % size) \{\par
41                 std::cout << {\cf22 "Queue is empty, cannot dequeue."} << std::endl;\par
42                 {\cf19 return} -1;\par
43             \}\par
44             {\cf18 int} value = queue[front];\par
45             front = (front + 1) % size;\par
46             {\cf19 return} value;\par
47         \}\par
48 \par
49         {\cf18 void} display() \{\par
50             {\cf19 if} (front == (rear + 1) % size) \{\par
51                 std::cout << {\cf22 "Queue is empty."} << std::endl;\par
52                 {\cf19 return};\par
53             \}\par
54             std::cout << {\cf22 "Elements in the Circular Queue are: "};\par
55             {\cf18 int} i = front;\par
56             {\cf19 while} (i != rear) \{\par
57                 std::cout << queue[i] << {\cf22 " "};\par
58                 i = (i + 1) % size;\par
59             \}\par
60             std::cout << queue[i] << std::endl; {\cf20 // Display the last element}\par
61         \}\par
62 \par
63         {\cf18 int} countQueue({\cf18 int} value) \{\par
64             {\cf18 int} count = 0;\par
65             {\cf19 if} (front == (rear + 1) % size) \{\par
66                 {\cf19 return} count; {\cf20 // Queue is empty}\par
67             \}\par
68             {\cf18 int} i = front;\par
69             {\cf19 while} (i != rear) \{\par
70                 {\cf19 if} (queue[i] == value) \{\par
71                     count++;\par
72                 \}\par
73                 i = (i + 1) % size;\par
74             \}\par
75             {\cf19 if} (queue[i] == value) \{ {\cf20 // Check the last element}\par
76                 count++;\par
77             \}\par
78             {\cf19 return} count;\par
79         \}\par
80 \};\par
81 \par
82 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/utils/CppTimerCallback.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/utils/CppTimerCallback.h}
{\xe \v src/utils/CppTimerCallback.h}
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdio.h>}\par
{\f2 #include "CppTimer.h"}\par
{\f2 #include <unistd.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CppTimerCallback.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_cpp_timer_callback_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b CppTimerCallback}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b CppTimerCallback::Runnable}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CppTimerCallback.h\par \pard\plain 
{\tc\tcl2 \v src/utils/CppTimerCallback.h}
{\xe \v src/utils/CppTimerCallback.h}
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef __CPP_TIMER_CALLBACK}\par
2 {\cf21 #define __CPP_TIMER_CALLBACK}\par
3 {\cf21 #include <stdio.h>}\par
4 {\cf21 #include "CppTimer.h"}\par
5 {\cf21 #include <unistd.h>}\par
6 \par
7 \par
8 {\cf17 class }CppTimerCallback : {\cf17 public} CppTimer \{\par
9 \par
10 {\cf17 public}:\par
11         {\cf17 class }Runnable \{\par
12         {\cf17 public}:\par
13                 {\cf17 virtual} {\cf18 void} run() = 0;\par
14 \par
15                 {\cf20 // void unregisterSelf() \{}\par
16                 {\cf20 //     CppTimerCallback cb;}\par
17                 {\cf20 //     cb.unregisterEventRunnable();}\par
18                 {\cf20 // \}}\par
19         \};\par
20 \par
21         {\cf18 void} registerEventRunnable(Runnable &h) \{\par
22                 cppTimerEventRunnable = &h;\par
23         \}\par
24 \par
25         {\cf18 void} unregisterEventRunnable() \{\par
26                 cppTimerEventRunnable = NULL;\par
27         \}\par
28         \par
29         {\cf18 void} timerEvent() \{\par
30                 {\cf19 if} (cppTimerEventRunnable) \{\par
31                         cppTimerEventRunnable->run();\par
32                 \}\par
33         \}\par
34 \par
35 {\cf17 private}:\par
36         Runnable* cppTimerEventRunnable = NULL;\par
37 \par
38 \};\par
39 \par
40 \par
41 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/utils/EventHandler.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/utils/EventHandler.cpp}
{\xe \v src/utils/EventHandler.cpp}
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "EventHandler.h"}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for EventHandler.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_event_handler_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Storing all event codes and allowing interfacing with the event managment in global \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/utils/EventTest/EventHandler.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/utils/EventTest/EventHandler.cpp}
{\xe \v src/utils/EventTest/EventHandler.cpp}
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "EventHandler.h"}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for EventHandler.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_event_test_2_event_handler_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Storing all event codes and allowing interfacing with the event managment in global \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/utils/EventHandler.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/utils/EventHandler.h}
{\xe \v src/utils/EventHandler.h}
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <unordered_map>}\par
{\f2 #include <functional>}\par
{\f2 #include <vector>}\par
{\f2 #include <any>}\par
{\f2 #include <tuple>}\par
{\f2 #include <iostream>}\par
{\f2 #include "EventHandler.tpp"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for EventHandler.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_event_handler_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_event_handler_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b EventHandler}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Event} \{ {\b test}
, {\b DatasetCreatorComplete}
, {\b DatasetTrainerComplete}
, {\b IntruderThreadKill}
, {\b IntruderMoodThreadKill}
, {\b RfidAuthenticated}
, {\b OpenGarageDoor}
, {\b OpenedGarageDoor}
, {\b CloseGarageDoor}
, {\b ClosedGarageDoor}
, {\b OpenMainDoor}
, {\b OpenedMainDoor}
, {\b CloseMainDoor}
, {\b ClosedMainDoor}
, {\b test}
, {\b DatasetCreatorComplete}
, {\b DatasetTrainerComplete}
, {\b IntruderThreadKill}
, {\b IntruderMoodThreadKill}
, {\b RfidAuthenticated}
, {\b OpenGarageDoor}
, {\b OpenedGarageDoor}
, {\b CloseGarageDoor}
, {\b ClosedGarageDoor}
, {\b OpenMainDoor}
, {\b OpenedMainDoor}
, {\b CloseMainDoor}
, {\b ClosedMainDoor}
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Savan Agrawal \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Storing all event codes and allowing interfacing with the event managment in global \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Event\:EventHandler.h}
{\xe \v EventHandler.h\:Event}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b Event}{\f2 [strong]}}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v test\:EventHandler.h}
{\xe \v EventHandler.h\:test}
{\qr test{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
\cell }{\cell }{\row }
{\xe \v DatasetCreatorComplete\:EventHandler.h}
{\xe \v EventHandler.h\:DatasetCreatorComplete}
{\qr DatasetCreatorComplete{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
\cell }{\cell }{\row }
{\xe \v DatasetTrainerComplete\:EventHandler.h}
{\xe \v EventHandler.h\:DatasetTrainerComplete}
{\qr DatasetTrainerComplete{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
\cell }{\cell }{\row }
{\xe \v IntruderThreadKill\:EventHandler.h}
{\xe \v EventHandler.h\:IntruderThreadKill}
{\qr IntruderThreadKill{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
\cell }{\cell }{\row }
{\xe \v IntruderMoodThreadKill\:EventHandler.h}
{\xe \v EventHandler.h\:IntruderMoodThreadKill}
{\qr IntruderMoodThreadKill{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
\cell }{\cell }{\row }
{\xe \v RfidAuthenticated\:EventHandler.h}
{\xe \v EventHandler.h\:RfidAuthenticated}
{\qr RfidAuthenticated{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
\cell }{\cell }{\row }
{\xe \v OpenGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenGarageDoor}
{\qr OpenGarageDoor{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
\cell }{\cell }{\row }
{\xe \v OpenedGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenedGarageDoor}
{\qr OpenedGarageDoor{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
\cell }{\cell }{\row }
{\xe \v CloseGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:CloseGarageDoor}
{\qr CloseGarageDoor{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
\cell }{\cell }{\row }
{\xe \v ClosedGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:ClosedGarageDoor}
{\qr ClosedGarageDoor{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
\cell }{\cell }{\row }
{\xe \v OpenMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenMainDoor}
{\qr OpenMainDoor{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
\cell }{\cell }{\row }
{\xe \v OpenedMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenedMainDoor}
{\qr OpenedMainDoor{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
\cell }{\cell }{\row }
{\xe \v CloseMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:CloseMainDoor}
{\qr CloseMainDoor{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
\cell }{\cell }{\row }
{\xe \v ClosedMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:ClosedMainDoor}
{\qr ClosedMainDoor{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
\cell }{\cell }{\row }
{\xe \v test\:EventHandler.h}
{\xe \v EventHandler.h\:test}
{\qr test{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
\cell }{\cell }{\row }
{\xe \v DatasetCreatorComplete\:EventHandler.h}
{\xe \v EventHandler.h\:DatasetCreatorComplete}
{\qr DatasetCreatorComplete{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
\cell }{\cell }{\row }
{\xe \v DatasetTrainerComplete\:EventHandler.h}
{\xe \v EventHandler.h\:DatasetTrainerComplete}
{\qr DatasetTrainerComplete{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
\cell }{\cell }{\row }
{\xe \v IntruderThreadKill\:EventHandler.h}
{\xe \v EventHandler.h\:IntruderThreadKill}
{\qr IntruderThreadKill{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
\cell }{\cell }{\row }
{\xe \v IntruderMoodThreadKill\:EventHandler.h}
{\xe \v EventHandler.h\:IntruderMoodThreadKill}
{\qr IntruderMoodThreadKill{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
\cell }{\cell }{\row }
{\xe \v RfidAuthenticated\:EventHandler.h}
{\xe \v EventHandler.h\:RfidAuthenticated}
{\qr RfidAuthenticated{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
\cell }{\cell }{\row }
{\xe \v OpenGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenGarageDoor}
{\qr OpenGarageDoor{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
\cell }{\cell }{\row }
{\xe \v OpenedGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenedGarageDoor}
{\qr OpenedGarageDoor{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
\cell }{\cell }{\row }
{\xe \v CloseGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:CloseGarageDoor}
{\qr CloseGarageDoor{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
\cell }{\cell }{\row }
{\xe \v ClosedGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:ClosedGarageDoor}
{\qr ClosedGarageDoor{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
\cell }{\cell }{\row }
{\xe \v OpenMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenMainDoor}
{\qr OpenMainDoor{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
\cell }{\cell }{\row }
{\xe \v OpenedMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenedMainDoor}
{\qr OpenedMainDoor{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
\cell }{\cell }{\row }
{\xe \v CloseMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:CloseMainDoor}
{\qr CloseMainDoor{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
\cell }{\cell }{\row }
{\xe \v ClosedMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:ClosedMainDoor}
{\qr ClosedMainDoor{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
EventHandler.h\par \pard\plain 
{\tc\tcl2 \v src/utils/EventHandler.h}
{\xe \v src/utils/EventHandler.h}
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf20 // #ifndef EVENT_HANDLER_H}\par
9 {\cf20 // #define EVENT_HANDLER_H}\par
10 \par
11 {\cf20 // #include <unordered_map>}\par
12 {\cf20 // #include <functional>}\par
13 {\cf20 // #include <vector>}\par
14 {\cf20 // #include <any>}\par
15 {\cf20 // #include <tuple>}\par
16 {\cf20 // #include <iostream>}\par
17 \par
18 {\cf20 // enum class Event \{}\par
19 {\cf20 //     test,}\par
20 {\cf20 //     DatasetCreatorComplete,}\par
21 {\cf20 //     DatasetTrainerComplete,}\par
22 {\cf20 //     IntruderThreadKill,}\par
23 {\cf20 //     IntruderMoodThreadKill,}\par
24 {\cf20 //     RfidAuthenticated,}\par
25 {\cf20 //     OpenGarageDoor,}\par
26 {\cf20 //     OpenedGarageDoor,}\par
27 {\cf20 //     CloseGarageDoor,}\par
28 {\cf20 //     ClosedGarageDoor,}\par
29 {\cf20 //     OpenMainDoor,}\par
30 {\cf20 //     OpenedMainDoor,}\par
31 {\cf20 //     CloseMainDoor,}\par
32 {\cf20 //     ClosedMainDoor}\par
33 {\cf20 // \};}\par
34 \par
35 {\cf20 // class EventHandler \{}\par
36 {\cf20 // public:}\par
37 {\cf20 //     static EventHandler& getInstance();}\par
38 \par
39 {\cf20 //     EventHandler(const EventHandler&) = delete;}\par
40 {\cf20 //     EventHandler& operator=(const EventHandler&) = delete;}\par
41 \par
42 {\cf20 //     void addListener(Event event, std::function<void()> callback);}\par
43 \par
44 {\cf20 //     template <typename... Args>}\par
45 {\cf20 //     void addListener(Event event, std::function<void(Args...)> callback);}\par
46 \par
47 {\cf20 //     void emit(Event event);}\par
48 \par
49 {\cf20 //     template <typename... Args>}\par
50 {\cf20 //     void emit(Event event, Args... args);}\par
51 \par
52 {\cf20 //     bool isEventRegistered(Event event) const;}\par
53 \par
54 {\cf20 // private:}\par
55 {\cf20 //     EventHandler() = default;}\par
56 {\cf20 //     ~EventHandler() = default;}\par
57 \par
58 {\cf20 //     std::unordered_map<Event, std::vector<std::function<void(std::any)>>> listeners;}\par
59 {\cf20 //     static const char* eventToString(Event event);}\par
60 {\cf20 // \};}\par
61 \par
62 {\cf20 // template <typename F>}\par
63 {\cf20 // auto make_function(F&& f) \{}\par
64 {\cf20 //     return std::function\{std::forward<F>(f)\};}\par
65 {\cf20 // \}}\par
66 \par
67 {\cf20 // #include "EventHandler.tpp"}\par
68 \par
69 {\cf20 // #endif // EVENT_HANDLER_H}\par
70 \par
71 \par
72 \par
73 \par
74 {\cf21 #ifndef EVENT_HANDLER_H}\par
75 {\cf21 #define EVENT_HANDLER_H}\par
76 \par
77 {\cf21 #include <unordered_map>}\par
78 {\cf21 #include <functional>}\par
79 {\cf21 #include <vector>}\par
80 {\cf21 #include <any>}\par
81 {\cf21 #include <tuple>}\par
82 {\cf21 #include <iostream>}\par
83 \par
84 {\cf17 enum class} Event \{\par
85     test,\par
86     DatasetCreatorComplete,\par
87     DatasetTrainerComplete,\par
88     IntruderThreadKill,\par
89     IntruderMoodThreadKill,\par
90     RfidAuthenticated,\par
91     OpenGarageDoor,\par
92     OpenedGarageDoor,\par
93     CloseGarageDoor,\par
94     ClosedGarageDoor,\par
95     OpenMainDoor,\par
96     OpenedMainDoor,\par
97     CloseMainDoor,\par
98     ClosedMainDoor\par
99 \};\par
100 \par
101 {\cf17 class }EventHandler \{\par
102 {\cf17 public}:\par
103     {\cf17 static} EventHandler& getInstance();\par
104 \par
105     EventHandler({\cf17 const} EventHandler&) = {\cf17 delete};\par
106     EventHandler& operator=({\cf17 const} EventHandler&) = {\cf17 delete};\par
107 \par
108     {\cf18 void} addListener(Event event, std::function<{\cf18 void}()> callback);\par
109 \par
110     {\cf17 template} <{\cf17 typename}... Args>\par
111     {\cf18 void} addListener(Event event, std::function<{\cf18 void}(Args...)> callback);\par
112 \par
113     {\cf18 void} emit(Event event);\par
114 \par
115     {\cf17 template} <{\cf17 typename}... Args>\par
116     {\cf18 void} emit(Event event, Args... args);\par
117 \par
118     {\cf18 bool} isEventRegistered(Event event) {\cf17 const};\par
119 \par
120 {\cf17 private}:\par
121     EventHandler() = {\cf19 default};\par
122     ~EventHandler() = {\cf19 default};\par
123 \par
124     std::unordered_map<Event, std::vector<std::function<void(std::any)>>> listeners;\par
125     {\cf17 static} {\cf17 const} {\cf18 char}* eventToString(Event event);\par
126 \};\par
127 \par
128 \par
129 {\cf21 #include "EventHandler.tpp"}\par
130 \par
131 {\cf21 #endif }{\cf20 // EVENT_HANDLER_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/utils/EventTest/EventHandler.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/utils/EventTest/EventHandler.h}
{\xe \v src/utils/EventTest/EventHandler.h}
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <unordered_map>}\par
{\f2 #include <functional>}\par
{\f2 #include <vector>}\par
{\f2 #include <any>}\par
{\f2 #include <tuple>}\par
{\f2 #include <iostream>}\par
{\f2 #include "EventHandler.tpp"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for EventHandler.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_event_test_2_event_handler_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_event_test_2_event_handler_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b EventHandler}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Event} \{ {\b test}
, {\b DatasetCreatorComplete}
, {\b DatasetTrainerComplete}
, {\b IntruderThreadKill}
, {\b IntruderMoodThreadKill}
, {\b RfidAuthenticated}
, {\b OpenGarageDoor}
, {\b OpenedGarageDoor}
, {\b CloseGarageDoor}
, {\b ClosedGarageDoor}
, {\b OpenMainDoor}
, {\b OpenedMainDoor}
, {\b CloseMainDoor}
, {\b ClosedMainDoor}
, {\b test}
, {\b DatasetCreatorComplete}
, {\b DatasetTrainerComplete}
, {\b IntruderThreadKill}
, {\b IntruderMoodThreadKill}
, {\b RfidAuthenticated}
, {\b OpenGarageDoor}
, {\b OpenedGarageDoor}
, {\b CloseGarageDoor}
, {\b ClosedGarageDoor}
, {\b OpenMainDoor}
, {\b OpenedMainDoor}
, {\b CloseMainDoor}
, {\b ClosedMainDoor}
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Event\:EventHandler.h}
{\xe \v EventHandler.h\:Event}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b Event}{\f2 [strong]}}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v test\:EventHandler.h}
{\xe \v EventHandler.h\:test}
{\qr test{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
\cell }{\cell }{\row }
{\xe \v DatasetCreatorComplete\:EventHandler.h}
{\xe \v EventHandler.h\:DatasetCreatorComplete}
{\qr DatasetCreatorComplete{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
\cell }{\cell }{\row }
{\xe \v DatasetTrainerComplete\:EventHandler.h}
{\xe \v EventHandler.h\:DatasetTrainerComplete}
{\qr DatasetTrainerComplete{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
\cell }{\cell }{\row }
{\xe \v IntruderThreadKill\:EventHandler.h}
{\xe \v EventHandler.h\:IntruderThreadKill}
{\qr IntruderThreadKill{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
\cell }{\cell }{\row }
{\xe \v IntruderMoodThreadKill\:EventHandler.h}
{\xe \v EventHandler.h\:IntruderMoodThreadKill}
{\qr IntruderMoodThreadKill{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
\cell }{\cell }{\row }
{\xe \v RfidAuthenticated\:EventHandler.h}
{\xe \v EventHandler.h\:RfidAuthenticated}
{\qr RfidAuthenticated{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
\cell }{\cell }{\row }
{\xe \v OpenGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenGarageDoor}
{\qr OpenGarageDoor{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
\cell }{\cell }{\row }
{\xe \v OpenedGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenedGarageDoor}
{\qr OpenedGarageDoor{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
\cell }{\cell }{\row }
{\xe \v CloseGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:CloseGarageDoor}
{\qr CloseGarageDoor{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
\cell }{\cell }{\row }
{\xe \v ClosedGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:ClosedGarageDoor}
{\qr ClosedGarageDoor{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
\cell }{\cell }{\row }
{\xe \v OpenMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenMainDoor}
{\qr OpenMainDoor{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
\cell }{\cell }{\row }
{\xe \v OpenedMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenedMainDoor}
{\qr OpenedMainDoor{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
\cell }{\cell }{\row }
{\xe \v CloseMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:CloseMainDoor}
{\qr CloseMainDoor{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
\cell }{\cell }{\row }
{\xe \v ClosedMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:ClosedMainDoor}
{\qr ClosedMainDoor{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
\cell }{\cell }{\row }
{\xe \v test\:EventHandler.h}
{\xe \v EventHandler.h\:test}
{\qr test{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
\cell }{\cell }{\row }
{\xe \v DatasetCreatorComplete\:EventHandler.h}
{\xe \v EventHandler.h\:DatasetCreatorComplete}
{\qr DatasetCreatorComplete{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
\cell }{\cell }{\row }
{\xe \v DatasetTrainerComplete\:EventHandler.h}
{\xe \v EventHandler.h\:DatasetTrainerComplete}
{\qr DatasetTrainerComplete{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
\cell }{\cell }{\row }
{\xe \v IntruderThreadKill\:EventHandler.h}
{\xe \v EventHandler.h\:IntruderThreadKill}
{\qr IntruderThreadKill{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
\cell }{\cell }{\row }
{\xe \v IntruderMoodThreadKill\:EventHandler.h}
{\xe \v EventHandler.h\:IntruderMoodThreadKill}
{\qr IntruderMoodThreadKill{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
\cell }{\cell }{\row }
{\xe \v RfidAuthenticated\:EventHandler.h}
{\xe \v EventHandler.h\:RfidAuthenticated}
{\qr RfidAuthenticated{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
\cell }{\cell }{\row }
{\xe \v OpenGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenGarageDoor}
{\qr OpenGarageDoor{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
\cell }{\cell }{\row }
{\xe \v OpenedGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenedGarageDoor}
{\qr OpenedGarageDoor{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
\cell }{\cell }{\row }
{\xe \v CloseGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:CloseGarageDoor}
{\qr CloseGarageDoor{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
\cell }{\cell }{\row }
{\xe \v ClosedGarageDoor\:EventHandler.h}
{\xe \v EventHandler.h\:ClosedGarageDoor}
{\qr ClosedGarageDoor{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
\cell }{\cell }{\row }
{\xe \v OpenMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenMainDoor}
{\qr OpenMainDoor{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
\cell }{\cell }{\row }
{\xe \v OpenedMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:OpenedMainDoor}
{\qr OpenedMainDoor{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
\cell }{\cell }{\row }
{\xe \v CloseMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:CloseMainDoor}
{\qr CloseMainDoor{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
\cell }{\cell }{\row }
{\xe \v ClosedMainDoor\:EventHandler.h}
{\xe \v EventHandler.h\:ClosedMainDoor}
{\qr ClosedMainDoor{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
EventHandler.h\par \pard\plain 
{\tc\tcl2 \v src/utils/EventTest/EventHandler.h}
{\xe \v src/utils/EventTest/EventHandler.h}
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef EVENT_HANDLER_H}\par
2 {\cf21 #define EVENT_HANDLER_H}\par
3 \par
4 {\cf21 #include <unordered_map>}\par
5 {\cf21 #include <functional>}\par
6 {\cf21 #include <vector>}\par
7 {\cf21 #include <any>}\par
8 {\cf21 #include <tuple>}\par
9 {\cf21 #include <iostream>}\par
10 \par
11 {\cf17 enum class} Event \{\par
12     test,\par
13     DatasetCreatorComplete,\par
14     DatasetTrainerComplete,\par
15     IntruderThreadKill,\par
16     IntruderMoodThreadKill,\par
17     RfidAuthenticated,\par
18     OpenGarageDoor,\par
19     OpenedGarageDoor,\par
20     CloseGarageDoor,\par
21     ClosedGarageDoor,\par
22     OpenMainDoor,\par
23     OpenedMainDoor,\par
24     CloseMainDoor,\par
25     ClosedMainDoor\par
26 \};\par
27 \par
28 {\cf17 class }EventHandler \{\par
29 {\cf17 public}:\par
30     {\cf17 static} EventHandler& getInstance();\par
31 \par
32     EventHandler({\cf17 const} EventHandler&) = {\cf17 delete};\par
33     EventHandler& operator=({\cf17 const} EventHandler&) = {\cf17 delete};\par
34 \par
35     {\cf18 void} addListener(Event event, std::function<{\cf18 void}()> callback);\par
36 \par
37     {\cf17 template} <{\cf17 typename}... Args>\par
38     {\cf18 void} addListener(Event event, std::function<{\cf18 void}(Args...)> callback);\par
39 \par
40     {\cf18 void} emit(Event event);\par
41 \par
42     {\cf17 template} <{\cf17 typename}... Args>\par
43     {\cf18 void} emit(Event event, Args... args);\par
44 \par
45     {\cf18 bool} isEventRegistered(Event event) {\cf17 const};\par
46 \par
47 {\cf17 private}:\par
48     EventHandler() = {\cf19 default};\par
49     ~EventHandler() = {\cf19 default};\par
50 \par
51     std::unordered_map<Event, std::vector<std::function<void(std::any)>>> listeners;\par
52     {\cf17 static} {\cf17 const} {\cf18 char}* eventToString(Event event);\par
53 \};\par
54 \par
55 \par
56 {\cf21 #include "EventHandler.tpp"}\par
57 \par
58 {\cf21 #endif }{\cf20 // EVENT_HANDLER_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/utils/Events.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/utils/Events.h}
{\xe \v src/utils/Events.h}
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "eventpp/eventdispatcher.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Events.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_events_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Events}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Storing all event codes and allowing interfacing with the eventpp library. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Events.h\par \pard\plain 
{\tc\tcl2 \v src/utils/Events.h}
{\xe \v src/utils/Events.h}
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef EVENTS_H}\par
9 {\cf21 #define EVENTS_H}\par
10 \par
11 {\cf21 #include "eventpp/eventdispatcher.h"}\par
12 \par
13 {\cf17 class }Events \{\par
14     {\cf17 public}:\par
15         {\cf17 enum} EVENT_CODES \{\par
16             CLAP_DETECTED,\par
17             CLAP_DETECTED_THREAD,\par
18             DATASET_CREATOR_COMPLETE,\par
19             DATASET_CREATOR_ERROR,\par
20             DATASET_TRAINER_COMPLETE,\par
21             DATASET_TRAINER_ERROR,\par
22             INTRUDER_THREAD_KILL\par
23         \};\par
24         \par
25         {\cf17 static} Events& getInstance() \{\par
26             {\cf17 static} Events instance;\par
27             {\cf19 return} instance; \par
28         \}\par
29         \par
30         Events({\cf17 const} Events&) = {\cf17 delete};\par
31         Events& operator = ({\cf17 const} Events&) = {\cf17 delete};\par
32 \par
33         eventpp::EventDispatcher<EVENT_CODES, void ()> getDispatcher() \{\par
34              {\cf19 return} dispatcher;\par
35         \}\par
36         \par
37         {\cf18 void} appendListener(EVENT_CODES ev, std::function<{\cf18 void}()> cb)\{\par
38             dispatcher.appendListener(ev, cb);\par
39         \}\par
40         \par
41         {\cf18 void} dispatch(EVENT_CODES ev) \{\par
42             dispatcher.dispatch(ev);\par
43         \}\par
44 \par
45     {\cf17 private}:\par
46         Events() = {\cf19 default};\par
47         ~Events() = {\cf19 default};\par
48         \par
49         eventpp::EventDispatcher<EVENT_CODES, void ()> dispatcher;\par
50 \par
51         {\cf20 // eventpp::CallbackList<void (const EVENT_CODES)>}\par
52 \};\par
53 \par
54 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/utils/Globals.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/utils/Globals.h}
{\xe \v src/utils/Globals.h}
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <opencv2/opencv.hpp>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Globals.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_globals_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_globals_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Globals}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Anything global that will be set only once. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Globals.h\par \pard\plain 
{\tc\tcl2 \v src/utils/Globals.h}
{\xe \v src/utils/Globals.h}
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
8 {\cf21 #ifndef GLOBALS_H}\par
9 {\cf21 #define GLOBALS_H}\par
10 \par
11 {\cf21 #include <opencv2/opencv.hpp>}\par
12 \par
13 \par
14 {\cf17 class }Globals \{\par
15     {\cf17 public}:\par
16         {\cf18 void} setMoodSvm() \{\par
17             mood_svm = cv::ml::SVM::load({\cf22 "../src/resources/svmhog.xml"});\par
18         \}\par
19 \par
20         cv::Ptr<cv::ml::SVM> getMoodSvm() \{\par
21             {\cf19 return} mood_svm;\par
22         \}\par
23         \par
24         {\cf18 int} getGarageDoorPin() \{\par
25             {\cf19 return} garageDoorPin;\par
26         \}\par
27         \par
28         {\cf18 int} getMainDoorPin() \{\par
29             {\cf19 return} mainDoorPin;\par
30         \}\par
31         \par
32         {\cf18 int} getLedPin() \{\par
33             {\cf19 return} ledPin;\par
34         \}\par
35         \par
36         {\cf18 int} getLedRedPin() \{\par
37             {\cf19 return} ledRedPin;\par
38         \}\par
39         \par
40         {\cf18 int} getLedGreenPin() \{\par
41             {\cf19 return} ledGreenPin;\par
42         \}\par
43         \par
44         {\cf18 int} getLedBluePin() \{\par
45             {\cf19 return} ledBluePin;\par
46         \}\par
47         \par
48     {\cf17 private}:\par
49         cv::Ptr<cv::ml::SVM> mood_svm;\par
50         {\cf18 int} garageDoorPin = 27;\par
51         {\cf18 int} mainDoorPin = 22;\par
52         \par
53         {\cf18 int} ledPin = 16;\par
54         \par
55         {\cf18 int} ledRedPin = 13;\par
56         {\cf18 int} ledGreenPin = 19;\par
57         {\cf18 int} ledBluePin = 12;\par
58 \};\par
59 \par
60 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/utils/Threads.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/utils/Threads.h}
{\xe \v src/utils/Threads.h}
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../thread/intruder-detection/IntruderThread.h"}\par
{\f2 #include "../thread/mood-detection/MoodThread.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for Threads.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_threads_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Threads}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Chinmay Nagrale \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1\par
}}Store all threads at a single class and use them to kill whenever we want. Note the difference an 's' makes for this class. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Threads.h\par \pard\plain 
{\tc\tcl2 \v src/utils/Threads.h}
{\xe \v src/utils/Threads.h}
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
9 {\cf21 #ifndef THREADS_H}\par
10 {\cf21 #define THREADS_H}\par
11 \par
12 {\cf21 #include "../thread/intruder-detection/IntruderThread.h"}\par
13 {\cf21 #include "../thread/mood-detection/MoodThread.h"}\par
14 \par
15 {\cf17 class }Threads \{\par
16     {\cf17 public}:\par
17         {\cf18 void} setIntruderThread(IntruderThread* it) \{\par
18             intruderThread = it;\par
19         \}\par
20 \par
21         IntruderThread getIntruderThread() \{\par
22             {\cf19 return} &intruderThread;\par
23         \}\par
24 \par
25     {\cf17 private}:\par
26         IntruderThread* intruderThread;\par
27         MoodThread moodThread;\par
28 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/utils/Utility.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/utils/Utility.h}
{\xe \v src/utils/Utility.h}
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Utility.h\par \pard\plain 
{\tc\tcl2 \v src/utils/Utility.h}
{\xe \v src/utils/Utility.h}
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid }

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
