<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_cpp_thread" xml:lang="en-US">
<title>CppThread Class Reference</title>
<indexterm><primary>CppThread</primary></indexterm>
<para>
<computeroutput>#include &lt;CppThread.h&gt;</computeroutput>
</para>
Inheritance diagram for CppThread:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_cpp_thread__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_cpp_thread_1a1be46d1be000f41a763289300623c609">start</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_cpp_thread_1a8ff0fda6b913cc53764caef0e1200f3f">join</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_cpp_thread_1a792b79e72250710147c452648def4a78">run</link> ()=0</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</para>

<para>(C) 2020-2022, Bernd Porr <link xlink:href="mailto:mail@bernporr.me.uk">mail@bernporr.me.uk</link> A thin wrapper around the C++ thread model to avoid a static callback. Instead just inherit this class and overload <link linkend="_class_cpp_thread_1a792b79e72250710147c452648def4a78">run()</link> which then runs in this thread. This is header-only so that it can be performed inline for max performance. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_cpp_thread_1a8ff0fda6b913cc53764caef0e1200f3f"/><section>
    <title>join()</title>
<indexterm><primary>join</primary><secondary>CppThread</secondary></indexterm>
<indexterm><primary>CppThread</primary><secondary>join</secondary></indexterm>
<para><computeroutput>void CppThread::join ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Waits for the thread to terminate. </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_cpp_thread_a8ff0fda6b913cc53764caef0e1200f3f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_cpp_thread_1a792b79e72250710147c452648def4a78"/><section>
    <title>run()</title>
<indexterm><primary>run</primary><secondary>CppThread</secondary></indexterm>
<indexterm><primary>CppThread</primary><secondary>run</secondary></indexterm>
<para><computeroutput>virtual void CppThread::run ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[pure virtual]</computeroutput></computeroutput></para>
<para>This method does all the work of this thread. Overload this abstract function with a real one doing the actual work of this thread. </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_cpp_thread_a792b79e72250710147c452648def4a78_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_cpp_thread_1a1be46d1be000f41a763289300623c609"/><section>
    <title>start()</title>
<indexterm><primary>start</primary><secondary>CppThread</secondary></indexterm>
<indexterm><primary>CppThread</primary><secondary>start</secondary></indexterm>
<para><computeroutput>void CppThread::start ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Starts the thread. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_cpp_thread_a1be46d1be000f41a763289300623c609_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_cpp_thread_a1be46d1be000f41a763289300623c609_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
src/thread/<link linkend="__cpp_thread_8h">CppThread.h</link></section>
</section>
