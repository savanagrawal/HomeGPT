<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__clap_detection_8h_source" xml:lang="en-US">
<title>ClapDetection.h</title>
<indexterm><primary>src/clap-detection/ClapDetection.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 
8 <emphasis role="preprocessor">#ifndef&#32;CLAP_DETECTION_H</emphasis>
9 <emphasis role="preprocessor">#define&#32;CLAP_DETECTION_H</emphasis>
10 
11 <emphasis role="preprocessor">#include&#32;&quot;CppTimer.h&quot;</emphasis>
12 <emphasis role="comment">//&#32;#include&#32;&quot;../utils/Events.h&quot;</emphasis>
13 
14 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
15 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
17 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
18 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&lt;complex&gt;</emphasis>
20 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
21 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
22 <emphasis role="preprocessor">#include&#32;&lt;portaudio.h&gt;</emphasis>
23 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
24 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
25 
26 <emphasis role="comment">//&#32;enum&#32;SIGNAL_CODES&#32;{</emphasis>
27 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;CLAP_DETECTED&#32;=&#32;1</emphasis>
28 <emphasis role="comment">//&#32;};</emphasis>
29 
30 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_clap_detection">ClapDetection</link>&#32;{
31 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_clap_detection_1aa18e197850922b6e636e0fdf76346204">ClapDetection</link>()&#32;{
33 
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
35 
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_clap_detection_1a93c7a6332be7f0b126135a9319daa745">Initialize</link>();
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_clap_detection_1a905ea0c10c5b8ce07c8cdda94e37535a">openStream</link>()&#32;{
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;Pa_OpenStream(&amp;stream,
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;inputParameters,
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="comment">//&#32;No&#32;output</emphasis>
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;44100,&#32;&#32;&#32;<emphasis role="comment">//&#32;Sample&#32;rate</emphasis>
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;256,&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Frames&#32;per&#32;buffer</emphasis>
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;paClipOff,
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_clap_detection_1a2c26276e3b68b25282e33d809788c6c8">paCallback</link>,
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;audioData);
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;paNoError)&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;PortAudio&#32;error&#32;open&#32;stream:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Pa_GetErrorText(err)&#32;&lt;&lt;&#32;std::endl;
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise(SIGHUP);
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
53 
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;Pa_StartStream(stream);
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;paNoError)&#32;{
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;PortAudio&#32;error&#32;start&#32;stream:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Pa_GetErrorText(err)&#32;&lt;&lt;&#32;std::endl;
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pa_CloseStream(stream);
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pa_Terminate();
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise(SIGHUP);
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_clap_detection_1a441f8b04980a0e2e7b20e83a6748ec8a">closeStream</link>()&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Stop&#32;audio&#32;stream</emphasis>
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;Pa_AbortStream(stream);
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;paNoError)&#32;{
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;PortAudio&#32;error&#32;abort&#32;stream:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Pa_GetErrorText(err)&#32;&lt;&lt;&#32;std::endl;
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise(SIGHUP);
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
72 
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Close&#32;audio&#32;stream</emphasis>
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;Pa_CloseStream(stream);
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;paNoError)&#32;{
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Portudio&#32;error&#32;close&#32;stream:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Pa_GetErrorText(err)&#32;&lt;&lt;&#32;std::endl;
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise(SIGHUP);
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
81 
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_clap_detection_1a800366c00fe876aa905a59a072436957">start</link>()&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<emphasis role="keyword">true</emphasis>)&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;float&gt;&#32;audioData;
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;Pa_OpenStream(&amp;stream,
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;inputParameters,
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="comment">//&#32;No&#32;output</emphasis>
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;44100,&#32;&#32;&#32;<emphasis role="comment">//&#32;Sample&#32;rate</emphasis>
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;256,&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Frames&#32;per&#32;buffer</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;paClipOff,
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_clap_detection_1a2c26276e3b68b25282e33d809788c6c8">paCallback</link>,
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;audioData);
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;paNoError)&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;PortAudio&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Pa_GetErrorText(err)&#32;&lt;&lt;&#32;std::endl;
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise(SIGHUP);
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
101 
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;Pa_StartStream(stream);
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;paNoError)&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;PortAudio&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Pa_GetErrorText(err)&#32;&lt;&lt;&#32;std::endl;
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pa_CloseStream(stream);
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pa_Terminate();
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise(SIGHUP);
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Record&#32;for&#32;1&#32;seconds</emphasis>
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Recording&#32;audio&#32;for&#32;1.0&#32;seconds...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pa_Sleep(1000);
114 
115 
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Run&#32;clap&#32;detection</emphasis>
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Running&#32;clap&#32;detection&#32;on&#32;recorded&#32;audio...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
118 
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;audioDataDouble(audioData.begin(),&#32;audioData.end());
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;audioData.size()&#32;&lt;&lt;&#32;std::endl;
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;per&#32;=&#32;<link linkend="_class_clap_detection_1aa9f00a28382879aaba458015d3e6acce">find_per_data</link>(audioDataDouble,&#32;y_find);
122 
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;double&#32;per&#32;=&#32;find_per(&quot;recorded_audio.wav&quot;,&#32;&quot;sample4.wav&quot;);</emphasis>
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found&#32;=&#32;<link linkend="_class_clap_detection_1a3d70aed7d269a7aa9fdd099a7b2334da">result</link>(per,&#32;0.5);
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Stop&#32;audio&#32;stream</emphasis>
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;Pa_AbortStream(stream);
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;paNoError)&#32;{
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;PortAudio&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Pa_GetErrorText(err)&#32;&lt;&lt;&#32;std::endl;
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise(SIGHUP);
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
133 
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Close&#32;audio&#32;stream</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;Pa_CloseStream(stream);
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;paNoError)&#32;{
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Portudio&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Pa_GetErrorText(err)&#32;&lt;&lt;&#32;std::endl;
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise(SIGHUP);
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
141 
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(found){
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;eventHandler-&gt;dispatch(EVENT_CODES::CLAP_DETECTED);</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pa_Terminate();
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
149 
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_clap_detection_1a14d7a4329f238978b15abc40f6066340">stop</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Terminate&#32;PortAudio</emphasis>
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pa_Terminate();
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_clap_detection_1a6505beb6c7931e5508b0b72d9365a387">record</link>()&#32;{
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Record&#32;for&#32;1&#32;seconds</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Recording&#32;audio&#32;for&#32;3.0&#32;seconds...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pa_Sleep(3000);
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!recorded)&#32;recorded&#32;=&#32;<emphasis role="keyword">true</emphasis>;
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_clap_detection_1a94762cfcae59ebbdea790fef53c9bc15">detectClap</link>()&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!recorded)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;audioDataDouble(audioData.begin(),&#32;audioData.end());
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;audioData.size()&#32;&lt;&lt;&#32;std::endl;
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;per&#32;=&#32;<link linkend="_class_clap_detection_1aa9f00a28382879aaba458015d3e6acce">find_per_data</link>(audioDataDouble,&#32;y_find);
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;per&#32;&lt;&lt;&#32;std::endl;
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;double&#32;per&#32;=&#32;find_per(&quot;recorded_audio.wav&quot;,&#32;&quot;sample4.wav&quot;);</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found&#32;=&#32;<link linkend="_class_clap_detection_1a3d70aed7d269a7aa9fdd099a7b2334da">result</link>(per,&#32;0.5);
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;found&#32;&lt;&lt;&#32;std::endl;
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!found){
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;audioData.clear();
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_clap_detection_1a441f8b04980a0e2e7b20e83a6748ec8a">closeStream</link>();
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_clap_detection_1a14d7a4329f238978b15abc40f6066340">stop</link>();
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;found;
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Helper&#32;function&#32;to&#32;reverse&#32;bits&#32;of&#32;a&#32;number</emphasis>
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_clap_detection_1ae3b186d18ddec06fc0d88821fe78dccc">reverse_bits</link>(<emphasis role="keywordtype">int</emphasis>&#32;num,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bit_length)&#32;{
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_clap_detection_1a3d70aed7d269a7aa9fdd099a7b2334da">result</link>&#32;=&#32;0;
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;bit_length;&#32;i++)&#32;{
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_clap_detection_1a3d70aed7d269a7aa9fdd099a7b2334da">result</link>&#32;=&#32;(<link linkend="_class_clap_detection_1a3d70aed7d269a7aa9fdd099a7b2334da">result</link>&#32;&lt;&lt;&#32;1)&#32;|&#32;(num&#32;&amp;&#32;1);
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num&#32;&gt;&gt;=&#32;1;
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_clap_detection_1a3d70aed7d269a7aa9fdd099a7b2334da">result</link>;
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
196 
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;the&#32;iterative&#32;in-place&#32;FFT&#32;of&#32;a&#32;vector</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_clap_detection_1a457a526ff1d5c5d9cef68b62f4f6a0aa">fft</link>(std::vector&lt;std::complex&lt;double&gt;&gt;&amp;&#32;a,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inverse)&#32;{
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;a.size();
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;log_n&#32;=&#32;std::log2(n);
201 
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Bit-reverse&#32;permutation</emphasis>
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;i++)&#32;{
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;<link linkend="_class_clap_detection_1ae3b186d18ddec06fc0d88821fe78dccc">reverse_bits</link>(i,&#32;log_n);
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;j)&#32;{
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::swap(a[i],&#32;a[j]);
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
209 
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterative&#32;FFT</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;len&#32;=&#32;2;&#32;len&#32;&lt;=&#32;n;&#32;len&#32;&lt;&lt;=&#32;1)&#32;{
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;angle&#32;=&#32;2&#32;*&#32;M_PI&#32;/&#32;len&#32;*&#32;(inverse&#32;?&#32;-1&#32;:&#32;1);
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;wn(std::cos(angle),&#32;std::sin(angle));
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;i&#32;+=&#32;len)&#32;{
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;w(1);
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;len&#32;/&#32;2;&#32;j++)&#32;{
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;u&#32;=&#32;a[i&#32;+&#32;j];
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;v&#32;=&#32;a[i&#32;+&#32;j&#32;+&#32;len&#32;/&#32;2]&#32;*&#32;w;
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a[i&#32;+&#32;j]&#32;=&#32;u&#32;+&#32;v;
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a[i&#32;+&#32;j&#32;+&#32;len&#32;/&#32;2]&#32;=&#32;u&#32;-&#32;v;
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;*=&#32;wn;
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;inverse&#32;FFT,&#32;divide&#32;by&#32;n</emphasis>
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inverse)&#32;{
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;x&#32;:&#32;a)&#32;{
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;/=&#32;n;
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
233 
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Compute&#32;the&#32;circular&#32;convolution&#32;of&#32;two&#32;vectors&#32;using&#32;the&#32;DFT</emphasis>
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::vector&lt;double&gt;&#32;<link linkend="_class_clap_detection_1a71206899c9fbc9e7687d3305beeb15cc">convolve</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;double&gt;&amp;&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;double&gt;&amp;&#32;b)&#32;{
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;a.size();
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m&#32;=&#32;b.size();
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;l&#32;=&#32;n&#32;+&#32;m&#32;-&#32;1;
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;p&#32;=&#32;1;
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p&#32;&lt;&#32;l)&#32;{
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;&lt;&lt;=&#32;1;
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::complex&lt;double&gt;&gt;&#32;pa(p),&#32;pb(p),&#32;pc(p);
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::copy(a.begin(),&#32;a.end(),&#32;pa.begin());
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::copy(b.begin(),&#32;b.end(),&#32;pb.begin());
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_clap_detection_1a457a526ff1d5c5d9cef68b62f4f6a0aa">fft</link>(pa,&#32;<emphasis role="keyword">false</emphasis>);
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_clap_detection_1a457a526ff1d5c5d9cef68b62f4f6a0aa">fft</link>(pb,&#32;<emphasis role="keyword">false</emphasis>);
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::transform(pa.begin(),&#32;pa.end(),&#32;pb.begin(),&#32;pc.begin(),
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;std::complex&lt;double&gt;&amp;&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;std::complex&lt;double&gt;&amp;&#32;b)&#32;{&#32;return&#32;a&#32;*&#32;b;&#32;});
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_clap_detection_1a457a526ff1d5c5d9cef68b62f4f6a0aa">fft</link>(pc,&#32;<emphasis role="keyword">true</emphasis>);
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;<link linkend="_class_clap_detection_1a3d70aed7d269a7aa9fdd099a7b2334da">result</link>(l);
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;std::transform&#32;to&#32;compute&#32;the&#32;real&#32;part&#32;of&#32;each&#32;complex&#32;number</emphasis>
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::transform(pc.begin(),&#32;pc.begin()&#32;+&#32;l,&#32;<link linkend="_class_clap_detection_1a3d70aed7d269a7aa9fdd099a7b2334da">result</link>.begin(),
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;std::complex&lt;double&gt;&amp;&#32;cplx)&#32;{&#32;return&#32;std::real(cplx)&#32;*&#32;std::real(cplx);&#32;});
255 
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_clap_detection_1a3d70aed7d269a7aa9fdd099a7b2334da">result</link>;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
258 
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Load&#32;the&#32;audio&#32;file&#32;for&#32;sampling.</emphasis>
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::vector&lt;double&gt;&#32;<link linkend="_class_clap_detection_1a955c7cf2960391a7af5309db688356e6">load_audio_file</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;filename)&#32;{
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ifstream&#32;file(filename,&#32;std::ios::binary);
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)&#32;{
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Unable&#32;to&#32;open&#32;file!&quot;</emphasis>);
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;read&#32;the&#32;header</emphasis>
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;header[44];
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.read(header,&#32;44);
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;read&#32;data</emphasis>
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;BUFFER_SIZE&#32;=&#32;4096;&#32;<emphasis role="comment">//&#32;arbitrary&#32;buffer&#32;size</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;data;
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">short</emphasis>&#32;buffer[BUFFER_SIZE];
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(file.read(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;buffer[0]),&#32;BUFFER_SIZE&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">short</emphasis>)))&#32;{
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;BUFFER_SIZE;&#32;i++)&#32;{
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.push_back(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(buffer[i])&#32;/&#32;std::numeric_limits&lt;short&gt;::max());
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
282 
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;</emphasis>
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_clap_detection_1a4a303e4a95761d63c8348838c6c580bf">percentage_above_threshold</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;double&gt;&amp;&#32;a,&#32;<emphasis role="keywordtype">double</emphasis>&#32;threshold)&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;std::count_if(a.begin(),&#32;a.end(),&#32;[threshold](<emphasis role="keywordtype">double</emphasis>&#32;i)&#32;{&#32;return&#32;i&#32;&gt;&#32;threshold;&#32;});
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(count)&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(a.size())&#32;*&#32;100.0;
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
288 
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;</emphasis>
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_clap_detection_1a909b33bb375c84ab4b348eb9da0a1cf4">find_per</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;within_file,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;find_file)&#32;{
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;y_within&#32;=&#32;<link linkend="_class_clap_detection_1a955c7cf2960391a7af5309db688356e6">load_audio_file</link>(within_file);
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;y_find&#32;=&#32;<link linkend="_class_clap_detection_1a955c7cf2960391a7af5309db688356e6">load_audio_file</link>(find_file);
293 
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;c&#32;=&#32;<link linkend="_class_clap_detection_1a71206899c9fbc9e7687d3305beeb15cc">convolve</link>(y_within,&#32;y_find);
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;thres&#32;=&#32;*std::max_element(c.begin(),&#32;c.end())&#32;/&#32;8.0;
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;count&#32;=&#32;<link linkend="_class_clap_detection_1a4a303e4a95761d63c8348838c6c580bf">percentage_above_threshold</link>(c,&#32;thres);
298 
299 
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
302 
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;</emphasis>
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_clap_detection_1aa9f00a28382879aaba458015d3e6acce">find_per_data</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;double&gt;&amp;&#32;within_data,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;double&gt;&amp;&#32;y_find)&#32;{
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;c&#32;=&#32;<link linkend="_class_clap_detection_1a71206899c9fbc9e7687d3305beeb15cc">convolve</link>(within_data,&#32;y_find);
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;thres&#32;=&#32;*std::max_element(c.begin(),&#32;c.end())&#32;/&#32;8.0;
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;count&#32;=&#32;<link linkend="_class_clap_detection_1a4a303e4a95761d63c8348838c6c580bf">percentage_above_threshold</link>(c,&#32;thres);
309 
310 
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
313 
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;</emphasis>
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_clap_detection_1a3d70aed7d269a7aa9fdd099a7b2334da">result</link>(<emphasis role="keywordtype">double</emphasis>&#32;per,&#32;<emphasis role="keywordtype">double</emphasis>&#32;check){
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(per&#32;&lt;=&#32;check)&#32;{
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
321 
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_clap_detection_1a2c26276e3b68b25282e33d809788c6c8">paCallback</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*inputBuffer,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*outputBuffer,
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;framesPerBuffer,
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;PaStreamCallbackTimeInfo&#32;*timeInfo,
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PaStreamCallbackFlags&#32;statusFlags,
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*userData)&#32;{
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;float&gt;&#32;*audioData&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>std::vector&lt;float&gt;&#32;*<emphasis role="keyword">&gt;</emphasis>(userData);
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;*readPtr&#32;=&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;*)inputBuffer;
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;audioData-&gt;insert(audioData-&gt;end(),&#32;readPtr,&#32;readPtr&#32;+&#32;framesPerBuffer);
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;paContinue;
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
332 
333 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;y_find;
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;clapSamplePath&#32;=&#32;<emphasis role="stringliteral">&quot;../src/resources/clap-detection/sample.wav&quot;</emphasis>;
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;audioData&#32;=&#32;std::vector&lt;double&gt;(100,0.0);
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::vector&lt;double&gt;*&#32;y_findPtr;
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;recorded&#32;=&#32;<emphasis role="keyword">false</emphasis>;
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PaError&#32;err;
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PaStream&#32;*stream;
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PaStreamParameters&#32;inputParameters;
346 };
347 
348 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
